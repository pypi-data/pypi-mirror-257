# -----------------------------------------------------------------------------
#  pytermor [ANSI formatted terminal output toolset]
#  (c) 2022â€”2023. A. Shavykin <0.delameter@gmail.com>
# -----------------------------------------------------------------------------
# AUTOGENERATED MODULE
# ${created_at}
"""
Color preset lists.
${counts}
"""
from __future__ import annotations

from .ansi import IntCode
from .color import Color16, Color256, ColorRGB
import typing as t

class _ColorValues:
    """
    Filling of indexes and registries with all the preset colors takes quite
    a bit of time (~5 ms for `Color256` registry, ~25 ms for `ColorRGB`
    registry), which can be essential for applications that require fast import
    of the dependencies. Deferred instantiating can save that time, i.e. colors
    and supplementary structures do not actually exist until any of them is
    accessed for the first time. At the moment, this mechanism is enabled only
    for `cvr` registry, but not for `cv` (i.e. `Color256`), as the latter
    is always loaded automatically by the library itself anyway. Also it is
    harder to implement correctly considering these colors have relation with
    `Color16` instances.
    """
    def _instantiate(self):
        for name in sorted(dir(self)):
            if name.isupper():
                   if isinstance(attr := getattr(self, name), t.Callable):
                        setattr(self, name, attr())

    def load(self):
        self._instantiate()

class _ColorValuesXterm(_ColorValues):
    """
    ColorValuesXterm
    """

    # fmt: off
${defs_xterm_16}

${defs_xterm_256}
    # fmt: on


class _ColorValuesRGB(_ColorValues):
    """
    ColorValuesRGB
    """

    # fmt: off
${defs_rgb}
    # fmt: on


_CVT = t.TypeVar("_CVT", _ColorValuesXterm, _ColorValuesRGB)


class _ColorValuesLoader:
    """
    Actual colors
    """
    def __init__(self, target_cls: t.Type[_CVT]):
        self._target_cls: t.Type[_CVT] = target_cls
        self._actual: _CVT | None = None

    def load(self):
        if not self._actual:
            self._actual = self._target_cls()
            self._actual.load()

    def __getattr__(self, item):
        # when preset color is accessed
        self.load()
        return getattr(self._actual, item)


cv: _ColorValuesXterm = _ColorValuesXterm()
cvr: _ColorValuesRGB|_ColorValuesLoader = _ColorValuesLoader(_ColorValuesRGB)
