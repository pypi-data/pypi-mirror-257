# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkOrderResourceActiveHoursWeeklyModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_hours_week_num': 'str',
        'total_active_hours_worked': 'float',
        'total_active_hours_hour_val': 'int',
        'total_active_hours_minute_val': 'int'
    }

    attribute_map = {
        'active_hours_week_num': 'ActiveHoursWeekNum',
        'total_active_hours_worked': 'TotalActiveHoursWorked',
        'total_active_hours_hour_val': 'TotalActiveHoursHourVal',
        'total_active_hours_minute_val': 'TotalActiveHoursMinuteVal'
    }

    def __init__(self, active_hours_week_num=None, total_active_hours_worked=None, total_active_hours_hour_val=None, total_active_hours_minute_val=None):  # noqa: E501
        """WorkOrderResourceActiveHoursWeeklyModel - a model defined in Swagger"""  # noqa: E501
        self._active_hours_week_num = None
        self._total_active_hours_worked = None
        self._total_active_hours_hour_val = None
        self._total_active_hours_minute_val = None
        self.discriminator = None
        if active_hours_week_num is not None:
            self.active_hours_week_num = active_hours_week_num
        if total_active_hours_worked is not None:
            self.total_active_hours_worked = total_active_hours_worked
        if total_active_hours_hour_val is not None:
            self.total_active_hours_hour_val = total_active_hours_hour_val
        if total_active_hours_minute_val is not None:
            self.total_active_hours_minute_val = total_active_hours_minute_val

    @property
    def active_hours_week_num(self):
        """Gets the active_hours_week_num of this WorkOrderResourceActiveHoursWeeklyModel.  # noqa: E501


        :return: The active_hours_week_num of this WorkOrderResourceActiveHoursWeeklyModel.  # noqa: E501
        :rtype: str
        """
        return self._active_hours_week_num

    @active_hours_week_num.setter
    def active_hours_week_num(self, active_hours_week_num):
        """Sets the active_hours_week_num of this WorkOrderResourceActiveHoursWeeklyModel.


        :param active_hours_week_num: The active_hours_week_num of this WorkOrderResourceActiveHoursWeeklyModel.  # noqa: E501
        :type: str
        """

        self._active_hours_week_num = active_hours_week_num

    @property
    def total_active_hours_worked(self):
        """Gets the total_active_hours_worked of this WorkOrderResourceActiveHoursWeeklyModel.  # noqa: E501


        :return: The total_active_hours_worked of this WorkOrderResourceActiveHoursWeeklyModel.  # noqa: E501
        :rtype: float
        """
        return self._total_active_hours_worked

    @total_active_hours_worked.setter
    def total_active_hours_worked(self, total_active_hours_worked):
        """Sets the total_active_hours_worked of this WorkOrderResourceActiveHoursWeeklyModel.


        :param total_active_hours_worked: The total_active_hours_worked of this WorkOrderResourceActiveHoursWeeklyModel.  # noqa: E501
        :type: float
        """

        self._total_active_hours_worked = total_active_hours_worked

    @property
    def total_active_hours_hour_val(self):
        """Gets the total_active_hours_hour_val of this WorkOrderResourceActiveHoursWeeklyModel.  # noqa: E501


        :return: The total_active_hours_hour_val of this WorkOrderResourceActiveHoursWeeklyModel.  # noqa: E501
        :rtype: int
        """
        return self._total_active_hours_hour_val

    @total_active_hours_hour_val.setter
    def total_active_hours_hour_val(self, total_active_hours_hour_val):
        """Sets the total_active_hours_hour_val of this WorkOrderResourceActiveHoursWeeklyModel.


        :param total_active_hours_hour_val: The total_active_hours_hour_val of this WorkOrderResourceActiveHoursWeeklyModel.  # noqa: E501
        :type: int
        """

        self._total_active_hours_hour_val = total_active_hours_hour_val

    @property
    def total_active_hours_minute_val(self):
        """Gets the total_active_hours_minute_val of this WorkOrderResourceActiveHoursWeeklyModel.  # noqa: E501


        :return: The total_active_hours_minute_val of this WorkOrderResourceActiveHoursWeeklyModel.  # noqa: E501
        :rtype: int
        """
        return self._total_active_hours_minute_val

    @total_active_hours_minute_val.setter
    def total_active_hours_minute_val(self, total_active_hours_minute_val):
        """Sets the total_active_hours_minute_val of this WorkOrderResourceActiveHoursWeeklyModel.


        :param total_active_hours_minute_val: The total_active_hours_minute_val of this WorkOrderResourceActiveHoursWeeklyModel.  # noqa: E501
        :type: int
        """

        self._total_active_hours_minute_val = total_active_hours_minute_val

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkOrderResourceActiveHoursWeeklyModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkOrderResourceActiveHoursWeeklyModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
