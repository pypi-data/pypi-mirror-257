# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MeteringType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metering_type_id': 'int',
        'name': 'str',
        'description': 'str',
        'site_ref': 'list[SiteRef]',
        'task_refs': 'list[TaskRef]'
    }

    attribute_map = {
        'metering_type_id': 'MeteringTypeId',
        'name': 'Name',
        'description': 'Description',
        'site_ref': 'SiteRef',
        'task_refs': 'TaskRefs'
    }

    def __init__(self, metering_type_id=None, name=None, description=None, site_ref=None, task_refs=None):  # noqa: E501
        """MeteringType - a model defined in Swagger"""  # noqa: E501
        self._metering_type_id = None
        self._name = None
        self._description = None
        self._site_ref = None
        self._task_refs = None
        self.discriminator = None
        if metering_type_id is not None:
            self.metering_type_id = metering_type_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if site_ref is not None:
            self.site_ref = site_ref
        if task_refs is not None:
            self.task_refs = task_refs

    @property
    def metering_type_id(self):
        """Gets the metering_type_id of this MeteringType.  # noqa: E501


        :return: The metering_type_id of this MeteringType.  # noqa: E501
        :rtype: int
        """
        return self._metering_type_id

    @metering_type_id.setter
    def metering_type_id(self, metering_type_id):
        """Sets the metering_type_id of this MeteringType.


        :param metering_type_id: The metering_type_id of this MeteringType.  # noqa: E501
        :type: int
        """

        self._metering_type_id = metering_type_id

    @property
    def name(self):
        """Gets the name of this MeteringType.  # noqa: E501


        :return: The name of this MeteringType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MeteringType.


        :param name: The name of this MeteringType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this MeteringType.  # noqa: E501


        :return: The description of this MeteringType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MeteringType.


        :param description: The description of this MeteringType.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def site_ref(self):
        """Gets the site_ref of this MeteringType.  # noqa: E501


        :return: The site_ref of this MeteringType.  # noqa: E501
        :rtype: list[SiteRef]
        """
        return self._site_ref

    @site_ref.setter
    def site_ref(self, site_ref):
        """Sets the site_ref of this MeteringType.


        :param site_ref: The site_ref of this MeteringType.  # noqa: E501
        :type: list[SiteRef]
        """

        self._site_ref = site_ref

    @property
    def task_refs(self):
        """Gets the task_refs of this MeteringType.  # noqa: E501


        :return: The task_refs of this MeteringType.  # noqa: E501
        :rtype: list[TaskRef]
        """
        return self._task_refs

    @task_refs.setter
    def task_refs(self, task_refs):
        """Sets the task_refs of this MeteringType.


        :param task_refs: The task_refs of this MeteringType.  # noqa: E501
        :type: list[TaskRef]
        """

        self._task_refs = task_refs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeteringType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeteringType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
