# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateInvoiceModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vendor_id': 'int',
        'invoice_id': 'int',
        'sites': 'list[int]',
        'invoice_number': 'str',
        'invoice_date': 'datetime',
        'due_date': 'datetime',
        'description': 'str',
        'invoice_items': 'list[InvoiceItemModel]',
        'invoice_taxes': 'list[InvoiceTaxModel]',
        'current_site': 'int'
    }

    attribute_map = {
        'vendor_id': 'VendorId',
        'invoice_id': 'InvoiceId',
        'sites': 'Sites',
        'invoice_number': 'InvoiceNumber',
        'invoice_date': 'InvoiceDate',
        'due_date': 'DueDate',
        'description': 'Description',
        'invoice_items': 'InvoiceItems',
        'invoice_taxes': 'InvoiceTaxes',
        'current_site': 'CurrentSite'
    }

    def __init__(self, vendor_id=None, invoice_id=None, sites=None, invoice_number=None, invoice_date=None, due_date=None, description=None, invoice_items=None, invoice_taxes=None, current_site=None):  # noqa: E501
        """UpdateInvoiceModel - a model defined in Swagger"""  # noqa: E501
        self._vendor_id = None
        self._invoice_id = None
        self._sites = None
        self._invoice_number = None
        self._invoice_date = None
        self._due_date = None
        self._description = None
        self._invoice_items = None
        self._invoice_taxes = None
        self._current_site = None
        self.discriminator = None
        self.vendor_id = vendor_id
        self.invoice_id = invoice_id
        if sites is not None:
            self.sites = sites
        self.invoice_number = invoice_number
        self.invoice_date = invoice_date
        if due_date is not None:
            self.due_date = due_date
        if description is not None:
            self.description = description
        if invoice_items is not None:
            self.invoice_items = invoice_items
        self.invoice_taxes = invoice_taxes
        self.current_site = current_site

    @property
    def vendor_id(self):
        """Gets the vendor_id of this UpdateInvoiceModel.  # noqa: E501

        Vendor ID can be found in your Maxpanda Vendor index or Vendor API  # noqa: E501

        :return: The vendor_id of this UpdateInvoiceModel.  # noqa: E501
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this UpdateInvoiceModel.

        Vendor ID can be found in your Maxpanda Vendor index or Vendor API  # noqa: E501

        :param vendor_id: The vendor_id of this UpdateInvoiceModel.  # noqa: E501
        :type: int
        """
        if vendor_id is None:
            raise ValueError("Invalid value for `vendor_id`, must not be `None`")  # noqa: E501

        self._vendor_id = vendor_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this UpdateInvoiceModel.  # noqa: E501

        Site ID can be found in your Maxpanda Site index or Vendor API  # noqa: E501

        :return: The invoice_id of this UpdateInvoiceModel.  # noqa: E501
        :rtype: int
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this UpdateInvoiceModel.

        Site ID can be found in your Maxpanda Site index or Vendor API  # noqa: E501

        :param invoice_id: The invoice_id of this UpdateInvoiceModel.  # noqa: E501
        :type: int
        """
        if invoice_id is None:
            raise ValueError("Invalid value for `invoice_id`, must not be `None`")  # noqa: E501

        self._invoice_id = invoice_id

    @property
    def sites(self):
        """Gets the sites of this UpdateInvoiceModel.  # noqa: E501


        :return: The sites of this UpdateInvoiceModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this UpdateInvoiceModel.


        :param sites: The sites of this UpdateInvoiceModel.  # noqa: E501
        :type: list[int]
        """

        self._sites = sites

    @property
    def invoice_number(self):
        """Gets the invoice_number of this UpdateInvoiceModel.  # noqa: E501

        Invoice Number of Invoice  # noqa: E501

        :return: The invoice_number of this UpdateInvoiceModel.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this UpdateInvoiceModel.

        Invoice Number of Invoice  # noqa: E501

        :param invoice_number: The invoice_number of this UpdateInvoiceModel.  # noqa: E501
        :type: str
        """
        if invoice_number is None:
            raise ValueError("Invalid value for `invoice_number`, must not be `None`")  # noqa: E501

        self._invoice_number = invoice_number

    @property
    def invoice_date(self):
        """Gets the invoice_date of this UpdateInvoiceModel.  # noqa: E501

        Date on which Invoice was Raised  # noqa: E501

        :return: The invoice_date of this UpdateInvoiceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this UpdateInvoiceModel.

        Date on which Invoice was Raised  # noqa: E501

        :param invoice_date: The invoice_date of this UpdateInvoiceModel.  # noqa: E501
        :type: datetime
        """
        if invoice_date is None:
            raise ValueError("Invalid value for `invoice_date`, must not be `None`")  # noqa: E501

        self._invoice_date = invoice_date

    @property
    def due_date(self):
        """Gets the due_date of this UpdateInvoiceModel.  # noqa: E501

        Due date of Invoice  # noqa: E501

        :return: The due_date of this UpdateInvoiceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this UpdateInvoiceModel.

        Due date of Invoice  # noqa: E501

        :param due_date: The due_date of this UpdateInvoiceModel.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def description(self):
        """Gets the description of this UpdateInvoiceModel.  # noqa: E501

        Description of Invoice  # noqa: E501

        :return: The description of this UpdateInvoiceModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateInvoiceModel.

        Description of Invoice  # noqa: E501

        :param description: The description of this UpdateInvoiceModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def invoice_items(self):
        """Gets the invoice_items of this UpdateInvoiceModel.  # noqa: E501


        :return: The invoice_items of this UpdateInvoiceModel.  # noqa: E501
        :rtype: list[InvoiceItemModel]
        """
        return self._invoice_items

    @invoice_items.setter
    def invoice_items(self, invoice_items):
        """Sets the invoice_items of this UpdateInvoiceModel.


        :param invoice_items: The invoice_items of this UpdateInvoiceModel.  # noqa: E501
        :type: list[InvoiceItemModel]
        """

        self._invoice_items = invoice_items

    @property
    def invoice_taxes(self):
        """Gets the invoice_taxes of this UpdateInvoiceModel.  # noqa: E501

        Taxes applied on Invoice  # noqa: E501

        :return: The invoice_taxes of this UpdateInvoiceModel.  # noqa: E501
        :rtype: list[InvoiceTaxModel]
        """
        return self._invoice_taxes

    @invoice_taxes.setter
    def invoice_taxes(self, invoice_taxes):
        """Sets the invoice_taxes of this UpdateInvoiceModel.

        Taxes applied on Invoice  # noqa: E501

        :param invoice_taxes: The invoice_taxes of this UpdateInvoiceModel.  # noqa: E501
        :type: list[InvoiceTaxModel]
        """
        if invoice_taxes is None:
            raise ValueError("Invalid value for `invoice_taxes`, must not be `None`")  # noqa: E501

        self._invoice_taxes = invoice_taxes

    @property
    def current_site(self):
        """Gets the current_site of this UpdateInvoiceModel.  # noqa: E501

        Users current site  # noqa: E501

        :return: The current_site of this UpdateInvoiceModel.  # noqa: E501
        :rtype: int
        """
        return self._current_site

    @current_site.setter
    def current_site(self, current_site):
        """Sets the current_site of this UpdateInvoiceModel.

        Users current site  # noqa: E501

        :param current_site: The current_site of this UpdateInvoiceModel.  # noqa: E501
        :type: int
        """
        if current_site is None:
            raise ValueError("Invalid value for `current_site`, must not be `None`")  # noqa: E501

        self._current_site = current_site

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateInvoiceModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateInvoiceModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
