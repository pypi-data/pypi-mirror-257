# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Invoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoice_id': 'int',
        'invoice_number': 'str',
        'vendor_ref': 'VendorRef',
        'invoice_date': 'datetime',
        'due_date': 'datetime',
        'total_amount': 'float',
        'description': 'str',
        'invoice_type_ref': 'list[InvoiceItemTypeRef]',
        'invoice_tax_ref': 'list[InvoiceTaxRef]',
        'workorder_ref': 'list[WorkorderRef]'
    }

    attribute_map = {
        'invoice_id': 'InvoiceId',
        'invoice_number': 'InvoiceNumber',
        'vendor_ref': 'VendorRef',
        'invoice_date': 'InvoiceDate',
        'due_date': 'DueDate',
        'total_amount': 'TotalAmount',
        'description': 'Description',
        'invoice_type_ref': 'InvoiceTypeRef',
        'invoice_tax_ref': 'InvoiceTaxRef',
        'workorder_ref': 'WorkorderRef'
    }

    def __init__(self, invoice_id=None, invoice_number=None, vendor_ref=None, invoice_date=None, due_date=None, total_amount=None, description=None, invoice_type_ref=None, invoice_tax_ref=None, workorder_ref=None):  # noqa: E501
        """Invoice - a model defined in Swagger"""  # noqa: E501
        self._invoice_id = None
        self._invoice_number = None
        self._vendor_ref = None
        self._invoice_date = None
        self._due_date = None
        self._total_amount = None
        self._description = None
        self._invoice_type_ref = None
        self._invoice_tax_ref = None
        self._workorder_ref = None
        self.discriminator = None
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if vendor_ref is not None:
            self.vendor_ref = vendor_ref
        if invoice_date is not None:
            self.invoice_date = invoice_date
        if due_date is not None:
            self.due_date = due_date
        if total_amount is not None:
            self.total_amount = total_amount
        if description is not None:
            self.description = description
        if invoice_type_ref is not None:
            self.invoice_type_ref = invoice_type_ref
        if invoice_tax_ref is not None:
            self.invoice_tax_ref = invoice_tax_ref
        if workorder_ref is not None:
            self.workorder_ref = workorder_ref

    @property
    def invoice_id(self):
        """Gets the invoice_id of this Invoice.  # noqa: E501


        :return: The invoice_id of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this Invoice.


        :param invoice_id: The invoice_id of this Invoice.  # noqa: E501
        :type: int
        """

        self._invoice_id = invoice_id

    @property
    def invoice_number(self):
        """Gets the invoice_number of this Invoice.  # noqa: E501


        :return: The invoice_number of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this Invoice.


        :param invoice_number: The invoice_number of this Invoice.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def vendor_ref(self):
        """Gets the vendor_ref of this Invoice.  # noqa: E501


        :return: The vendor_ref of this Invoice.  # noqa: E501
        :rtype: VendorRef
        """
        return self._vendor_ref

    @vendor_ref.setter
    def vendor_ref(self, vendor_ref):
        """Sets the vendor_ref of this Invoice.


        :param vendor_ref: The vendor_ref of this Invoice.  # noqa: E501
        :type: VendorRef
        """

        self._vendor_ref = vendor_ref

    @property
    def invoice_date(self):
        """Gets the invoice_date of this Invoice.  # noqa: E501


        :return: The invoice_date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this Invoice.


        :param invoice_date: The invoice_date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._invoice_date = invoice_date

    @property
    def due_date(self):
        """Gets the due_date of this Invoice.  # noqa: E501


        :return: The due_date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Invoice.


        :param due_date: The due_date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def total_amount(self):
        """Gets the total_amount of this Invoice.  # noqa: E501


        :return: The total_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this Invoice.


        :param total_amount: The total_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def description(self):
        """Gets the description of this Invoice.  # noqa: E501


        :return: The description of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Invoice.


        :param description: The description of this Invoice.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def invoice_type_ref(self):
        """Gets the invoice_type_ref of this Invoice.  # noqa: E501


        :return: The invoice_type_ref of this Invoice.  # noqa: E501
        :rtype: list[InvoiceItemTypeRef]
        """
        return self._invoice_type_ref

    @invoice_type_ref.setter
    def invoice_type_ref(self, invoice_type_ref):
        """Sets the invoice_type_ref of this Invoice.


        :param invoice_type_ref: The invoice_type_ref of this Invoice.  # noqa: E501
        :type: list[InvoiceItemTypeRef]
        """

        self._invoice_type_ref = invoice_type_ref

    @property
    def invoice_tax_ref(self):
        """Gets the invoice_tax_ref of this Invoice.  # noqa: E501


        :return: The invoice_tax_ref of this Invoice.  # noqa: E501
        :rtype: list[InvoiceTaxRef]
        """
        return self._invoice_tax_ref

    @invoice_tax_ref.setter
    def invoice_tax_ref(self, invoice_tax_ref):
        """Sets the invoice_tax_ref of this Invoice.


        :param invoice_tax_ref: The invoice_tax_ref of this Invoice.  # noqa: E501
        :type: list[InvoiceTaxRef]
        """

        self._invoice_tax_ref = invoice_tax_ref

    @property
    def workorder_ref(self):
        """Gets the workorder_ref of this Invoice.  # noqa: E501


        :return: The workorder_ref of this Invoice.  # noqa: E501
        :rtype: list[WorkorderRef]
        """
        return self._workorder_ref

    @workorder_ref.setter
    def workorder_ref(self, workorder_ref):
        """Sets the workorder_ref of this Invoice.


        :param workorder_ref: The workorder_ref of this Invoice.  # noqa: E501
        :type: list[WorkorderRef]
        """

        self._workorder_ref = workorder_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Invoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
