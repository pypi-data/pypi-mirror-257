# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetAuditModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_audit_id': 'int',
        'assigned_to': 'UserRef',
        'assigned_by': 'UserRef',
        'released_by': 'UserRef',
        'allocated_on': 'datetime',
        'released_on': 'datetime'
    }

    attribute_map = {
        'asset_audit_id': 'AssetAuditId',
        'assigned_to': 'AssignedTo',
        'assigned_by': 'AssignedBy',
        'released_by': 'ReleasedBy',
        'allocated_on': 'AllocatedOn',
        'released_on': 'ReleasedOn'
    }

    def __init__(self, asset_audit_id=None, assigned_to=None, assigned_by=None, released_by=None, allocated_on=None, released_on=None):  # noqa: E501
        """AssetAuditModel - a model defined in Swagger"""  # noqa: E501
        self._asset_audit_id = None
        self._assigned_to = None
        self._assigned_by = None
        self._released_by = None
        self._allocated_on = None
        self._released_on = None
        self.discriminator = None
        if asset_audit_id is not None:
            self.asset_audit_id = asset_audit_id
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if assigned_by is not None:
            self.assigned_by = assigned_by
        if released_by is not None:
            self.released_by = released_by
        if allocated_on is not None:
            self.allocated_on = allocated_on
        if released_on is not None:
            self.released_on = released_on

    @property
    def asset_audit_id(self):
        """Gets the asset_audit_id of this AssetAuditModel.  # noqa: E501


        :return: The asset_audit_id of this AssetAuditModel.  # noqa: E501
        :rtype: int
        """
        return self._asset_audit_id

    @asset_audit_id.setter
    def asset_audit_id(self, asset_audit_id):
        """Sets the asset_audit_id of this AssetAuditModel.


        :param asset_audit_id: The asset_audit_id of this AssetAuditModel.  # noqa: E501
        :type: int
        """

        self._asset_audit_id = asset_audit_id

    @property
    def assigned_to(self):
        """Gets the assigned_to of this AssetAuditModel.  # noqa: E501


        :return: The assigned_to of this AssetAuditModel.  # noqa: E501
        :rtype: UserRef
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this AssetAuditModel.


        :param assigned_to: The assigned_to of this AssetAuditModel.  # noqa: E501
        :type: UserRef
        """

        self._assigned_to = assigned_to

    @property
    def assigned_by(self):
        """Gets the assigned_by of this AssetAuditModel.  # noqa: E501


        :return: The assigned_by of this AssetAuditModel.  # noqa: E501
        :rtype: UserRef
        """
        return self._assigned_by

    @assigned_by.setter
    def assigned_by(self, assigned_by):
        """Sets the assigned_by of this AssetAuditModel.


        :param assigned_by: The assigned_by of this AssetAuditModel.  # noqa: E501
        :type: UserRef
        """

        self._assigned_by = assigned_by

    @property
    def released_by(self):
        """Gets the released_by of this AssetAuditModel.  # noqa: E501


        :return: The released_by of this AssetAuditModel.  # noqa: E501
        :rtype: UserRef
        """
        return self._released_by

    @released_by.setter
    def released_by(self, released_by):
        """Sets the released_by of this AssetAuditModel.


        :param released_by: The released_by of this AssetAuditModel.  # noqa: E501
        :type: UserRef
        """

        self._released_by = released_by

    @property
    def allocated_on(self):
        """Gets the allocated_on of this AssetAuditModel.  # noqa: E501


        :return: The allocated_on of this AssetAuditModel.  # noqa: E501
        :rtype: datetime
        """
        return self._allocated_on

    @allocated_on.setter
    def allocated_on(self, allocated_on):
        """Sets the allocated_on of this AssetAuditModel.


        :param allocated_on: The allocated_on of this AssetAuditModel.  # noqa: E501
        :type: datetime
        """

        self._allocated_on = allocated_on

    @property
    def released_on(self):
        """Gets the released_on of this AssetAuditModel.  # noqa: E501


        :return: The released_on of this AssetAuditModel.  # noqa: E501
        :rtype: datetime
        """
        return self._released_on

    @released_on.setter
    def released_on(self, released_on):
        """Sets the released_on of this AssetAuditModel.


        :param released_on: The released_on of this AssetAuditModel.  # noqa: E501
        :type: datetime
        """

        self._released_on = released_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetAuditModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetAuditModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
