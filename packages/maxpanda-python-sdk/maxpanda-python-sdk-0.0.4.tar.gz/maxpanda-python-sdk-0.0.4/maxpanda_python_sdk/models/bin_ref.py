# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BinRef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'decrease_qty': 'float',
        'parts_in_bin': 'float',
        'minimum_level': 'float',
        'increase_qty': 'float',
        'closed_workorder_qty': 'float'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'decrease_qty': 'DecreaseQty',
        'parts_in_bin': 'PartsInBin',
        'minimum_level': 'MinimumLevel',
        'increase_qty': 'IncreaseQty',
        'closed_workorder_qty': 'ClosedWorkorderQty'
    }

    def __init__(self, id=None, name=None, decrease_qty=None, parts_in_bin=None, minimum_level=None, increase_qty=None, closed_workorder_qty=None):  # noqa: E501
        """BinRef - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._decrease_qty = None
        self._parts_in_bin = None
        self._minimum_level = None
        self._increase_qty = None
        self._closed_workorder_qty = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if decrease_qty is not None:
            self.decrease_qty = decrease_qty
        if parts_in_bin is not None:
            self.parts_in_bin = parts_in_bin
        if minimum_level is not None:
            self.minimum_level = minimum_level
        if increase_qty is not None:
            self.increase_qty = increase_qty
        if closed_workorder_qty is not None:
            self.closed_workorder_qty = closed_workorder_qty

    @property
    def id(self):
        """Gets the id of this BinRef.  # noqa: E501


        :return: The id of this BinRef.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BinRef.


        :param id: The id of this BinRef.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BinRef.  # noqa: E501


        :return: The name of this BinRef.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BinRef.


        :param name: The name of this BinRef.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def decrease_qty(self):
        """Gets the decrease_qty of this BinRef.  # noqa: E501


        :return: The decrease_qty of this BinRef.  # noqa: E501
        :rtype: float
        """
        return self._decrease_qty

    @decrease_qty.setter
    def decrease_qty(self, decrease_qty):
        """Sets the decrease_qty of this BinRef.


        :param decrease_qty: The decrease_qty of this BinRef.  # noqa: E501
        :type: float
        """

        self._decrease_qty = decrease_qty

    @property
    def parts_in_bin(self):
        """Gets the parts_in_bin of this BinRef.  # noqa: E501


        :return: The parts_in_bin of this BinRef.  # noqa: E501
        :rtype: float
        """
        return self._parts_in_bin

    @parts_in_bin.setter
    def parts_in_bin(self, parts_in_bin):
        """Sets the parts_in_bin of this BinRef.


        :param parts_in_bin: The parts_in_bin of this BinRef.  # noqa: E501
        :type: float
        """

        self._parts_in_bin = parts_in_bin

    @property
    def minimum_level(self):
        """Gets the minimum_level of this BinRef.  # noqa: E501


        :return: The minimum_level of this BinRef.  # noqa: E501
        :rtype: float
        """
        return self._minimum_level

    @minimum_level.setter
    def minimum_level(self, minimum_level):
        """Sets the minimum_level of this BinRef.


        :param minimum_level: The minimum_level of this BinRef.  # noqa: E501
        :type: float
        """

        self._minimum_level = minimum_level

    @property
    def increase_qty(self):
        """Gets the increase_qty of this BinRef.  # noqa: E501


        :return: The increase_qty of this BinRef.  # noqa: E501
        :rtype: float
        """
        return self._increase_qty

    @increase_qty.setter
    def increase_qty(self, increase_qty):
        """Sets the increase_qty of this BinRef.


        :param increase_qty: The increase_qty of this BinRef.  # noqa: E501
        :type: float
        """

        self._increase_qty = increase_qty

    @property
    def closed_workorder_qty(self):
        """Gets the closed_workorder_qty of this BinRef.  # noqa: E501


        :return: The closed_workorder_qty of this BinRef.  # noqa: E501
        :rtype: float
        """
        return self._closed_workorder_qty

    @closed_workorder_qty.setter
    def closed_workorder_qty(self, closed_workorder_qty):
        """Sets the closed_workorder_qty of this BinRef.


        :param closed_workorder_qty: The closed_workorder_qty of this BinRef.  # noqa: E501
        :type: float
        """

        self._closed_workorder_qty = closed_workorder_qty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BinRef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BinRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
