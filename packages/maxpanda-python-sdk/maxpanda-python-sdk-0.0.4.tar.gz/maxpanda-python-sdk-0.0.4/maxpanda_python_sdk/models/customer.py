# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Customer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_ref': 'list[SiteRef]',
        'customer_id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'company_name': 'str',
        'email': 'str',
        'account_number': 'str',
        'contract_date': 'datetime',
        'min_weekly_hours': 'float',
        'max_weekly_hours': 'float',
        'total_hours': 'float',
        'phone': 'str',
        'mobile': 'str',
        'notes': 'str',
        'billing_address': 'Address',
        'shipping_address': 'Address',
        'shipping_address_same_as_billing': 'bool'
    }

    attribute_map = {
        'site_ref': 'SiteRef',
        'customer_id': 'CustomerId',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'company_name': 'CompanyName',
        'email': 'Email',
        'account_number': 'AccountNumber',
        'contract_date': 'ContractDate',
        'min_weekly_hours': 'MinWeeklyHours',
        'max_weekly_hours': 'MaxWeeklyHours',
        'total_hours': 'TotalHours',
        'phone': 'Phone',
        'mobile': 'Mobile',
        'notes': 'Notes',
        'billing_address': 'BillingAddress',
        'shipping_address': 'ShippingAddress',
        'shipping_address_same_as_billing': 'ShippingAddressSameAsBilling'
    }

    def __init__(self, site_ref=None, customer_id=None, first_name=None, last_name=None, company_name=None, email=None, account_number=None, contract_date=None, min_weekly_hours=None, max_weekly_hours=None, total_hours=None, phone=None, mobile=None, notes=None, billing_address=None, shipping_address=None, shipping_address_same_as_billing=None):  # noqa: E501
        """Customer - a model defined in Swagger"""  # noqa: E501
        self._site_ref = None
        self._customer_id = None
        self._first_name = None
        self._last_name = None
        self._company_name = None
        self._email = None
        self._account_number = None
        self._contract_date = None
        self._min_weekly_hours = None
        self._max_weekly_hours = None
        self._total_hours = None
        self._phone = None
        self._mobile = None
        self._notes = None
        self._billing_address = None
        self._shipping_address = None
        self._shipping_address_same_as_billing = None
        self.discriminator = None
        if site_ref is not None:
            self.site_ref = site_ref
        if customer_id is not None:
            self.customer_id = customer_id
        self.first_name = first_name
        self.last_name = last_name
        if company_name is not None:
            self.company_name = company_name
        self.email = email
        if account_number is not None:
            self.account_number = account_number
        if contract_date is not None:
            self.contract_date = contract_date
        if min_weekly_hours is not None:
            self.min_weekly_hours = min_weekly_hours
        if max_weekly_hours is not None:
            self.max_weekly_hours = max_weekly_hours
        if total_hours is not None:
            self.total_hours = total_hours
        if phone is not None:
            self.phone = phone
        if mobile is not None:
            self.mobile = mobile
        if notes is not None:
            self.notes = notes
        if billing_address is not None:
            self.billing_address = billing_address
        if shipping_address is not None:
            self.shipping_address = shipping_address
        if shipping_address_same_as_billing is not None:
            self.shipping_address_same_as_billing = shipping_address_same_as_billing

    @property
    def site_ref(self):
        """Gets the site_ref of this Customer.  # noqa: E501

        Site to which access is allowed for customer.  # noqa: E501

        :return: The site_ref of this Customer.  # noqa: E501
        :rtype: list[SiteRef]
        """
        return self._site_ref

    @site_ref.setter
    def site_ref(self, site_ref):
        """Sets the site_ref of this Customer.

        Site to which access is allowed for customer.  # noqa: E501

        :param site_ref: The site_ref of this Customer.  # noqa: E501
        :type: list[SiteRef]
        """

        self._site_ref = site_ref

    @property
    def customer_id(self):
        """Gets the customer_id of this Customer.  # noqa: E501

        Customer's id.  # noqa: E501

        :return: The customer_id of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Customer.

        Customer's id.  # noqa: E501

        :param customer_id: The customer_id of this Customer.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def first_name(self):
        """Gets the first_name of this Customer.  # noqa: E501

        First Name of the customer.  # noqa: E501

        :return: The first_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Customer.

        First Name of the customer.  # noqa: E501

        :param first_name: The first_name of this Customer.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Customer.  # noqa: E501

        Last Name of the customer.  # noqa: E501

        :return: The last_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Customer.

        Last Name of the customer.  # noqa: E501

        :param last_name: The last_name of this Customer.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def company_name(self):
        """Gets the company_name of this Customer.  # noqa: E501

        Name of the company to which customer belongs to.  # noqa: E501

        :return: The company_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Customer.

        Name of the company to which customer belongs to.  # noqa: E501

        :param company_name: The company_name of this Customer.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def email(self):
        """Gets the email of this Customer.  # noqa: E501

        Email address of customer.  # noqa: E501

        :return: The email of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Customer.

        Email address of customer.  # noqa: E501

        :param email: The email of this Customer.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def account_number(self):
        """Gets the account_number of this Customer.  # noqa: E501

        Account # of the Customer  # noqa: E501

        :return: The account_number of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Customer.

        Account # of the Customer  # noqa: E501

        :param account_number: The account_number of this Customer.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def contract_date(self):
        """Gets the contract_date of this Customer.  # noqa: E501

        Contract Date of the Customer  # noqa: E501

        :return: The contract_date of this Customer.  # noqa: E501
        :rtype: datetime
        """
        return self._contract_date

    @contract_date.setter
    def contract_date(self, contract_date):
        """Sets the contract_date of this Customer.

        Contract Date of the Customer  # noqa: E501

        :param contract_date: The contract_date of this Customer.  # noqa: E501
        :type: datetime
        """

        self._contract_date = contract_date

    @property
    def min_weekly_hours(self):
        """Gets the min_weekly_hours of this Customer.  # noqa: E501

        Min Weekly Hours of the Customer  # noqa: E501

        :return: The min_weekly_hours of this Customer.  # noqa: E501
        :rtype: float
        """
        return self._min_weekly_hours

    @min_weekly_hours.setter
    def min_weekly_hours(self, min_weekly_hours):
        """Sets the min_weekly_hours of this Customer.

        Min Weekly Hours of the Customer  # noqa: E501

        :param min_weekly_hours: The min_weekly_hours of this Customer.  # noqa: E501
        :type: float
        """

        self._min_weekly_hours = min_weekly_hours

    @property
    def max_weekly_hours(self):
        """Gets the max_weekly_hours of this Customer.  # noqa: E501

        Max Weekly Hours of the Customer  # noqa: E501

        :return: The max_weekly_hours of this Customer.  # noqa: E501
        :rtype: float
        """
        return self._max_weekly_hours

    @max_weekly_hours.setter
    def max_weekly_hours(self, max_weekly_hours):
        """Sets the max_weekly_hours of this Customer.

        Max Weekly Hours of the Customer  # noqa: E501

        :param max_weekly_hours: The max_weekly_hours of this Customer.  # noqa: E501
        :type: float
        """

        self._max_weekly_hours = max_weekly_hours

    @property
    def total_hours(self):
        """Gets the total_hours of this Customer.  # noqa: E501

        Total Hours of the Customer  # noqa: E501

        :return: The total_hours of this Customer.  # noqa: E501
        :rtype: float
        """
        return self._total_hours

    @total_hours.setter
    def total_hours(self, total_hours):
        """Sets the total_hours of this Customer.

        Total Hours of the Customer  # noqa: E501

        :param total_hours: The total_hours of this Customer.  # noqa: E501
        :type: float
        """

        self._total_hours = total_hours

    @property
    def phone(self):
        """Gets the phone of this Customer.  # noqa: E501

        Phone number of customer.  # noqa: E501

        :return: The phone of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Customer.

        Phone number of customer.  # noqa: E501

        :param phone: The phone of this Customer.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def mobile(self):
        """Gets the mobile of this Customer.  # noqa: E501

        Mobile number of customer.  # noqa: E501

        :return: The mobile of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Customer.

        Mobile number of customer.  # noqa: E501

        :param mobile: The mobile of this Customer.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def notes(self):
        """Gets the notes of this Customer.  # noqa: E501

        Notes.  # noqa: E501

        :return: The notes of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Customer.

        Notes.  # noqa: E501

        :param notes: The notes of this Customer.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def billing_address(self):
        """Gets the billing_address of this Customer.  # noqa: E501


        :return: The billing_address of this Customer.  # noqa: E501
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Customer.


        :param billing_address: The billing_address of this Customer.  # noqa: E501
        :type: Address
        """

        self._billing_address = billing_address

    @property
    def shipping_address(self):
        """Gets the shipping_address of this Customer.  # noqa: E501


        :return: The shipping_address of this Customer.  # noqa: E501
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this Customer.


        :param shipping_address: The shipping_address of this Customer.  # noqa: E501
        :type: Address
        """

        self._shipping_address = shipping_address

    @property
    def shipping_address_same_as_billing(self):
        """Gets the shipping_address_same_as_billing of this Customer.  # noqa: E501

        If customer wants to have same address for Billing as well as Shipping.  # noqa: E501

        :return: The shipping_address_same_as_billing of this Customer.  # noqa: E501
        :rtype: bool
        """
        return self._shipping_address_same_as_billing

    @shipping_address_same_as_billing.setter
    def shipping_address_same_as_billing(self, shipping_address_same_as_billing):
        """Sets the shipping_address_same_as_billing of this Customer.

        If customer wants to have same address for Billing as well as Shipping.  # noqa: E501

        :param shipping_address_same_as_billing: The shipping_address_same_as_billing of this Customer.  # noqa: E501
        :type: bool
        """

        self._shipping_address_same_as_billing = shipping_address_same_as_billing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Customer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Customer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
