# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StaffRef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'rate': 'float',
        'actual_time': 'str',
        'active_weekly_hours': 'float',
        'total_active_hours': 'float',
        'tool_time': 'str',
        'week_num': 'str',
        'work_order_resource_weekly_active_hours': 'list[WorkOrderResourceActiveHoursWeeklyModel]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'rate': 'Rate',
        'actual_time': 'ActualTime',
        'active_weekly_hours': 'ActiveWeeklyHours',
        'total_active_hours': 'TotalActiveHours',
        'tool_time': 'ToolTime',
        'week_num': 'WeekNum',
        'work_order_resource_weekly_active_hours': 'WorkOrderResourceWeeklyActiveHours'
    }

    def __init__(self, id=None, name=None, rate=None, actual_time=None, active_weekly_hours=None, total_active_hours=None, tool_time=None, week_num=None, work_order_resource_weekly_active_hours=None):  # noqa: E501
        """StaffRef - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._rate = None
        self._actual_time = None
        self._active_weekly_hours = None
        self._total_active_hours = None
        self._tool_time = None
        self._week_num = None
        self._work_order_resource_weekly_active_hours = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if rate is not None:
            self.rate = rate
        if actual_time is not None:
            self.actual_time = actual_time
        if active_weekly_hours is not None:
            self.active_weekly_hours = active_weekly_hours
        if total_active_hours is not None:
            self.total_active_hours = total_active_hours
        if tool_time is not None:
            self.tool_time = tool_time
        if week_num is not None:
            self.week_num = week_num
        if work_order_resource_weekly_active_hours is not None:
            self.work_order_resource_weekly_active_hours = work_order_resource_weekly_active_hours

    @property
    def id(self):
        """Gets the id of this StaffRef.  # noqa: E501


        :return: The id of this StaffRef.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StaffRef.


        :param id: The id of this StaffRef.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this StaffRef.  # noqa: E501


        :return: The name of this StaffRef.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StaffRef.


        :param name: The name of this StaffRef.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rate(self):
        """Gets the rate of this StaffRef.  # noqa: E501


        :return: The rate of this StaffRef.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this StaffRef.


        :param rate: The rate of this StaffRef.  # noqa: E501
        :type: float
        """

        self._rate = rate

    @property
    def actual_time(self):
        """Gets the actual_time of this StaffRef.  # noqa: E501


        :return: The actual_time of this StaffRef.  # noqa: E501
        :rtype: str
        """
        return self._actual_time

    @actual_time.setter
    def actual_time(self, actual_time):
        """Sets the actual_time of this StaffRef.


        :param actual_time: The actual_time of this StaffRef.  # noqa: E501
        :type: str
        """

        self._actual_time = actual_time

    @property
    def active_weekly_hours(self):
        """Gets the active_weekly_hours of this StaffRef.  # noqa: E501


        :return: The active_weekly_hours of this StaffRef.  # noqa: E501
        :rtype: float
        """
        return self._active_weekly_hours

    @active_weekly_hours.setter
    def active_weekly_hours(self, active_weekly_hours):
        """Sets the active_weekly_hours of this StaffRef.


        :param active_weekly_hours: The active_weekly_hours of this StaffRef.  # noqa: E501
        :type: float
        """

        self._active_weekly_hours = active_weekly_hours

    @property
    def total_active_hours(self):
        """Gets the total_active_hours of this StaffRef.  # noqa: E501


        :return: The total_active_hours of this StaffRef.  # noqa: E501
        :rtype: float
        """
        return self._total_active_hours

    @total_active_hours.setter
    def total_active_hours(self, total_active_hours):
        """Sets the total_active_hours of this StaffRef.


        :param total_active_hours: The total_active_hours of this StaffRef.  # noqa: E501
        :type: float
        """

        self._total_active_hours = total_active_hours

    @property
    def tool_time(self):
        """Gets the tool_time of this StaffRef.  # noqa: E501


        :return: The tool_time of this StaffRef.  # noqa: E501
        :rtype: str
        """
        return self._tool_time

    @tool_time.setter
    def tool_time(self, tool_time):
        """Sets the tool_time of this StaffRef.


        :param tool_time: The tool_time of this StaffRef.  # noqa: E501
        :type: str
        """

        self._tool_time = tool_time

    @property
    def week_num(self):
        """Gets the week_num of this StaffRef.  # noqa: E501


        :return: The week_num of this StaffRef.  # noqa: E501
        :rtype: str
        """
        return self._week_num

    @week_num.setter
    def week_num(self, week_num):
        """Sets the week_num of this StaffRef.


        :param week_num: The week_num of this StaffRef.  # noqa: E501
        :type: str
        """

        self._week_num = week_num

    @property
    def work_order_resource_weekly_active_hours(self):
        """Gets the work_order_resource_weekly_active_hours of this StaffRef.  # noqa: E501


        :return: The work_order_resource_weekly_active_hours of this StaffRef.  # noqa: E501
        :rtype: list[WorkOrderResourceActiveHoursWeeklyModel]
        """
        return self._work_order_resource_weekly_active_hours

    @work_order_resource_weekly_active_hours.setter
    def work_order_resource_weekly_active_hours(self, work_order_resource_weekly_active_hours):
        """Sets the work_order_resource_weekly_active_hours of this StaffRef.


        :param work_order_resource_weekly_active_hours: The work_order_resource_weekly_active_hours of this StaffRef.  # noqa: E501
        :type: list[WorkOrderResourceActiveHoursWeeklyModel]
        """

        self._work_order_resource_weekly_active_hours = work_order_resource_weekly_active_hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StaffRef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StaffRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
