# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BuildingUpdateModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_id': 'int',
        'building_id': 'int',
        'name': 'str',
        'account_number': 'str',
        'description': 'str',
        'building_group_id': 'int',
        'building_address': 'Address',
        'locations_id': 'list[int]',
        'archived': 'bool'
    }

    attribute_map = {
        'site_id': 'SiteId',
        'building_id': 'BuildingId',
        'name': 'Name',
        'account_number': 'AccountNumber',
        'description': 'Description',
        'building_group_id': 'BuildingGroupId',
        'building_address': 'BuildingAddress',
        'locations_id': 'LocationsId',
        'archived': 'Archived'
    }

    def __init__(self, site_id=None, building_id=None, name=None, account_number=None, description=None, building_group_id=None, building_address=None, locations_id=None, archived=None):  # noqa: E501
        """BuildingUpdateModel - a model defined in Swagger"""  # noqa: E501
        self._site_id = None
        self._building_id = None
        self._name = None
        self._account_number = None
        self._description = None
        self._building_group_id = None
        self._building_address = None
        self._locations_id = None
        self._archived = None
        self.discriminator = None
        self.site_id = site_id
        self.building_id = building_id
        self.name = name
        if account_number is not None:
            self.account_number = account_number
        if description is not None:
            self.description = description
        if building_group_id is not None:
            self.building_group_id = building_group_id
        if building_address is not None:
            self.building_address = building_address
        if locations_id is not None:
            self.locations_id = locations_id
        if archived is not None:
            self.archived = archived

    @property
    def site_id(self):
        """Gets the site_id of this BuildingUpdateModel.  # noqa: E501

        Site Id of the Building. Site Id can be found in your Maxpanda Site Index or Site API  # noqa: E501

        :return: The site_id of this BuildingUpdateModel.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this BuildingUpdateModel.

        Site Id of the Building. Site Id can be found in your Maxpanda Site Index or Site API  # noqa: E501

        :param site_id: The site_id of this BuildingUpdateModel.  # noqa: E501
        :type: int
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")  # noqa: E501

        self._site_id = site_id

    @property
    def building_id(self):
        """Gets the building_id of this BuildingUpdateModel.  # noqa: E501

        Id of the Building. Site Id can be found in your Maxpanda Site Index or Site API  # noqa: E501

        :return: The building_id of this BuildingUpdateModel.  # noqa: E501
        :rtype: int
        """
        return self._building_id

    @building_id.setter
    def building_id(self, building_id):
        """Sets the building_id of this BuildingUpdateModel.

        Id of the Building. Site Id can be found in your Maxpanda Site Index or Site API  # noqa: E501

        :param building_id: The building_id of this BuildingUpdateModel.  # noqa: E501
        :type: int
        """
        if building_id is None:
            raise ValueError("Invalid value for `building_id`, must not be `None`")  # noqa: E501

        self._building_id = building_id

    @property
    def name(self):
        """Gets the name of this BuildingUpdateModel.  # noqa: E501

        Name of the Building  # noqa: E501

        :return: The name of this BuildingUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BuildingUpdateModel.

        Name of the Building  # noqa: E501

        :param name: The name of this BuildingUpdateModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def account_number(self):
        """Gets the account_number of this BuildingUpdateModel.  # noqa: E501

        Account Number about the Building  # noqa: E501

        :return: The account_number of this BuildingUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BuildingUpdateModel.

        Account Number about the Building  # noqa: E501

        :param account_number: The account_number of this BuildingUpdateModel.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def description(self):
        """Gets the description of this BuildingUpdateModel.  # noqa: E501

        Description about the Building  # noqa: E501

        :return: The description of this BuildingUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BuildingUpdateModel.

        Description about the Building  # noqa: E501

        :param description: The description of this BuildingUpdateModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def building_group_id(self):
        """Gets the building_group_id of this BuildingUpdateModel.  # noqa: E501

        Building group of the Building. Building Group Id can be found in your Maxpanda company Building Group or Department Api  # noqa: E501

        :return: The building_group_id of this BuildingUpdateModel.  # noqa: E501
        :rtype: int
        """
        return self._building_group_id

    @building_group_id.setter
    def building_group_id(self, building_group_id):
        """Sets the building_group_id of this BuildingUpdateModel.

        Building group of the Building. Building Group Id can be found in your Maxpanda company Building Group or Department Api  # noqa: E501

        :param building_group_id: The building_group_id of this BuildingUpdateModel.  # noqa: E501
        :type: int
        """

        self._building_group_id = building_group_id

    @property
    def building_address(self):
        """Gets the building_address of this BuildingUpdateModel.  # noqa: E501


        :return: The building_address of this BuildingUpdateModel.  # noqa: E501
        :rtype: Address
        """
        return self._building_address

    @building_address.setter
    def building_address(self, building_address):
        """Sets the building_address of this BuildingUpdateModel.


        :param building_address: The building_address of this BuildingUpdateModel.  # noqa: E501
        :type: Address
        """

        self._building_address = building_address

    @property
    def locations_id(self):
        """Gets the locations_id of this BuildingUpdateModel.  # noqa: E501

        Locations of the Building. Location Id can be found in your Maxpanda Location index or Location Api  # noqa: E501

        :return: The locations_id of this BuildingUpdateModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._locations_id

    @locations_id.setter
    def locations_id(self, locations_id):
        """Sets the locations_id of this BuildingUpdateModel.

        Locations of the Building. Location Id can be found in your Maxpanda Location index or Location Api  # noqa: E501

        :param locations_id: The locations_id of this BuildingUpdateModel.  # noqa: E501
        :type: list[int]
        """

        self._locations_id = locations_id

    @property
    def archived(self):
        """Gets the archived of this BuildingUpdateModel.  # noqa: E501


        :return: The archived of this BuildingUpdateModel.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this BuildingUpdateModel.


        :param archived: The archived of this BuildingUpdateModel.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BuildingUpdateModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuildingUpdateModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
