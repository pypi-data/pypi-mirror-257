# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateBinModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'bin_number': 'str',
        'sites': 'list[int]',
        'building_id': 'int',
        'location_id': 'int',
        'notes': 'str',
        'description': 'str',
        'send_reorder_email': 'bool'
    }

    attribute_map = {
        'name': 'Name',
        'bin_number': 'BinNumber',
        'sites': 'Sites',
        'building_id': 'BuildingId',
        'location_id': 'LocationId',
        'notes': 'Notes',
        'description': 'Description',
        'send_reorder_email': 'SendReorderEmail'
    }

    def __init__(self, name=None, bin_number=None, sites=None, building_id=None, location_id=None, notes=None, description=None, send_reorder_email=None):  # noqa: E501
        """CreateBinModel - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._bin_number = None
        self._sites = None
        self._building_id = None
        self._location_id = None
        self._notes = None
        self._description = None
        self._send_reorder_email = None
        self.discriminator = None
        self.name = name
        if bin_number is not None:
            self.bin_number = bin_number
        self.sites = sites
        if building_id is not None:
            self.building_id = building_id
        if location_id is not None:
            self.location_id = location_id
        if notes is not None:
            self.notes = notes
        if description is not None:
            self.description = description
        if send_reorder_email is not None:
            self.send_reorder_email = send_reorder_email

    @property
    def name(self):
        """Gets the name of this CreateBinModel.  # noqa: E501

        Name of the Bin  # noqa: E501

        :return: The name of this CreateBinModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateBinModel.

        Name of the Bin  # noqa: E501

        :param name: The name of this CreateBinModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def bin_number(self):
        """Gets the bin_number of this CreateBinModel.  # noqa: E501

        Number associated with Bin  # noqa: E501

        :return: The bin_number of this CreateBinModel.  # noqa: E501
        :rtype: str
        """
        return self._bin_number

    @bin_number.setter
    def bin_number(self, bin_number):
        """Sets the bin_number of this CreateBinModel.

        Number associated with Bin  # noqa: E501

        :param bin_number: The bin_number of this CreateBinModel.  # noqa: E501
        :type: str
        """

        self._bin_number = bin_number

    @property
    def sites(self):
        """Gets the sites of this CreateBinModel.  # noqa: E501

        Site Id of the Bin. Site Id can be found in your Maxpanda Site Index or Site API  # noqa: E501

        :return: The sites of this CreateBinModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this CreateBinModel.

        Site Id of the Bin. Site Id can be found in your Maxpanda Site Index or Site API  # noqa: E501

        :param sites: The sites of this CreateBinModel.  # noqa: E501
        :type: list[int]
        """
        if sites is None:
            raise ValueError("Invalid value for `sites`, must not be `None`")  # noqa: E501

        self._sites = sites

    @property
    def building_id(self):
        """Gets the building_id of this CreateBinModel.  # noqa: E501

        Building of the Bin. Building Id can be found in your Maxpanda Building index or Building Api  # noqa: E501

        :return: The building_id of this CreateBinModel.  # noqa: E501
        :rtype: int
        """
        return self._building_id

    @building_id.setter
    def building_id(self, building_id):
        """Sets the building_id of this CreateBinModel.

        Building of the Bin. Building Id can be found in your Maxpanda Building index or Building Api  # noqa: E501

        :param building_id: The building_id of this CreateBinModel.  # noqa: E501
        :type: int
        """

        self._building_id = building_id

    @property
    def location_id(self):
        """Gets the location_id of this CreateBinModel.  # noqa: E501

        Location of the Bin. Location Id can be found in your Maxpanda Location index or Location Api  # noqa: E501

        :return: The location_id of this CreateBinModel.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this CreateBinModel.

        Location of the Bin. Location Id can be found in your Maxpanda Location index or Location Api  # noqa: E501

        :param location_id: The location_id of this CreateBinModel.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def notes(self):
        """Gets the notes of this CreateBinModel.  # noqa: E501

        Notes of the Asset  # noqa: E501

        :return: The notes of this CreateBinModel.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateBinModel.

        Notes of the Asset  # noqa: E501

        :param notes: The notes of this CreateBinModel.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def description(self):
        """Gets the description of this CreateBinModel.  # noqa: E501

        Description of Asset.  # noqa: E501

        :return: The description of this CreateBinModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateBinModel.

        Description of Asset.  # noqa: E501

        :param description: The description of this CreateBinModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def send_reorder_email(self):
        """Gets the send_reorder_email of this CreateBinModel.  # noqa: E501

        Send Email for Reorder  # noqa: E501

        :return: The send_reorder_email of this CreateBinModel.  # noqa: E501
        :rtype: bool
        """
        return self._send_reorder_email

    @send_reorder_email.setter
    def send_reorder_email(self, send_reorder_email):
        """Sets the send_reorder_email of this CreateBinModel.

        Send Email for Reorder  # noqa: E501

        :param send_reorder_email: The send_reorder_email of this CreateBinModel.  # noqa: E501
        :type: bool
        """

        self._send_reorder_email = send_reorder_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBinModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBinModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
