# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateVendorModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'vendor_id': 'int',
        'phone': 'str',
        'email': 'str',
        'sites_id': 'list[int]',
        'notes': 'str',
        'contract_start_date': 'datetime',
        'contract_end_date': 'datetime',
        'address': 'Address'
    }

    attribute_map = {
        'name': 'Name',
        'vendor_id': 'VendorId',
        'phone': 'Phone',
        'email': 'Email',
        'sites_id': 'SitesId',
        'notes': 'Notes',
        'contract_start_date': 'ContractStartDate',
        'contract_end_date': 'ContractEndDate',
        'address': 'Address'
    }

    def __init__(self, name=None, vendor_id=None, phone=None, email=None, sites_id=None, notes=None, contract_start_date=None, contract_end_date=None, address=None):  # noqa: E501
        """UpdateVendorModel - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._vendor_id = None
        self._phone = None
        self._email = None
        self._sites_id = None
        self._notes = None
        self._contract_start_date = None
        self._contract_end_date = None
        self._address = None
        self.discriminator = None
        self.name = name
        self.vendor_id = vendor_id
        if phone is not None:
            self.phone = phone
        self.email = email
        self.sites_id = sites_id
        if notes is not None:
            self.notes = notes
        if contract_start_date is not None:
            self.contract_start_date = contract_start_date
        if contract_end_date is not None:
            self.contract_end_date = contract_end_date
        if address is not None:
            self.address = address

    @property
    def name(self):
        """Gets the name of this UpdateVendorModel.  # noqa: E501

        Name of the Vendor  # noqa: E501

        :return: The name of this UpdateVendorModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateVendorModel.

        Name of the Vendor  # noqa: E501

        :param name: The name of this UpdateVendorModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def vendor_id(self):
        """Gets the vendor_id of this UpdateVendorModel.  # noqa: E501

        Id of the Vendor. Vendor Id can be found in Maxpanda Vendor Index or Vendor API  # noqa: E501

        :return: The vendor_id of this UpdateVendorModel.  # noqa: E501
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this UpdateVendorModel.

        Id of the Vendor. Vendor Id can be found in Maxpanda Vendor Index or Vendor API  # noqa: E501

        :param vendor_id: The vendor_id of this UpdateVendorModel.  # noqa: E501
        :type: int
        """
        if vendor_id is None:
            raise ValueError("Invalid value for `vendor_id`, must not be `None`")  # noqa: E501

        self._vendor_id = vendor_id

    @property
    def phone(self):
        """Gets the phone of this UpdateVendorModel.  # noqa: E501

        Phone Number of Vendor  # noqa: E501

        :return: The phone of this UpdateVendorModel.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UpdateVendorModel.

        Phone Number of Vendor  # noqa: E501

        :param phone: The phone of this UpdateVendorModel.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def email(self):
        """Gets the email of this UpdateVendorModel.  # noqa: E501

        Email address of Vendor  # noqa: E501

        :return: The email of this UpdateVendorModel.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UpdateVendorModel.

        Email address of Vendor  # noqa: E501

        :param email: The email of this UpdateVendorModel.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def sites_id(self):
        """Gets the sites_id of this UpdateVendorModel.  # noqa: E501

        Site Ids of Vendor. Site Id can be found in Maxpanda Site Index or Sites API  # noqa: E501

        :return: The sites_id of this UpdateVendorModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._sites_id

    @sites_id.setter
    def sites_id(self, sites_id):
        """Sets the sites_id of this UpdateVendorModel.

        Site Ids of Vendor. Site Id can be found in Maxpanda Site Index or Sites API  # noqa: E501

        :param sites_id: The sites_id of this UpdateVendorModel.  # noqa: E501
        :type: list[int]
        """
        if sites_id is None:
            raise ValueError("Invalid value for `sites_id`, must not be `None`")  # noqa: E501

        self._sites_id = sites_id

    @property
    def notes(self):
        """Gets the notes of this UpdateVendorModel.  # noqa: E501

        Notes about Vendor  # noqa: E501

        :return: The notes of this UpdateVendorModel.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UpdateVendorModel.

        Notes about Vendor  # noqa: E501

        :param notes: The notes of this UpdateVendorModel.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def contract_start_date(self):
        """Gets the contract_start_date of this UpdateVendorModel.  # noqa: E501

        Date when Vendors Contract was Started  # noqa: E501

        :return: The contract_start_date of this UpdateVendorModel.  # noqa: E501
        :rtype: datetime
        """
        return self._contract_start_date

    @contract_start_date.setter
    def contract_start_date(self, contract_start_date):
        """Sets the contract_start_date of this UpdateVendorModel.

        Date when Vendors Contract was Started  # noqa: E501

        :param contract_start_date: The contract_start_date of this UpdateVendorModel.  # noqa: E501
        :type: datetime
        """

        self._contract_start_date = contract_start_date

    @property
    def contract_end_date(self):
        """Gets the contract_end_date of this UpdateVendorModel.  # noqa: E501

        Date when Vendors Contract will End  # noqa: E501

        :return: The contract_end_date of this UpdateVendorModel.  # noqa: E501
        :rtype: datetime
        """
        return self._contract_end_date

    @contract_end_date.setter
    def contract_end_date(self, contract_end_date):
        """Sets the contract_end_date of this UpdateVendorModel.

        Date when Vendors Contract will End  # noqa: E501

        :param contract_end_date: The contract_end_date of this UpdateVendorModel.  # noqa: E501
        :type: datetime
        """

        self._contract_end_date = contract_end_date

    @property
    def address(self):
        """Gets the address of this UpdateVendorModel.  # noqa: E501


        :return: The address of this UpdateVendorModel.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UpdateVendorModel.


        :param address: The address of this UpdateVendorModel.  # noqa: E501
        :type: Address
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateVendorModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateVendorModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
