# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PurchaseOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_ref': 'SiteRef',
        'title': 'str',
        'purchase_order_id': 'int',
        'vendor_ref': 'VendorRef',
        'status_ref': 'POStatusRef',
        'account': 'str',
        'shipping_address': 'POAddress',
        'request_approver_ref': 'list[UserRef]',
        'created_by_user_ref': 'UserRef',
        'updated_by_user_ref': 'UserRef',
        'created_on': 'datetime',
        'ordered': 'datetime',
        'received': 'datetime',
        'all_item_paid': 'str',
        'vendor_confirmed': 'str',
        'notes': 'str',
        'private_notes': 'str',
        'comment': 'str',
        'purchase_order_item_ref': 'list[PurchaseOrderItemDetails]'
    }

    attribute_map = {
        'site_ref': 'SiteRef',
        'title': 'Title',
        'purchase_order_id': 'PurchaseOrderId',
        'vendor_ref': 'VendorRef',
        'status_ref': 'StatusRef',
        'account': 'Account',
        'shipping_address': 'ShippingAddress',
        'request_approver_ref': 'RequestApproverRef',
        'created_by_user_ref': 'CreatedByUserRef',
        'updated_by_user_ref': 'UpdatedByUserRef',
        'created_on': 'CreatedOn',
        'ordered': 'Ordered',
        'received': 'Received',
        'all_item_paid': 'AllItemPaid',
        'vendor_confirmed': 'VendorConfirmed',
        'notes': 'Notes',
        'private_notes': 'PrivateNotes',
        'comment': 'Comment',
        'purchase_order_item_ref': 'PurchaseOrderItemRef'
    }

    def __init__(self, site_ref=None, title=None, purchase_order_id=None, vendor_ref=None, status_ref=None, account=None, shipping_address=None, request_approver_ref=None, created_by_user_ref=None, updated_by_user_ref=None, created_on=None, ordered=None, received=None, all_item_paid=None, vendor_confirmed=None, notes=None, private_notes=None, comment=None, purchase_order_item_ref=None):  # noqa: E501
        """PurchaseOrder - a model defined in Swagger"""  # noqa: E501
        self._site_ref = None
        self._title = None
        self._purchase_order_id = None
        self._vendor_ref = None
        self._status_ref = None
        self._account = None
        self._shipping_address = None
        self._request_approver_ref = None
        self._created_by_user_ref = None
        self._updated_by_user_ref = None
        self._created_on = None
        self._ordered = None
        self._received = None
        self._all_item_paid = None
        self._vendor_confirmed = None
        self._notes = None
        self._private_notes = None
        self._comment = None
        self._purchase_order_item_ref = None
        self.discriminator = None
        if site_ref is not None:
            self.site_ref = site_ref
        if title is not None:
            self.title = title
        if purchase_order_id is not None:
            self.purchase_order_id = purchase_order_id
        if vendor_ref is not None:
            self.vendor_ref = vendor_ref
        if status_ref is not None:
            self.status_ref = status_ref
        if account is not None:
            self.account = account
        if shipping_address is not None:
            self.shipping_address = shipping_address
        if request_approver_ref is not None:
            self.request_approver_ref = request_approver_ref
        if created_by_user_ref is not None:
            self.created_by_user_ref = created_by_user_ref
        if updated_by_user_ref is not None:
            self.updated_by_user_ref = updated_by_user_ref
        if created_on is not None:
            self.created_on = created_on
        if ordered is not None:
            self.ordered = ordered
        if received is not None:
            self.received = received
        if all_item_paid is not None:
            self.all_item_paid = all_item_paid
        if vendor_confirmed is not None:
            self.vendor_confirmed = vendor_confirmed
        if notes is not None:
            self.notes = notes
        if private_notes is not None:
            self.private_notes = private_notes
        if comment is not None:
            self.comment = comment
        if purchase_order_item_ref is not None:
            self.purchase_order_item_ref = purchase_order_item_ref

    @property
    def site_ref(self):
        """Gets the site_ref of this PurchaseOrder.  # noqa: E501


        :return: The site_ref of this PurchaseOrder.  # noqa: E501
        :rtype: SiteRef
        """
        return self._site_ref

    @site_ref.setter
    def site_ref(self, site_ref):
        """Sets the site_ref of this PurchaseOrder.


        :param site_ref: The site_ref of this PurchaseOrder.  # noqa: E501
        :type: SiteRef
        """

        self._site_ref = site_ref

    @property
    def title(self):
        """Gets the title of this PurchaseOrder.  # noqa: E501


        :return: The title of this PurchaseOrder.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PurchaseOrder.


        :param title: The title of this PurchaseOrder.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def purchase_order_id(self):
        """Gets the purchase_order_id of this PurchaseOrder.  # noqa: E501


        :return: The purchase_order_id of this PurchaseOrder.  # noqa: E501
        :rtype: int
        """
        return self._purchase_order_id

    @purchase_order_id.setter
    def purchase_order_id(self, purchase_order_id):
        """Sets the purchase_order_id of this PurchaseOrder.


        :param purchase_order_id: The purchase_order_id of this PurchaseOrder.  # noqa: E501
        :type: int
        """

        self._purchase_order_id = purchase_order_id

    @property
    def vendor_ref(self):
        """Gets the vendor_ref of this PurchaseOrder.  # noqa: E501


        :return: The vendor_ref of this PurchaseOrder.  # noqa: E501
        :rtype: VendorRef
        """
        return self._vendor_ref

    @vendor_ref.setter
    def vendor_ref(self, vendor_ref):
        """Sets the vendor_ref of this PurchaseOrder.


        :param vendor_ref: The vendor_ref of this PurchaseOrder.  # noqa: E501
        :type: VendorRef
        """

        self._vendor_ref = vendor_ref

    @property
    def status_ref(self):
        """Gets the status_ref of this PurchaseOrder.  # noqa: E501


        :return: The status_ref of this PurchaseOrder.  # noqa: E501
        :rtype: POStatusRef
        """
        return self._status_ref

    @status_ref.setter
    def status_ref(self, status_ref):
        """Sets the status_ref of this PurchaseOrder.


        :param status_ref: The status_ref of this PurchaseOrder.  # noqa: E501
        :type: POStatusRef
        """

        self._status_ref = status_ref

    @property
    def account(self):
        """Gets the account of this PurchaseOrder.  # noqa: E501


        :return: The account of this PurchaseOrder.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this PurchaseOrder.


        :param account: The account of this PurchaseOrder.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def shipping_address(self):
        """Gets the shipping_address of this PurchaseOrder.  # noqa: E501


        :return: The shipping_address of this PurchaseOrder.  # noqa: E501
        :rtype: POAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this PurchaseOrder.


        :param shipping_address: The shipping_address of this PurchaseOrder.  # noqa: E501
        :type: POAddress
        """

        self._shipping_address = shipping_address

    @property
    def request_approver_ref(self):
        """Gets the request_approver_ref of this PurchaseOrder.  # noqa: E501


        :return: The request_approver_ref of this PurchaseOrder.  # noqa: E501
        :rtype: list[UserRef]
        """
        return self._request_approver_ref

    @request_approver_ref.setter
    def request_approver_ref(self, request_approver_ref):
        """Sets the request_approver_ref of this PurchaseOrder.


        :param request_approver_ref: The request_approver_ref of this PurchaseOrder.  # noqa: E501
        :type: list[UserRef]
        """

        self._request_approver_ref = request_approver_ref

    @property
    def created_by_user_ref(self):
        """Gets the created_by_user_ref of this PurchaseOrder.  # noqa: E501


        :return: The created_by_user_ref of this PurchaseOrder.  # noqa: E501
        :rtype: UserRef
        """
        return self._created_by_user_ref

    @created_by_user_ref.setter
    def created_by_user_ref(self, created_by_user_ref):
        """Sets the created_by_user_ref of this PurchaseOrder.


        :param created_by_user_ref: The created_by_user_ref of this PurchaseOrder.  # noqa: E501
        :type: UserRef
        """

        self._created_by_user_ref = created_by_user_ref

    @property
    def updated_by_user_ref(self):
        """Gets the updated_by_user_ref of this PurchaseOrder.  # noqa: E501


        :return: The updated_by_user_ref of this PurchaseOrder.  # noqa: E501
        :rtype: UserRef
        """
        return self._updated_by_user_ref

    @updated_by_user_ref.setter
    def updated_by_user_ref(self, updated_by_user_ref):
        """Sets the updated_by_user_ref of this PurchaseOrder.


        :param updated_by_user_ref: The updated_by_user_ref of this PurchaseOrder.  # noqa: E501
        :type: UserRef
        """

        self._updated_by_user_ref = updated_by_user_ref

    @property
    def created_on(self):
        """Gets the created_on of this PurchaseOrder.  # noqa: E501


        :return: The created_on of this PurchaseOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this PurchaseOrder.


        :param created_on: The created_on of this PurchaseOrder.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def ordered(self):
        """Gets the ordered of this PurchaseOrder.  # noqa: E501


        :return: The ordered of this PurchaseOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._ordered

    @ordered.setter
    def ordered(self, ordered):
        """Sets the ordered of this PurchaseOrder.


        :param ordered: The ordered of this PurchaseOrder.  # noqa: E501
        :type: datetime
        """

        self._ordered = ordered

    @property
    def received(self):
        """Gets the received of this PurchaseOrder.  # noqa: E501


        :return: The received of this PurchaseOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._received

    @received.setter
    def received(self, received):
        """Sets the received of this PurchaseOrder.


        :param received: The received of this PurchaseOrder.  # noqa: E501
        :type: datetime
        """

        self._received = received

    @property
    def all_item_paid(self):
        """Gets the all_item_paid of this PurchaseOrder.  # noqa: E501


        :return: The all_item_paid of this PurchaseOrder.  # noqa: E501
        :rtype: str
        """
        return self._all_item_paid

    @all_item_paid.setter
    def all_item_paid(self, all_item_paid):
        """Sets the all_item_paid of this PurchaseOrder.


        :param all_item_paid: The all_item_paid of this PurchaseOrder.  # noqa: E501
        :type: str
        """

        self._all_item_paid = all_item_paid

    @property
    def vendor_confirmed(self):
        """Gets the vendor_confirmed of this PurchaseOrder.  # noqa: E501


        :return: The vendor_confirmed of this PurchaseOrder.  # noqa: E501
        :rtype: str
        """
        return self._vendor_confirmed

    @vendor_confirmed.setter
    def vendor_confirmed(self, vendor_confirmed):
        """Sets the vendor_confirmed of this PurchaseOrder.


        :param vendor_confirmed: The vendor_confirmed of this PurchaseOrder.  # noqa: E501
        :type: str
        """

        self._vendor_confirmed = vendor_confirmed

    @property
    def notes(self):
        """Gets the notes of this PurchaseOrder.  # noqa: E501


        :return: The notes of this PurchaseOrder.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PurchaseOrder.


        :param notes: The notes of this PurchaseOrder.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def private_notes(self):
        """Gets the private_notes of this PurchaseOrder.  # noqa: E501


        :return: The private_notes of this PurchaseOrder.  # noqa: E501
        :rtype: str
        """
        return self._private_notes

    @private_notes.setter
    def private_notes(self, private_notes):
        """Sets the private_notes of this PurchaseOrder.


        :param private_notes: The private_notes of this PurchaseOrder.  # noqa: E501
        :type: str
        """

        self._private_notes = private_notes

    @property
    def comment(self):
        """Gets the comment of this PurchaseOrder.  # noqa: E501


        :return: The comment of this PurchaseOrder.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PurchaseOrder.


        :param comment: The comment of this PurchaseOrder.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def purchase_order_item_ref(self):
        """Gets the purchase_order_item_ref of this PurchaseOrder.  # noqa: E501


        :return: The purchase_order_item_ref of this PurchaseOrder.  # noqa: E501
        :rtype: list[PurchaseOrderItemDetails]
        """
        return self._purchase_order_item_ref

    @purchase_order_item_ref.setter
    def purchase_order_item_ref(self, purchase_order_item_ref):
        """Sets the purchase_order_item_ref of this PurchaseOrder.


        :param purchase_order_item_ref: The purchase_order_item_ref of this PurchaseOrder.  # noqa: E501
        :type: list[PurchaseOrderItemDetails]
        """

        self._purchase_order_item_ref = purchase_order_item_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchaseOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchaseOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
