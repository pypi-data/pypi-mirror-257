# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdatePartModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_id': 'int',
        'part_id': 'int',
        'part_name': 'str',
        'part_number': 'str',
        'part_status_id': 'int',
        'part_type_id': 'int',
        'part_category_id': 'int',
        'manufracturer': 'str',
        'model_name': 'str',
        'upc': 'str',
        'preferred_supplier_id': 'int',
        'oem1': 'str',
        'oem2': 'str',
        'oem3': 'str',
        'preferred_oem1_supplier_id': 'int',
        'preferred_oem2_supplier_id': 'int',
        'preferred_oem3_supplier_id': 'int',
        'supplier_info': 'str',
        'increase_qty': 'float',
        'decrease_qty': 'float',
        'part_cost': 'float',
        'sales_price': 'float',
        'minimum_level': 'float',
        'maximum_level': 'float',
        'notes': 'str',
        'installation_date': 'datetime',
        'warranty_date': 'datetime',
        'warranty_notes_labour': 'str',
        'warranty_notes_parts': 'str',
        'storage_location': 'int',
        'assigned_asset': 'list[int]',
        'bin_parts_ref': 'list[BinPartsRef]',
        'purchase_order_template_id': 'int',
        'is_frozen': 'bool',
        'customer_warranty_start_date': 'datetime',
        'customer_warranty_end_date': 'datetime'
    }

    attribute_map = {
        'site_id': 'SiteId',
        'part_id': 'PartId',
        'part_name': 'PartName',
        'part_number': 'PartNumber',
        'part_status_id': 'PartStatusId',
        'part_type_id': 'PartTypeId',
        'part_category_id': 'PartCategoryId',
        'manufracturer': 'Manufracturer',
        'model_name': 'ModelName',
        'upc': 'UPC',
        'preferred_supplier_id': 'PreferredSupplierId',
        'oem1': 'OEM1',
        'oem2': 'OEM2',
        'oem3': 'OEM3',
        'preferred_oem1_supplier_id': 'PreferredOEM1SupplierId',
        'preferred_oem2_supplier_id': 'PreferredOEM2SupplierId',
        'preferred_oem3_supplier_id': 'PreferredOEM3SupplierId',
        'supplier_info': 'SupplierInfo',
        'increase_qty': 'IncreaseQty',
        'decrease_qty': 'DecreaseQty',
        'part_cost': 'PartCost',
        'sales_price': 'SalesPrice',
        'minimum_level': 'MinimumLevel',
        'maximum_level': 'MaximumLevel',
        'notes': 'Notes',
        'installation_date': 'InstallationDate',
        'warranty_date': 'WarrantyDate',
        'warranty_notes_labour': 'WarrantyNotesLabour',
        'warranty_notes_parts': 'WarrantyNotesParts',
        'storage_location': 'StorageLocation',
        'assigned_asset': 'AssignedAsset',
        'bin_parts_ref': 'BinPartsRef',
        'purchase_order_template_id': 'PurchaseOrderTemplateId',
        'is_frozen': 'IsFrozen',
        'customer_warranty_start_date': 'CustomerWarrantyStartDate',
        'customer_warranty_end_date': 'CustomerWarrantyEndDate'
    }

    def __init__(self, site_id=None, part_id=None, part_name=None, part_number=None, part_status_id=None, part_type_id=None, part_category_id=None, manufracturer=None, model_name=None, upc=None, preferred_supplier_id=None, oem1=None, oem2=None, oem3=None, preferred_oem1_supplier_id=None, preferred_oem2_supplier_id=None, preferred_oem3_supplier_id=None, supplier_info=None, increase_qty=None, decrease_qty=None, part_cost=None, sales_price=None, minimum_level=None, maximum_level=None, notes=None, installation_date=None, warranty_date=None, warranty_notes_labour=None, warranty_notes_parts=None, storage_location=None, assigned_asset=None, bin_parts_ref=None, purchase_order_template_id=None, is_frozen=None, customer_warranty_start_date=None, customer_warranty_end_date=None):  # noqa: E501
        """UpdatePartModel - a model defined in Swagger"""  # noqa: E501
        self._site_id = None
        self._part_id = None
        self._part_name = None
        self._part_number = None
        self._part_status_id = None
        self._part_type_id = None
        self._part_category_id = None
        self._manufracturer = None
        self._model_name = None
        self._upc = None
        self._preferred_supplier_id = None
        self._oem1 = None
        self._oem2 = None
        self._oem3 = None
        self._preferred_oem1_supplier_id = None
        self._preferred_oem2_supplier_id = None
        self._preferred_oem3_supplier_id = None
        self._supplier_info = None
        self._increase_qty = None
        self._decrease_qty = None
        self._part_cost = None
        self._sales_price = None
        self._minimum_level = None
        self._maximum_level = None
        self._notes = None
        self._installation_date = None
        self._warranty_date = None
        self._warranty_notes_labour = None
        self._warranty_notes_parts = None
        self._storage_location = None
        self._assigned_asset = None
        self._bin_parts_ref = None
        self._purchase_order_template_id = None
        self._is_frozen = None
        self._customer_warranty_start_date = None
        self._customer_warranty_end_date = None
        self.discriminator = None
        self.site_id = site_id
        self.part_id = part_id
        self.part_name = part_name
        if part_number is not None:
            self.part_number = part_number
        self.part_status_id = part_status_id
        self.part_type_id = part_type_id
        if part_category_id is not None:
            self.part_category_id = part_category_id
        if manufracturer is not None:
            self.manufracturer = manufracturer
        if model_name is not None:
            self.model_name = model_name
        if upc is not None:
            self.upc = upc
        if preferred_supplier_id is not None:
            self.preferred_supplier_id = preferred_supplier_id
        if oem1 is not None:
            self.oem1 = oem1
        if oem2 is not None:
            self.oem2 = oem2
        if oem3 is not None:
            self.oem3 = oem3
        if preferred_oem1_supplier_id is not None:
            self.preferred_oem1_supplier_id = preferred_oem1_supplier_id
        if preferred_oem2_supplier_id is not None:
            self.preferred_oem2_supplier_id = preferred_oem2_supplier_id
        if preferred_oem3_supplier_id is not None:
            self.preferred_oem3_supplier_id = preferred_oem3_supplier_id
        if supplier_info is not None:
            self.supplier_info = supplier_info
        if increase_qty is not None:
            self.increase_qty = increase_qty
        if decrease_qty is not None:
            self.decrease_qty = decrease_qty
        if part_cost is not None:
            self.part_cost = part_cost
        if sales_price is not None:
            self.sales_price = sales_price
        if minimum_level is not None:
            self.minimum_level = minimum_level
        if maximum_level is not None:
            self.maximum_level = maximum_level
        if notes is not None:
            self.notes = notes
        if installation_date is not None:
            self.installation_date = installation_date
        if warranty_date is not None:
            self.warranty_date = warranty_date
        if warranty_notes_labour is not None:
            self.warranty_notes_labour = warranty_notes_labour
        if warranty_notes_parts is not None:
            self.warranty_notes_parts = warranty_notes_parts
        if storage_location is not None:
            self.storage_location = storage_location
        if assigned_asset is not None:
            self.assigned_asset = assigned_asset
        if bin_parts_ref is not None:
            self.bin_parts_ref = bin_parts_ref
        if purchase_order_template_id is not None:
            self.purchase_order_template_id = purchase_order_template_id
        if is_frozen is not None:
            self.is_frozen = is_frozen
        if customer_warranty_start_date is not None:
            self.customer_warranty_start_date = customer_warranty_start_date
        if customer_warranty_end_date is not None:
            self.customer_warranty_end_date = customer_warranty_end_date

    @property
    def site_id(self):
        """Gets the site_id of this UpdatePartModel.  # noqa: E501

        Site Id of the Part. Site Id can be found in your Maxpanda Site Index or Site API  # noqa: E501

        :return: The site_id of this UpdatePartModel.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this UpdatePartModel.

        Site Id of the Part. Site Id can be found in your Maxpanda Site Index or Site API  # noqa: E501

        :param site_id: The site_id of this UpdatePartModel.  # noqa: E501
        :type: int
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")  # noqa: E501

        self._site_id = site_id

    @property
    def part_id(self):
        """Gets the part_id of this UpdatePartModel.  # noqa: E501

        Id of the Part. Part Id can be found in your Maxpanda Inventory Part Index or Part API  # noqa: E501

        :return: The part_id of this UpdatePartModel.  # noqa: E501
        :rtype: int
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this UpdatePartModel.

        Id of the Part. Part Id can be found in your Maxpanda Inventory Part Index or Part API  # noqa: E501

        :param part_id: The part_id of this UpdatePartModel.  # noqa: E501
        :type: int
        """
        if part_id is None:
            raise ValueError("Invalid value for `part_id`, must not be `None`")  # noqa: E501

        self._part_id = part_id

    @property
    def part_name(self):
        """Gets the part_name of this UpdatePartModel.  # noqa: E501

        Name of the Part  # noqa: E501

        :return: The part_name of this UpdatePartModel.  # noqa: E501
        :rtype: str
        """
        return self._part_name

    @part_name.setter
    def part_name(self, part_name):
        """Sets the part_name of this UpdatePartModel.

        Name of the Part  # noqa: E501

        :param part_name: The part_name of this UpdatePartModel.  # noqa: E501
        :type: str
        """
        if part_name is None:
            raise ValueError("Invalid value for `part_name`, must not be `None`")  # noqa: E501

        self._part_name = part_name

    @property
    def part_number(self):
        """Gets the part_number of this UpdatePartModel.  # noqa: E501

        Number associated with Part  # noqa: E501

        :return: The part_number of this UpdatePartModel.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this UpdatePartModel.

        Number associated with Part  # noqa: E501

        :param part_number: The part_number of this UpdatePartModel.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def part_status_id(self):
        """Gets the part_status_id of this UpdatePartModel.  # noqa: E501

        Status of the Part. Part Status Id can be found in your Maxpanda Company Part Status or Part Status API  # noqa: E501

        :return: The part_status_id of this UpdatePartModel.  # noqa: E501
        :rtype: int
        """
        return self._part_status_id

    @part_status_id.setter
    def part_status_id(self, part_status_id):
        """Sets the part_status_id of this UpdatePartModel.

        Status of the Part. Part Status Id can be found in your Maxpanda Company Part Status or Part Status API  # noqa: E501

        :param part_status_id: The part_status_id of this UpdatePartModel.  # noqa: E501
        :type: int
        """
        if part_status_id is None:
            raise ValueError("Invalid value for `part_status_id`, must not be `None`")  # noqa: E501

        self._part_status_id = part_status_id

    @property
    def part_type_id(self):
        """Gets the part_type_id of this UpdatePartModel.  # noqa: E501

        Type of the Part. Part Type Id can be found in your Maxpanda Company Part Type or Part Type API  # noqa: E501

        :return: The part_type_id of this UpdatePartModel.  # noqa: E501
        :rtype: int
        """
        return self._part_type_id

    @part_type_id.setter
    def part_type_id(self, part_type_id):
        """Sets the part_type_id of this UpdatePartModel.

        Type of the Part. Part Type Id can be found in your Maxpanda Company Part Type or Part Type API  # noqa: E501

        :param part_type_id: The part_type_id of this UpdatePartModel.  # noqa: E501
        :type: int
        """
        if part_type_id is None:
            raise ValueError("Invalid value for `part_type_id`, must not be `None`")  # noqa: E501

        self._part_type_id = part_type_id

    @property
    def part_category_id(self):
        """Gets the part_category_id of this UpdatePartModel.  # noqa: E501

        Category of the Part. Part Category Id can be found in your Maxpanda Company Part Category or Part Category API  # noqa: E501

        :return: The part_category_id of this UpdatePartModel.  # noqa: E501
        :rtype: int
        """
        return self._part_category_id

    @part_category_id.setter
    def part_category_id(self, part_category_id):
        """Sets the part_category_id of this UpdatePartModel.

        Category of the Part. Part Category Id can be found in your Maxpanda Company Part Category or Part Category API  # noqa: E501

        :param part_category_id: The part_category_id of this UpdatePartModel.  # noqa: E501
        :type: int
        """

        self._part_category_id = part_category_id

    @property
    def manufracturer(self):
        """Gets the manufracturer of this UpdatePartModel.  # noqa: E501

        Part Manufracturer details  # noqa: E501

        :return: The manufracturer of this UpdatePartModel.  # noqa: E501
        :rtype: str
        """
        return self._manufracturer

    @manufracturer.setter
    def manufracturer(self, manufracturer):
        """Sets the manufracturer of this UpdatePartModel.

        Part Manufracturer details  # noqa: E501

        :param manufracturer: The manufracturer of this UpdatePartModel.  # noqa: E501
        :type: str
        """

        self._manufracturer = manufracturer

    @property
    def model_name(self):
        """Gets the model_name of this UpdatePartModel.  # noqa: E501

        Part ModelName  # noqa: E501

        :return: The model_name of this UpdatePartModel.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this UpdatePartModel.

        Part ModelName  # noqa: E501

        :param model_name: The model_name of this UpdatePartModel.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def upc(self):
        """Gets the upc of this UpdatePartModel.  # noqa: E501

        UPC details  # noqa: E501

        :return: The upc of this UpdatePartModel.  # noqa: E501
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this UpdatePartModel.

        UPC details  # noqa: E501

        :param upc: The upc of this UpdatePartModel.  # noqa: E501
        :type: str
        """

        self._upc = upc

    @property
    def preferred_supplier_id(self):
        """Gets the preferred_supplier_id of this UpdatePartModel.  # noqa: E501

        Preferred Supplier of the Part. Supplier Id can be found in your Maxpanda Vendor Index or Vendor API  # noqa: E501

        :return: The preferred_supplier_id of this UpdatePartModel.  # noqa: E501
        :rtype: int
        """
        return self._preferred_supplier_id

    @preferred_supplier_id.setter
    def preferred_supplier_id(self, preferred_supplier_id):
        """Sets the preferred_supplier_id of this UpdatePartModel.

        Preferred Supplier of the Part. Supplier Id can be found in your Maxpanda Vendor Index or Vendor API  # noqa: E501

        :param preferred_supplier_id: The preferred_supplier_id of this UpdatePartModel.  # noqa: E501
        :type: int
        """

        self._preferred_supplier_id = preferred_supplier_id

    @property
    def oem1(self):
        """Gets the oem1 of this UpdatePartModel.  # noqa: E501

        OEM 1 details  # noqa: E501

        :return: The oem1 of this UpdatePartModel.  # noqa: E501
        :rtype: str
        """
        return self._oem1

    @oem1.setter
    def oem1(self, oem1):
        """Sets the oem1 of this UpdatePartModel.

        OEM 1 details  # noqa: E501

        :param oem1: The oem1 of this UpdatePartModel.  # noqa: E501
        :type: str
        """

        self._oem1 = oem1

    @property
    def oem2(self):
        """Gets the oem2 of this UpdatePartModel.  # noqa: E501

        OEM 2 details  # noqa: E501

        :return: The oem2 of this UpdatePartModel.  # noqa: E501
        :rtype: str
        """
        return self._oem2

    @oem2.setter
    def oem2(self, oem2):
        """Sets the oem2 of this UpdatePartModel.

        OEM 2 details  # noqa: E501

        :param oem2: The oem2 of this UpdatePartModel.  # noqa: E501
        :type: str
        """

        self._oem2 = oem2

    @property
    def oem3(self):
        """Gets the oem3 of this UpdatePartModel.  # noqa: E501

        OEM 3 details  # noqa: E501

        :return: The oem3 of this UpdatePartModel.  # noqa: E501
        :rtype: str
        """
        return self._oem3

    @oem3.setter
    def oem3(self, oem3):
        """Sets the oem3 of this UpdatePartModel.

        OEM 3 details  # noqa: E501

        :param oem3: The oem3 of this UpdatePartModel.  # noqa: E501
        :type: str
        """

        self._oem3 = oem3

    @property
    def preferred_oem1_supplier_id(self):
        """Gets the preferred_oem1_supplier_id of this UpdatePartModel.  # noqa: E501

        Preferred Supplier 1 for the Part. Supplier Id can be found in your Maxpanda Vendor Index or Vendor API  # noqa: E501

        :return: The preferred_oem1_supplier_id of this UpdatePartModel.  # noqa: E501
        :rtype: int
        """
        return self._preferred_oem1_supplier_id

    @preferred_oem1_supplier_id.setter
    def preferred_oem1_supplier_id(self, preferred_oem1_supplier_id):
        """Sets the preferred_oem1_supplier_id of this UpdatePartModel.

        Preferred Supplier 1 for the Part. Supplier Id can be found in your Maxpanda Vendor Index or Vendor API  # noqa: E501

        :param preferred_oem1_supplier_id: The preferred_oem1_supplier_id of this UpdatePartModel.  # noqa: E501
        :type: int
        """

        self._preferred_oem1_supplier_id = preferred_oem1_supplier_id

    @property
    def preferred_oem2_supplier_id(self):
        """Gets the preferred_oem2_supplier_id of this UpdatePartModel.  # noqa: E501

        Preferred Supplier 2 for the Part. Supplier Id can be found in your Maxpanda Vendor Index or Vendor API  # noqa: E501

        :return: The preferred_oem2_supplier_id of this UpdatePartModel.  # noqa: E501
        :rtype: int
        """
        return self._preferred_oem2_supplier_id

    @preferred_oem2_supplier_id.setter
    def preferred_oem2_supplier_id(self, preferred_oem2_supplier_id):
        """Sets the preferred_oem2_supplier_id of this UpdatePartModel.

        Preferred Supplier 2 for the Part. Supplier Id can be found in your Maxpanda Vendor Index or Vendor API  # noqa: E501

        :param preferred_oem2_supplier_id: The preferred_oem2_supplier_id of this UpdatePartModel.  # noqa: E501
        :type: int
        """

        self._preferred_oem2_supplier_id = preferred_oem2_supplier_id

    @property
    def preferred_oem3_supplier_id(self):
        """Gets the preferred_oem3_supplier_id of this UpdatePartModel.  # noqa: E501

        Preferred Supplier for the Part. Supplier Id can be found in your Maxpanda Vendor Index or Vendor API  # noqa: E501

        :return: The preferred_oem3_supplier_id of this UpdatePartModel.  # noqa: E501
        :rtype: int
        """
        return self._preferred_oem3_supplier_id

    @preferred_oem3_supplier_id.setter
    def preferred_oem3_supplier_id(self, preferred_oem3_supplier_id):
        """Sets the preferred_oem3_supplier_id of this UpdatePartModel.

        Preferred Supplier for the Part. Supplier Id can be found in your Maxpanda Vendor Index or Vendor API  # noqa: E501

        :param preferred_oem3_supplier_id: The preferred_oem3_supplier_id of this UpdatePartModel.  # noqa: E501
        :type: int
        """

        self._preferred_oem3_supplier_id = preferred_oem3_supplier_id

    @property
    def supplier_info(self):
        """Gets the supplier_info of this UpdatePartModel.  # noqa: E501

        Information of Supplier of Part.  # noqa: E501

        :return: The supplier_info of this UpdatePartModel.  # noqa: E501
        :rtype: str
        """
        return self._supplier_info

    @supplier_info.setter
    def supplier_info(self, supplier_info):
        """Sets the supplier_info of this UpdatePartModel.

        Information of Supplier of Part.  # noqa: E501

        :param supplier_info: The supplier_info of this UpdatePartModel.  # noqa: E501
        :type: str
        """

        self._supplier_info = supplier_info

    @property
    def increase_qty(self):
        """Gets the increase_qty of this UpdatePartModel.  # noqa: E501

        Increase Quantity of Parts  # noqa: E501

        :return: The increase_qty of this UpdatePartModel.  # noqa: E501
        :rtype: float
        """
        return self._increase_qty

    @increase_qty.setter
    def increase_qty(self, increase_qty):
        """Sets the increase_qty of this UpdatePartModel.

        Increase Quantity of Parts  # noqa: E501

        :param increase_qty: The increase_qty of this UpdatePartModel.  # noqa: E501
        :type: float
        """

        self._increase_qty = increase_qty

    @property
    def decrease_qty(self):
        """Gets the decrease_qty of this UpdatePartModel.  # noqa: E501

        Descrease Quantity of Parts  # noqa: E501

        :return: The decrease_qty of this UpdatePartModel.  # noqa: E501
        :rtype: float
        """
        return self._decrease_qty

    @decrease_qty.setter
    def decrease_qty(self, decrease_qty):
        """Sets the decrease_qty of this UpdatePartModel.

        Descrease Quantity of Parts  # noqa: E501

        :param decrease_qty: The decrease_qty of this UpdatePartModel.  # noqa: E501
        :type: float
        """

        self._decrease_qty = decrease_qty

    @property
    def part_cost(self):
        """Gets the part_cost of this UpdatePartModel.  # noqa: E501

        Cost of the Part  # noqa: E501

        :return: The part_cost of this UpdatePartModel.  # noqa: E501
        :rtype: float
        """
        return self._part_cost

    @part_cost.setter
    def part_cost(self, part_cost):
        """Sets the part_cost of this UpdatePartModel.

        Cost of the Part  # noqa: E501

        :param part_cost: The part_cost of this UpdatePartModel.  # noqa: E501
        :type: float
        """

        self._part_cost = part_cost

    @property
    def sales_price(self):
        """Gets the sales_price of this UpdatePartModel.  # noqa: E501

        Minimum number of Parts  # noqa: E501

        :return: The sales_price of this UpdatePartModel.  # noqa: E501
        :rtype: float
        """
        return self._sales_price

    @sales_price.setter
    def sales_price(self, sales_price):
        """Sets the sales_price of this UpdatePartModel.

        Minimum number of Parts  # noqa: E501

        :param sales_price: The sales_price of this UpdatePartModel.  # noqa: E501
        :type: float
        """

        self._sales_price = sales_price

    @property
    def minimum_level(self):
        """Gets the minimum_level of this UpdatePartModel.  # noqa: E501

        Minimum number of Parts  # noqa: E501

        :return: The minimum_level of this UpdatePartModel.  # noqa: E501
        :rtype: float
        """
        return self._minimum_level

    @minimum_level.setter
    def minimum_level(self, minimum_level):
        """Sets the minimum_level of this UpdatePartModel.

        Minimum number of Parts  # noqa: E501

        :param minimum_level: The minimum_level of this UpdatePartModel.  # noqa: E501
        :type: float
        """

        self._minimum_level = minimum_level

    @property
    def maximum_level(self):
        """Gets the maximum_level of this UpdatePartModel.  # noqa: E501

        Maximum number of Parts  # noqa: E501

        :return: The maximum_level of this UpdatePartModel.  # noqa: E501
        :rtype: float
        """
        return self._maximum_level

    @maximum_level.setter
    def maximum_level(self, maximum_level):
        """Sets the maximum_level of this UpdatePartModel.

        Maximum number of Parts  # noqa: E501

        :param maximum_level: The maximum_level of this UpdatePartModel.  # noqa: E501
        :type: float
        """

        self._maximum_level = maximum_level

    @property
    def notes(self):
        """Gets the notes of this UpdatePartModel.  # noqa: E501

        Notes about Part  # noqa: E501

        :return: The notes of this UpdatePartModel.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UpdatePartModel.

        Notes about Part  # noqa: E501

        :param notes: The notes of this UpdatePartModel.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def installation_date(self):
        """Gets the installation_date of this UpdatePartModel.  # noqa: E501

        Date of Installation of Part  # noqa: E501

        :return: The installation_date of this UpdatePartModel.  # noqa: E501
        :rtype: datetime
        """
        return self._installation_date

    @installation_date.setter
    def installation_date(self, installation_date):
        """Sets the installation_date of this UpdatePartModel.

        Date of Installation of Part  # noqa: E501

        :param installation_date: The installation_date of this UpdatePartModel.  # noqa: E501
        :type: datetime
        """

        self._installation_date = installation_date

    @property
    def warranty_date(self):
        """Gets the warranty_date of this UpdatePartModel.  # noqa: E501

        Warranty Date of Part  # noqa: E501

        :return: The warranty_date of this UpdatePartModel.  # noqa: E501
        :rtype: datetime
        """
        return self._warranty_date

    @warranty_date.setter
    def warranty_date(self, warranty_date):
        """Sets the warranty_date of this UpdatePartModel.

        Warranty Date of Part  # noqa: E501

        :param warranty_date: The warranty_date of this UpdatePartModel.  # noqa: E501
        :type: datetime
        """

        self._warranty_date = warranty_date

    @property
    def warranty_notes_labour(self):
        """Gets the warranty_notes_labour of this UpdatePartModel.  # noqa: E501

        Warranty Notes for Labour  # noqa: E501

        :return: The warranty_notes_labour of this UpdatePartModel.  # noqa: E501
        :rtype: str
        """
        return self._warranty_notes_labour

    @warranty_notes_labour.setter
    def warranty_notes_labour(self, warranty_notes_labour):
        """Sets the warranty_notes_labour of this UpdatePartModel.

        Warranty Notes for Labour  # noqa: E501

        :param warranty_notes_labour: The warranty_notes_labour of this UpdatePartModel.  # noqa: E501
        :type: str
        """

        self._warranty_notes_labour = warranty_notes_labour

    @property
    def warranty_notes_parts(self):
        """Gets the warranty_notes_parts of this UpdatePartModel.  # noqa: E501

        Warranty Notes for Part  # noqa: E501

        :return: The warranty_notes_parts of this UpdatePartModel.  # noqa: E501
        :rtype: str
        """
        return self._warranty_notes_parts

    @warranty_notes_parts.setter
    def warranty_notes_parts(self, warranty_notes_parts):
        """Sets the warranty_notes_parts of this UpdatePartModel.

        Warranty Notes for Part  # noqa: E501

        :param warranty_notes_parts: The warranty_notes_parts of this UpdatePartModel.  # noqa: E501
        :type: str
        """

        self._warranty_notes_parts = warranty_notes_parts

    @property
    def storage_location(self):
        """Gets the storage_location of this UpdatePartModel.  # noqa: E501

        Storage location of Part. Location Id can be found in your Maxpanda Location Index or Location API  # noqa: E501

        :return: The storage_location of this UpdatePartModel.  # noqa: E501
        :rtype: int
        """
        return self._storage_location

    @storage_location.setter
    def storage_location(self, storage_location):
        """Sets the storage_location of this UpdatePartModel.

        Storage location of Part. Location Id can be found in your Maxpanda Location Index or Location API  # noqa: E501

        :param storage_location: The storage_location of this UpdatePartModel.  # noqa: E501
        :type: int
        """

        self._storage_location = storage_location

    @property
    def assigned_asset(self):
        """Gets the assigned_asset of this UpdatePartModel.  # noqa: E501

        Part assigned to Assets. Asset Id can be found in your Maxpanda Asset Index or Asset API  # noqa: E501

        :return: The assigned_asset of this UpdatePartModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._assigned_asset

    @assigned_asset.setter
    def assigned_asset(self, assigned_asset):
        """Sets the assigned_asset of this UpdatePartModel.

        Part assigned to Assets. Asset Id can be found in your Maxpanda Asset Index or Asset API  # noqa: E501

        :param assigned_asset: The assigned_asset of this UpdatePartModel.  # noqa: E501
        :type: list[int]
        """

        self._assigned_asset = assigned_asset

    @property
    def bin_parts_ref(self):
        """Gets the bin_parts_ref of this UpdatePartModel.  # noqa: E501

        Part assigned to Bins.  # noqa: E501

        :return: The bin_parts_ref of this UpdatePartModel.  # noqa: E501
        :rtype: list[BinPartsRef]
        """
        return self._bin_parts_ref

    @bin_parts_ref.setter
    def bin_parts_ref(self, bin_parts_ref):
        """Sets the bin_parts_ref of this UpdatePartModel.

        Part assigned to Bins.  # noqa: E501

        :param bin_parts_ref: The bin_parts_ref of this UpdatePartModel.  # noqa: E501
        :type: list[BinPartsRef]
        """

        self._bin_parts_ref = bin_parts_ref

    @property
    def purchase_order_template_id(self):
        """Gets the purchase_order_template_id of this UpdatePartModel.  # noqa: E501

        Purchase Order of Part. Purchase Order Id can be found in your Maxpanda Accounting Purchase Order Index or Purchase Order API  # noqa: E501

        :return: The purchase_order_template_id of this UpdatePartModel.  # noqa: E501
        :rtype: int
        """
        return self._purchase_order_template_id

    @purchase_order_template_id.setter
    def purchase_order_template_id(self, purchase_order_template_id):
        """Sets the purchase_order_template_id of this UpdatePartModel.

        Purchase Order of Part. Purchase Order Id can be found in your Maxpanda Accounting Purchase Order Index or Purchase Order API  # noqa: E501

        :param purchase_order_template_id: The purchase_order_template_id of this UpdatePartModel.  # noqa: E501
        :type: int
        """

        self._purchase_order_template_id = purchase_order_template_id

    @property
    def is_frozen(self):
        """Gets the is_frozen of this UpdatePartModel.  # noqa: E501


        :return: The is_frozen of this UpdatePartModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_frozen

    @is_frozen.setter
    def is_frozen(self, is_frozen):
        """Sets the is_frozen of this UpdatePartModel.


        :param is_frozen: The is_frozen of this UpdatePartModel.  # noqa: E501
        :type: bool
        """

        self._is_frozen = is_frozen

    @property
    def customer_warranty_start_date(self):
        """Gets the customer_warranty_start_date of this UpdatePartModel.  # noqa: E501

        Customer Warranty Start Date  # noqa: E501

        :return: The customer_warranty_start_date of this UpdatePartModel.  # noqa: E501
        :rtype: datetime
        """
        return self._customer_warranty_start_date

    @customer_warranty_start_date.setter
    def customer_warranty_start_date(self, customer_warranty_start_date):
        """Sets the customer_warranty_start_date of this UpdatePartModel.

        Customer Warranty Start Date  # noqa: E501

        :param customer_warranty_start_date: The customer_warranty_start_date of this UpdatePartModel.  # noqa: E501
        :type: datetime
        """

        self._customer_warranty_start_date = customer_warranty_start_date

    @property
    def customer_warranty_end_date(self):
        """Gets the customer_warranty_end_date of this UpdatePartModel.  # noqa: E501

        Customer Warranty End Date  # noqa: E501

        :return: The customer_warranty_end_date of this UpdatePartModel.  # noqa: E501
        :rtype: datetime
        """
        return self._customer_warranty_end_date

    @customer_warranty_end_date.setter
    def customer_warranty_end_date(self, customer_warranty_end_date):
        """Sets the customer_warranty_end_date of this UpdatePartModel.

        Customer Warranty End Date  # noqa: E501

        :param customer_warranty_end_date: The customer_warranty_end_date of this UpdatePartModel.  # noqa: E501
        :type: datetime
        """

        self._customer_warranty_end_date = customer_warranty_end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatePartModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatePartModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
