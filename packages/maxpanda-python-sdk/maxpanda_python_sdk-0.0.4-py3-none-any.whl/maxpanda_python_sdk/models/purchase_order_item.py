# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PurchaseOrderItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'part_id': 'int',
        'bin_id': 'int',
        'unit_price': 'float',
        'ordered_qty': 'float',
        'received_qty': 'float',
        'update_bin_quantity_to_inventory': 'bool'
    }

    attribute_map = {
        'part_id': 'PartId',
        'bin_id': 'BinId',
        'unit_price': 'UnitPrice',
        'ordered_qty': 'OrderedQty',
        'received_qty': 'ReceivedQty',
        'update_bin_quantity_to_inventory': 'UpdateBinQuantityToInventory'
    }

    def __init__(self, part_id=None, bin_id=None, unit_price=None, ordered_qty=None, received_qty=None, update_bin_quantity_to_inventory=None):  # noqa: E501
        """PurchaseOrderItem - a model defined in Swagger"""  # noqa: E501
        self._part_id = None
        self._bin_id = None
        self._unit_price = None
        self._ordered_qty = None
        self._received_qty = None
        self._update_bin_quantity_to_inventory = None
        self.discriminator = None
        if part_id is not None:
            self.part_id = part_id
        if bin_id is not None:
            self.bin_id = bin_id
        if unit_price is not None:
            self.unit_price = unit_price
        if ordered_qty is not None:
            self.ordered_qty = ordered_qty
        if received_qty is not None:
            self.received_qty = received_qty
        if update_bin_quantity_to_inventory is not None:
            self.update_bin_quantity_to_inventory = update_bin_quantity_to_inventory

    @property
    def part_id(self):
        """Gets the part_id of this PurchaseOrderItem.  # noqa: E501

        Part to be ordered. Part Id can be found in your Maxpanda Inventory Parts Index or Parts API  # noqa: E501

        :return: The part_id of this PurchaseOrderItem.  # noqa: E501
        :rtype: int
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this PurchaseOrderItem.

        Part to be ordered. Part Id can be found in your Maxpanda Inventory Parts Index or Parts API  # noqa: E501

        :param part_id: The part_id of this PurchaseOrderItem.  # noqa: E501
        :type: int
        """

        self._part_id = part_id

    @property
    def bin_id(self):
        """Gets the bin_id of this PurchaseOrderItem.  # noqa: E501

        Bin where Part is kept. Bin Id can be found in your Maxpanda Inventory Bin Index or Bin API  # noqa: E501

        :return: The bin_id of this PurchaseOrderItem.  # noqa: E501
        :rtype: int
        """
        return self._bin_id

    @bin_id.setter
    def bin_id(self, bin_id):
        """Sets the bin_id of this PurchaseOrderItem.

        Bin where Part is kept. Bin Id can be found in your Maxpanda Inventory Bin Index or Bin API  # noqa: E501

        :param bin_id: The bin_id of this PurchaseOrderItem.  # noqa: E501
        :type: int
        """

        self._bin_id = bin_id

    @property
    def unit_price(self):
        """Gets the unit_price of this PurchaseOrderItem.  # noqa: E501

        Unit price of Ordered Item.Unit Price can be modified in case of Pending and Approved Purchase Orders only.  # noqa: E501

        :return: The unit_price of this PurchaseOrderItem.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this PurchaseOrderItem.

        Unit price of Ordered Item.Unit Price can be modified in case of Pending and Approved Purchase Orders only.  # noqa: E501

        :param unit_price: The unit_price of this PurchaseOrderItem.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def ordered_qty(self):
        """Gets the ordered_qty of this PurchaseOrderItem.  # noqa: E501

        Quantity of Items ordered. OrderedQty can be modified in case of Pending and Approved Purchase Orders only.  # noqa: E501

        :return: The ordered_qty of this PurchaseOrderItem.  # noqa: E501
        :rtype: float
        """
        return self._ordered_qty

    @ordered_qty.setter
    def ordered_qty(self, ordered_qty):
        """Sets the ordered_qty of this PurchaseOrderItem.

        Quantity of Items ordered. OrderedQty can be modified in case of Pending and Approved Purchase Orders only.  # noqa: E501

        :param ordered_qty: The ordered_qty of this PurchaseOrderItem.  # noqa: E501
        :type: float
        """

        self._ordered_qty = ordered_qty

    @property
    def received_qty(self):
        """Gets the received_qty of this PurchaseOrderItem.  # noqa: E501

        Quantity Received. Quantity can be received only in case of OnOrdered Purchase Orders.  # noqa: E501

        :return: The received_qty of this PurchaseOrderItem.  # noqa: E501
        :rtype: float
        """
        return self._received_qty

    @received_qty.setter
    def received_qty(self, received_qty):
        """Sets the received_qty of this PurchaseOrderItem.

        Quantity Received. Quantity can be received only in case of OnOrdered Purchase Orders.  # noqa: E501

        :param received_qty: The received_qty of this PurchaseOrderItem.  # noqa: E501
        :type: float
        """

        self._received_qty = received_qty

    @property
    def update_bin_quantity_to_inventory(self):
        """Gets the update_bin_quantity_to_inventory of this PurchaseOrderItem.  # noqa: E501

        Bin Quantity Update. Update Bin Quantity to Inventory  # noqa: E501

        :return: The update_bin_quantity_to_inventory of this PurchaseOrderItem.  # noqa: E501
        :rtype: bool
        """
        return self._update_bin_quantity_to_inventory

    @update_bin_quantity_to_inventory.setter
    def update_bin_quantity_to_inventory(self, update_bin_quantity_to_inventory):
        """Sets the update_bin_quantity_to_inventory of this PurchaseOrderItem.

        Bin Quantity Update. Update Bin Quantity to Inventory  # noqa: E501

        :param update_bin_quantity_to_inventory: The update_bin_quantity_to_inventory of this PurchaseOrderItem.  # noqa: E501
        :type: bool
        """

        self._update_bin_quantity_to_inventory = update_bin_quantity_to_inventory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchaseOrderItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchaseOrderItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
