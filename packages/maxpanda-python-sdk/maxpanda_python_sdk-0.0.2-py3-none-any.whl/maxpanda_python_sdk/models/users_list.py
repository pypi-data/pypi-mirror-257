# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsersList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_ref': 'list[SiteRef]',
        'user_id': 'int',
        'user_name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'weekly_ceiling_working_hours': 'float',
        'disabled': 'str',
        'asset_ref': 'list[AssetRef]'
    }

    attribute_map = {
        'site_ref': 'SiteRef',
        'user_id': 'UserId',
        'user_name': 'UserName',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'weekly_ceiling_working_hours': 'WeeklyCeilingWorkingHours',
        'disabled': 'Disabled',
        'asset_ref': 'AssetRef'
    }

    def __init__(self, site_ref=None, user_id=None, user_name=None, first_name=None, last_name=None, weekly_ceiling_working_hours=None, disabled=None, asset_ref=None):  # noqa: E501
        """UsersList - a model defined in Swagger"""  # noqa: E501
        self._site_ref = None
        self._user_id = None
        self._user_name = None
        self._first_name = None
        self._last_name = None
        self._weekly_ceiling_working_hours = None
        self._disabled = None
        self._asset_ref = None
        self.discriminator = None
        if site_ref is not None:
            self.site_ref = site_ref
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if weekly_ceiling_working_hours is not None:
            self.weekly_ceiling_working_hours = weekly_ceiling_working_hours
        if disabled is not None:
            self.disabled = disabled
        if asset_ref is not None:
            self.asset_ref = asset_ref

    @property
    def site_ref(self):
        """Gets the site_ref of this UsersList.  # noqa: E501


        :return: The site_ref of this UsersList.  # noqa: E501
        :rtype: list[SiteRef]
        """
        return self._site_ref

    @site_ref.setter
    def site_ref(self, site_ref):
        """Sets the site_ref of this UsersList.


        :param site_ref: The site_ref of this UsersList.  # noqa: E501
        :type: list[SiteRef]
        """

        self._site_ref = site_ref

    @property
    def user_id(self):
        """Gets the user_id of this UsersList.  # noqa: E501


        :return: The user_id of this UsersList.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UsersList.


        :param user_id: The user_id of this UsersList.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this UsersList.  # noqa: E501


        :return: The user_name of this UsersList.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UsersList.


        :param user_name: The user_name of this UsersList.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def first_name(self):
        """Gets the first_name of this UsersList.  # noqa: E501


        :return: The first_name of this UsersList.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UsersList.


        :param first_name: The first_name of this UsersList.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UsersList.  # noqa: E501


        :return: The last_name of this UsersList.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UsersList.


        :param last_name: The last_name of this UsersList.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def weekly_ceiling_working_hours(self):
        """Gets the weekly_ceiling_working_hours of this UsersList.  # noqa: E501


        :return: The weekly_ceiling_working_hours of this UsersList.  # noqa: E501
        :rtype: float
        """
        return self._weekly_ceiling_working_hours

    @weekly_ceiling_working_hours.setter
    def weekly_ceiling_working_hours(self, weekly_ceiling_working_hours):
        """Sets the weekly_ceiling_working_hours of this UsersList.


        :param weekly_ceiling_working_hours: The weekly_ceiling_working_hours of this UsersList.  # noqa: E501
        :type: float
        """

        self._weekly_ceiling_working_hours = weekly_ceiling_working_hours

    @property
    def disabled(self):
        """Gets the disabled of this UsersList.  # noqa: E501


        :return: The disabled of this UsersList.  # noqa: E501
        :rtype: str
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this UsersList.


        :param disabled: The disabled of this UsersList.  # noqa: E501
        :type: str
        """

        self._disabled = disabled

    @property
    def asset_ref(self):
        """Gets the asset_ref of this UsersList.  # noqa: E501


        :return: The asset_ref of this UsersList.  # noqa: E501
        :rtype: list[AssetRef]
        """
        return self._asset_ref

    @asset_ref.setter
    def asset_ref(self, asset_ref):
        """Sets the asset_ref of this UsersList.


        :param asset_ref: The asset_ref of this UsersList.  # noqa: E501
        :type: list[AssetRef]
        """

        self._asset_ref = asset_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
