# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateServiceTypeModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_id': 'int',
        'service_type_name': 'str',
        'service_type_status_id': 'int',
        'type_id': 'int',
        'preferred_supplier_id': 'int',
        'part_cost': 'float',
        'sales_price': 'float',
        'notes': 'str'
    }

    attribute_map = {
        'site_id': 'SiteId',
        'service_type_name': 'ServiceTypeName',
        'service_type_status_id': 'ServiceTypeStatusId',
        'type_id': 'TypeId',
        'preferred_supplier_id': 'PreferredSupplierId',
        'part_cost': 'PartCost',
        'sales_price': 'SalesPrice',
        'notes': 'Notes'
    }

    def __init__(self, site_id=None, service_type_name=None, service_type_status_id=None, type_id=None, preferred_supplier_id=None, part_cost=None, sales_price=None, notes=None):  # noqa: E501
        """CreateServiceTypeModel - a model defined in Swagger"""  # noqa: E501
        self._site_id = None
        self._service_type_name = None
        self._service_type_status_id = None
        self._type_id = None
        self._preferred_supplier_id = None
        self._part_cost = None
        self._sales_price = None
        self._notes = None
        self.discriminator = None
        self.site_id = site_id
        self.service_type_name = service_type_name
        self.service_type_status_id = service_type_status_id
        self.type_id = type_id
        if preferred_supplier_id is not None:
            self.preferred_supplier_id = preferred_supplier_id
        if part_cost is not None:
            self.part_cost = part_cost
        if sales_price is not None:
            self.sales_price = sales_price
        if notes is not None:
            self.notes = notes

    @property
    def site_id(self):
        """Gets the site_id of this CreateServiceTypeModel.  # noqa: E501

        Site Id of the Part. Site Id can be found in your Maxpanda Site Index or Site API  # noqa: E501

        :return: The site_id of this CreateServiceTypeModel.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this CreateServiceTypeModel.

        Site Id of the Part. Site Id can be found in your Maxpanda Site Index or Site API  # noqa: E501

        :param site_id: The site_id of this CreateServiceTypeModel.  # noqa: E501
        :type: int
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")  # noqa: E501

        self._site_id = site_id

    @property
    def service_type_name(self):
        """Gets the service_type_name of this CreateServiceTypeModel.  # noqa: E501

        Name of the Part  # noqa: E501

        :return: The service_type_name of this CreateServiceTypeModel.  # noqa: E501
        :rtype: str
        """
        return self._service_type_name

    @service_type_name.setter
    def service_type_name(self, service_type_name):
        """Sets the service_type_name of this CreateServiceTypeModel.

        Name of the Part  # noqa: E501

        :param service_type_name: The service_type_name of this CreateServiceTypeModel.  # noqa: E501
        :type: str
        """
        if service_type_name is None:
            raise ValueError("Invalid value for `service_type_name`, must not be `None`")  # noqa: E501

        self._service_type_name = service_type_name

    @property
    def service_type_status_id(self):
        """Gets the service_type_status_id of this CreateServiceTypeModel.  # noqa: E501

        Status of the Part. Part Status Id can be found in your Maxpanda Company Part Status or Part Status API  # noqa: E501

        :return: The service_type_status_id of this CreateServiceTypeModel.  # noqa: E501
        :rtype: int
        """
        return self._service_type_status_id

    @service_type_status_id.setter
    def service_type_status_id(self, service_type_status_id):
        """Sets the service_type_status_id of this CreateServiceTypeModel.

        Status of the Part. Part Status Id can be found in your Maxpanda Company Part Status or Part Status API  # noqa: E501

        :param service_type_status_id: The service_type_status_id of this CreateServiceTypeModel.  # noqa: E501
        :type: int
        """
        if service_type_status_id is None:
            raise ValueError("Invalid value for `service_type_status_id`, must not be `None`")  # noqa: E501

        self._service_type_status_id = service_type_status_id

    @property
    def type_id(self):
        """Gets the type_id of this CreateServiceTypeModel.  # noqa: E501

        Type of the Part. Part Type Id can be found in your Maxpanda Company Part Type or Part Type API  # noqa: E501

        :return: The type_id of this CreateServiceTypeModel.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this CreateServiceTypeModel.

        Type of the Part. Part Type Id can be found in your Maxpanda Company Part Type or Part Type API  # noqa: E501

        :param type_id: The type_id of this CreateServiceTypeModel.  # noqa: E501
        :type: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    @property
    def preferred_supplier_id(self):
        """Gets the preferred_supplier_id of this CreateServiceTypeModel.  # noqa: E501

        Preferred Supplier of the Part. Supplier Id can be found in your Maxpanda Vendor Index or Vendor API  # noqa: E501

        :return: The preferred_supplier_id of this CreateServiceTypeModel.  # noqa: E501
        :rtype: int
        """
        return self._preferred_supplier_id

    @preferred_supplier_id.setter
    def preferred_supplier_id(self, preferred_supplier_id):
        """Sets the preferred_supplier_id of this CreateServiceTypeModel.

        Preferred Supplier of the Part. Supplier Id can be found in your Maxpanda Vendor Index or Vendor API  # noqa: E501

        :param preferred_supplier_id: The preferred_supplier_id of this CreateServiceTypeModel.  # noqa: E501
        :type: int
        """

        self._preferred_supplier_id = preferred_supplier_id

    @property
    def part_cost(self):
        """Gets the part_cost of this CreateServiceTypeModel.  # noqa: E501

        Cost of the Part  # noqa: E501

        :return: The part_cost of this CreateServiceTypeModel.  # noqa: E501
        :rtype: float
        """
        return self._part_cost

    @part_cost.setter
    def part_cost(self, part_cost):
        """Sets the part_cost of this CreateServiceTypeModel.

        Cost of the Part  # noqa: E501

        :param part_cost: The part_cost of this CreateServiceTypeModel.  # noqa: E501
        :type: float
        """

        self._part_cost = part_cost

    @property
    def sales_price(self):
        """Gets the sales_price of this CreateServiceTypeModel.  # noqa: E501

        Selling price of Part  # noqa: E501

        :return: The sales_price of this CreateServiceTypeModel.  # noqa: E501
        :rtype: float
        """
        return self._sales_price

    @sales_price.setter
    def sales_price(self, sales_price):
        """Sets the sales_price of this CreateServiceTypeModel.

        Selling price of Part  # noqa: E501

        :param sales_price: The sales_price of this CreateServiceTypeModel.  # noqa: E501
        :type: float
        """

        self._sales_price = sales_price

    @property
    def notes(self):
        """Gets the notes of this CreateServiceTypeModel.  # noqa: E501

        Notes about Parts  # noqa: E501

        :return: The notes of this CreateServiceTypeModel.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateServiceTypeModel.

        Notes about Parts  # noqa: E501

        :param notes: The notes of this CreateServiceTypeModel.  # noqa: E501
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateServiceTypeModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateServiceTypeModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
