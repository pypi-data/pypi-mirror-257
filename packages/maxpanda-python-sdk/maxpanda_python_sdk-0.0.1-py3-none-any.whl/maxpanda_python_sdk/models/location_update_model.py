# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocationUpdateModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_id': 'int',
        'location_id': 'int',
        'name': 'str',
        'location_type_id': 'int',
        'building_id': 'int',
        'description': 'str',
        'vendors_id': 'list[int]',
        'contact_name': 'str',
        'phone_number': 'str',
        'contact_email': 'str',
        'external_email': 'str',
        'archive': 'bool',
        'company_address': 'Address'
    }

    attribute_map = {
        'site_id': 'SiteId',
        'location_id': 'LocationId',
        'name': 'Name',
        'location_type_id': 'LocationTypeId',
        'building_id': 'BuildingId',
        'description': 'Description',
        'vendors_id': 'VendorsId',
        'contact_name': 'ContactName',
        'phone_number': 'PhoneNumber',
        'contact_email': 'ContactEmail',
        'external_email': 'ExternalEmail',
        'archive': 'Archive',
        'company_address': 'CompanyAddress'
    }

    def __init__(self, site_id=None, location_id=None, name=None, location_type_id=None, building_id=None, description=None, vendors_id=None, contact_name=None, phone_number=None, contact_email=None, external_email=None, archive=None, company_address=None):  # noqa: E501
        """LocationUpdateModel - a model defined in Swagger"""  # noqa: E501
        self._site_id = None
        self._location_id = None
        self._name = None
        self._location_type_id = None
        self._building_id = None
        self._description = None
        self._vendors_id = None
        self._contact_name = None
        self._phone_number = None
        self._contact_email = None
        self._external_email = None
        self._archive = None
        self._company_address = None
        self.discriminator = None
        self.site_id = site_id
        self.location_id = location_id
        self.name = name
        self.location_type_id = location_type_id
        if building_id is not None:
            self.building_id = building_id
        if description is not None:
            self.description = description
        if vendors_id is not None:
            self.vendors_id = vendors_id
        if contact_name is not None:
            self.contact_name = contact_name
        if phone_number is not None:
            self.phone_number = phone_number
        if contact_email is not None:
            self.contact_email = contact_email
        if external_email is not None:
            self.external_email = external_email
        if archive is not None:
            self.archive = archive
        if company_address is not None:
            self.company_address = company_address

    @property
    def site_id(self):
        """Gets the site_id of this LocationUpdateModel.  # noqa: E501

        Site Id of the Location. Site Id can be found in your Maxpanda Site Index or Site API  # noqa: E501

        :return: The site_id of this LocationUpdateModel.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this LocationUpdateModel.

        Site Id of the Location. Site Id can be found in your Maxpanda Site Index or Site API  # noqa: E501

        :param site_id: The site_id of this LocationUpdateModel.  # noqa: E501
        :type: int
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")  # noqa: E501

        self._site_id = site_id

    @property
    def location_id(self):
        """Gets the location_id of this LocationUpdateModel.  # noqa: E501

        Id of the Location. Location Id can be found in your Maxpanda Location Index or Location API  # noqa: E501

        :return: The location_id of this LocationUpdateModel.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this LocationUpdateModel.

        Id of the Location. Location Id can be found in your Maxpanda Location Index or Location API  # noqa: E501

        :param location_id: The location_id of this LocationUpdateModel.  # noqa: E501
        :type: int
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    @property
    def name(self):
        """Gets the name of this LocationUpdateModel.  # noqa: E501

        Name of the Location.  # noqa: E501

        :return: The name of this LocationUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocationUpdateModel.

        Name of the Location.  # noqa: E501

        :param name: The name of this LocationUpdateModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location_type_id(self):
        """Gets the location_type_id of this LocationUpdateModel.  # noqa: E501

        Type of the Location. Location Type Id can be found in your Maxpanda Company Location Type or Location Type API  # noqa: E501

        :return: The location_type_id of this LocationUpdateModel.  # noqa: E501
        :rtype: int
        """
        return self._location_type_id

    @location_type_id.setter
    def location_type_id(self, location_type_id):
        """Sets the location_type_id of this LocationUpdateModel.

        Type of the Location. Location Type Id can be found in your Maxpanda Company Location Type or Location Type API  # noqa: E501

        :param location_type_id: The location_type_id of this LocationUpdateModel.  # noqa: E501
        :type: int
        """
        if location_type_id is None:
            raise ValueError("Invalid value for `location_type_id`, must not be `None`")  # noqa: E501

        self._location_type_id = location_type_id

    @property
    def building_id(self):
        """Gets the building_id of this LocationUpdateModel.  # noqa: E501

        Building Id of the Location. Building Id can be found in your Maxpanda Building Index or Buildings API  # noqa: E501

        :return: The building_id of this LocationUpdateModel.  # noqa: E501
        :rtype: int
        """
        return self._building_id

    @building_id.setter
    def building_id(self, building_id):
        """Sets the building_id of this LocationUpdateModel.

        Building Id of the Location. Building Id can be found in your Maxpanda Building Index or Buildings API  # noqa: E501

        :param building_id: The building_id of this LocationUpdateModel.  # noqa: E501
        :type: int
        """

        self._building_id = building_id

    @property
    def description(self):
        """Gets the description of this LocationUpdateModel.  # noqa: E501

        Description about the Location  # noqa: E501

        :return: The description of this LocationUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LocationUpdateModel.

        Description about the Location  # noqa: E501

        :param description: The description of this LocationUpdateModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def vendors_id(self):
        """Gets the vendors_id of this LocationUpdateModel.  # noqa: E501

        Preferred Vendors of the Location. Vendor Id can be found in your Maxpanda Vendor Index or Vendor API  # noqa: E501

        :return: The vendors_id of this LocationUpdateModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._vendors_id

    @vendors_id.setter
    def vendors_id(self, vendors_id):
        """Sets the vendors_id of this LocationUpdateModel.

        Preferred Vendors of the Location. Vendor Id can be found in your Maxpanda Vendor Index or Vendor API  # noqa: E501

        :param vendors_id: The vendors_id of this LocationUpdateModel.  # noqa: E501
        :type: list[int]
        """

        self._vendors_id = vendors_id

    @property
    def contact_name(self):
        """Gets the contact_name of this LocationUpdateModel.  # noqa: E501

        Name of the contact person  # noqa: E501

        :return: The contact_name of this LocationUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this LocationUpdateModel.

        Name of the contact person  # noqa: E501

        :param contact_name: The contact_name of this LocationUpdateModel.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def phone_number(self):
        """Gets the phone_number of this LocationUpdateModel.  # noqa: E501

        Contact number of Location  # noqa: E501

        :return: The phone_number of this LocationUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this LocationUpdateModel.

        Contact number of Location  # noqa: E501

        :param phone_number: The phone_number of this LocationUpdateModel.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def contact_email(self):
        """Gets the contact_email of this LocationUpdateModel.  # noqa: E501

        Contact Email  # noqa: E501

        :return: The contact_email of this LocationUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this LocationUpdateModel.

        Contact Email  # noqa: E501

        :param contact_email: The contact_email of this LocationUpdateModel.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def external_email(self):
        """Gets the external_email of this LocationUpdateModel.  # noqa: E501

        Add external Email Recipients  # noqa: E501

        :return: The external_email of this LocationUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._external_email

    @external_email.setter
    def external_email(self, external_email):
        """Sets the external_email of this LocationUpdateModel.

        Add external Email Recipients  # noqa: E501

        :param external_email: The external_email of this LocationUpdateModel.  # noqa: E501
        :type: str
        """

        self._external_email = external_email

    @property
    def archive(self):
        """Gets the archive of this LocationUpdateModel.  # noqa: E501


        :return: The archive of this LocationUpdateModel.  # noqa: E501
        :rtype: bool
        """
        return self._archive

    @archive.setter
    def archive(self, archive):
        """Sets the archive of this LocationUpdateModel.


        :param archive: The archive of this LocationUpdateModel.  # noqa: E501
        :type: bool
        """

        self._archive = archive

    @property
    def company_address(self):
        """Gets the company_address of this LocationUpdateModel.  # noqa: E501


        :return: The company_address of this LocationUpdateModel.  # noqa: E501
        :rtype: Address
        """
        return self._company_address

    @company_address.setter
    def company_address(self, company_address):
        """Sets the company_address of this LocationUpdateModel.


        :param company_address: The company_address of this LocationUpdateModel.  # noqa: E501
        :type: Address
        """

        self._company_address = company_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationUpdateModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationUpdateModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
