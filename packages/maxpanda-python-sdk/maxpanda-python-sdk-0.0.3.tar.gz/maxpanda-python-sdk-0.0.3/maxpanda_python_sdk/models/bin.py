# coding: utf-8

"""
    Maxpanda API V1

    The Maxpanda API documentation for version 1  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Bin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_ref': 'list[SiteRef]',
        'bin_id': 'int',
        'name': 'str',
        'bin_number': 'str',
        'building_ref': 'BuildingRef',
        'location_ref': 'LocationRef',
        'parts_ref': 'list[PartRef]',
        'notes': 'str',
        'description': 'str'
    }

    attribute_map = {
        'site_ref': 'SiteRef',
        'bin_id': 'BinId',
        'name': 'Name',
        'bin_number': 'BinNumber',
        'building_ref': 'BuildingRef',
        'location_ref': 'LocationRef',
        'parts_ref': 'PartsRef',
        'notes': 'Notes',
        'description': 'Description'
    }

    def __init__(self, site_ref=None, bin_id=None, name=None, bin_number=None, building_ref=None, location_ref=None, parts_ref=None, notes=None, description=None):  # noqa: E501
        """Bin - a model defined in Swagger"""  # noqa: E501
        self._site_ref = None
        self._bin_id = None
        self._name = None
        self._bin_number = None
        self._building_ref = None
        self._location_ref = None
        self._parts_ref = None
        self._notes = None
        self._description = None
        self.discriminator = None
        if site_ref is not None:
            self.site_ref = site_ref
        if bin_id is not None:
            self.bin_id = bin_id
        if name is not None:
            self.name = name
        if bin_number is not None:
            self.bin_number = bin_number
        if building_ref is not None:
            self.building_ref = building_ref
        if location_ref is not None:
            self.location_ref = location_ref
        if parts_ref is not None:
            self.parts_ref = parts_ref
        if notes is not None:
            self.notes = notes
        if description is not None:
            self.description = description

    @property
    def site_ref(self):
        """Gets the site_ref of this Bin.  # noqa: E501


        :return: The site_ref of this Bin.  # noqa: E501
        :rtype: list[SiteRef]
        """
        return self._site_ref

    @site_ref.setter
    def site_ref(self, site_ref):
        """Sets the site_ref of this Bin.


        :param site_ref: The site_ref of this Bin.  # noqa: E501
        :type: list[SiteRef]
        """

        self._site_ref = site_ref

    @property
    def bin_id(self):
        """Gets the bin_id of this Bin.  # noqa: E501


        :return: The bin_id of this Bin.  # noqa: E501
        :rtype: int
        """
        return self._bin_id

    @bin_id.setter
    def bin_id(self, bin_id):
        """Sets the bin_id of this Bin.


        :param bin_id: The bin_id of this Bin.  # noqa: E501
        :type: int
        """

        self._bin_id = bin_id

    @property
    def name(self):
        """Gets the name of this Bin.  # noqa: E501


        :return: The name of this Bin.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Bin.


        :param name: The name of this Bin.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def bin_number(self):
        """Gets the bin_number of this Bin.  # noqa: E501


        :return: The bin_number of this Bin.  # noqa: E501
        :rtype: str
        """
        return self._bin_number

    @bin_number.setter
    def bin_number(self, bin_number):
        """Sets the bin_number of this Bin.


        :param bin_number: The bin_number of this Bin.  # noqa: E501
        :type: str
        """

        self._bin_number = bin_number

    @property
    def building_ref(self):
        """Gets the building_ref of this Bin.  # noqa: E501


        :return: The building_ref of this Bin.  # noqa: E501
        :rtype: BuildingRef
        """
        return self._building_ref

    @building_ref.setter
    def building_ref(self, building_ref):
        """Sets the building_ref of this Bin.


        :param building_ref: The building_ref of this Bin.  # noqa: E501
        :type: BuildingRef
        """

        self._building_ref = building_ref

    @property
    def location_ref(self):
        """Gets the location_ref of this Bin.  # noqa: E501


        :return: The location_ref of this Bin.  # noqa: E501
        :rtype: LocationRef
        """
        return self._location_ref

    @location_ref.setter
    def location_ref(self, location_ref):
        """Sets the location_ref of this Bin.


        :param location_ref: The location_ref of this Bin.  # noqa: E501
        :type: LocationRef
        """

        self._location_ref = location_ref

    @property
    def parts_ref(self):
        """Gets the parts_ref of this Bin.  # noqa: E501


        :return: The parts_ref of this Bin.  # noqa: E501
        :rtype: list[PartRef]
        """
        return self._parts_ref

    @parts_ref.setter
    def parts_ref(self, parts_ref):
        """Sets the parts_ref of this Bin.


        :param parts_ref: The parts_ref of this Bin.  # noqa: E501
        :type: list[PartRef]
        """

        self._parts_ref = parts_ref

    @property
    def notes(self):
        """Gets the notes of this Bin.  # noqa: E501


        :return: The notes of this Bin.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Bin.


        :param notes: The notes of this Bin.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def description(self):
        """Gets the description of this Bin.  # noqa: E501


        :return: The description of this Bin.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Bin.


        :param description: The description of this Bin.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Bin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
