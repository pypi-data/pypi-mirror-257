# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from omni.pro.protos.v1.stock import quant_pb2 as v1_dot_stock_dot_quant__pb2


class QuantServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QuantCreate = channel.unary_unary(
            "/pro.omni.oms.api.v1.stock.quant.QuantService/QuantCreate",
            request_serializer=v1_dot_stock_dot_quant__pb2.QuantCreateRequest.SerializeToString,
            response_deserializer=v1_dot_stock_dot_quant__pb2.QuantCreateResponse.FromString,
        )
        self.QuantRead = channel.unary_unary(
            "/pro.omni.oms.api.v1.stock.quant.QuantService/QuantRead",
            request_serializer=v1_dot_stock_dot_quant__pb2.QuantReadRequest.SerializeToString,
            response_deserializer=v1_dot_stock_dot_quant__pb2.QuantReadResponse.FromString,
        )
        self.QuantUpdate = channel.unary_unary(
            "/pro.omni.oms.api.v1.stock.quant.QuantService/QuantUpdate",
            request_serializer=v1_dot_stock_dot_quant__pb2.QuantUpdateRequest.SerializeToString,
            response_deserializer=v1_dot_stock_dot_quant__pb2.QuantUpdateResponse.FromString,
        )
        self.QuantDelete = channel.unary_unary(
            "/pro.omni.oms.api.v1.stock.quant.QuantService/QuantDelete",
            request_serializer=v1_dot_stock_dot_quant__pb2.QuantDeleteRequest.SerializeToString,
            response_deserializer=v1_dot_stock_dot_quant__pb2.QuantDeleteResponse.FromString,
        )
        self.ProductAvailable = channel.unary_unary(
            "/pro.omni.oms.api.v1.stock.quant.QuantService/ProductAvailable",
            request_serializer=v1_dot_stock_dot_quant__pb2.ProductAvailableRequest.SerializeToString,
            response_deserializer=v1_dot_stock_dot_quant__pb2.ProductAvailableResponse.FromString,
        )


class QuantServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def QuantCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def QuantRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def QuantUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def QuantDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ProductAvailable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_QuantServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "QuantCreate": grpc.unary_unary_rpc_method_handler(
            servicer.QuantCreate,
            request_deserializer=v1_dot_stock_dot_quant__pb2.QuantCreateRequest.FromString,
            response_serializer=v1_dot_stock_dot_quant__pb2.QuantCreateResponse.SerializeToString,
        ),
        "QuantRead": grpc.unary_unary_rpc_method_handler(
            servicer.QuantRead,
            request_deserializer=v1_dot_stock_dot_quant__pb2.QuantReadRequest.FromString,
            response_serializer=v1_dot_stock_dot_quant__pb2.QuantReadResponse.SerializeToString,
        ),
        "QuantUpdate": grpc.unary_unary_rpc_method_handler(
            servicer.QuantUpdate,
            request_deserializer=v1_dot_stock_dot_quant__pb2.QuantUpdateRequest.FromString,
            response_serializer=v1_dot_stock_dot_quant__pb2.QuantUpdateResponse.SerializeToString,
        ),
        "QuantDelete": grpc.unary_unary_rpc_method_handler(
            servicer.QuantDelete,
            request_deserializer=v1_dot_stock_dot_quant__pb2.QuantDeleteRequest.FromString,
            response_serializer=v1_dot_stock_dot_quant__pb2.QuantDeleteResponse.SerializeToString,
        ),
        "ProductAvailable": grpc.unary_unary_rpc_method_handler(
            servicer.ProductAvailable,
            request_deserializer=v1_dot_stock_dot_quant__pb2.ProductAvailableRequest.FromString,
            response_serializer=v1_dot_stock_dot_quant__pb2.ProductAvailableResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "pro.omni.oms.api.v1.stock.quant.QuantService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class QuantService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def QuantCreate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.stock.quant.QuantService/QuantCreate",
            v1_dot_stock_dot_quant__pb2.QuantCreateRequest.SerializeToString,
            v1_dot_stock_dot_quant__pb2.QuantCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def QuantRead(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.stock.quant.QuantService/QuantRead",
            v1_dot_stock_dot_quant__pb2.QuantReadRequest.SerializeToString,
            v1_dot_stock_dot_quant__pb2.QuantReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def QuantUpdate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.stock.quant.QuantService/QuantUpdate",
            v1_dot_stock_dot_quant__pb2.QuantUpdateRequest.SerializeToString,
            v1_dot_stock_dot_quant__pb2.QuantUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def QuantDelete(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.stock.quant.QuantService/QuantDelete",
            v1_dot_stock_dot_quant__pb2.QuantDeleteRequest.SerializeToString,
            v1_dot_stock_dot_quant__pb2.QuantDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ProductAvailable(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.stock.quant.QuantService/ProductAvailable",
            v1_dot_stock_dot_quant__pb2.ProductAvailableRequest.SerializeToString,
            v1_dot_stock_dot_quant__pb2.ProductAvailableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
