# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class AddOrUpdateEducationEducation(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'degree': 'str',
        'field_of_study': 'str',
        'school_name': 'str',
        'start_month': 'int',
        'start_year': 'int',
        'end_month': 'int',
        'end_year': 'int',
        'is_high_education': 'bool',
        'city': 'str',
        'state': 'str',
        'country': 'str',
        'university_name': 'str',
        'university_city': 'str',
        'university_state': 'str',
        'university_country': 'str',
        'aggregate': 'str',
        'school_level': 'str',
        'aggregate_range': 'str',
        'graduated': 'str',
        'mode_of_education': 'str'
    }

    attribute_map = {
        'degree': 'degree',
        'field_of_study': 'fieldOfStudy',
        'school_name': 'schoolName',
        'start_month': 'startMonth',
        'start_year': 'startYear',
        'end_month': 'endMonth',
        'end_year': 'endYear',
        'is_high_education': 'isHighEducation',
        'city': 'city',
        'state': 'state',
        'country': 'country',
        'university_name': 'universityName',
        'university_city': 'universityCity',
        'university_state': 'universityState',
        'university_country': 'universityCountry',
        'aggregate': 'aggregate',
        'school_level': 'schoolLevel',
        'aggregate_range': 'aggregateRange',
        'graduated': 'graduated',
        'mode_of_education': 'modeOfEducation'
    }

    def __init__(self, degree=None, field_of_study=None, school_name=None, start_month=None, start_year=None, end_month=None, end_year=None, is_high_education=None, city=None, state=None, country=None, university_name=None, university_city=None, university_state=None, university_country=None, aggregate=None, school_level=None, aggregate_range=None, graduated=None, mode_of_education=None):  # noqa: E501
        """AddOrUpdateEducationEducation - a model defined in Swagger"""  # noqa: E501
        self._degree = None
        self._field_of_study = None
        self._school_name = None
        self._start_month = None
        self._start_year = None
        self._end_month = None
        self._end_year = None
        self._is_high_education = None
        self._city = None
        self._state = None
        self._country = None
        self._university_name = None
        self._university_city = None
        self._university_state = None
        self._university_country = None
        self._aggregate = None
        self._school_level = None
        self._aggregate_range = None
        self._graduated = None
        self._mode_of_education = None
        self.discriminator = None
        if degree is not None:
            self.degree = degree
        if field_of_study is not None:
            self.field_of_study = field_of_study
        if school_name is not None:
            self.school_name = school_name
        if start_month is not None:
            self.start_month = start_month
        if start_year is not None:
            self.start_year = start_year
        if end_month is not None:
            self.end_month = end_month
        if end_year is not None:
            self.end_year = end_year
        if is_high_education is not None:
            self.is_high_education = is_high_education
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if university_name is not None:
            self.university_name = university_name
        if university_city is not None:
            self.university_city = university_city
        if university_state is not None:
            self.university_state = university_state
        if university_country is not None:
            self.university_country = university_country
        if aggregate is not None:
            self.aggregate = aggregate
        if school_level is not None:
            self.school_level = school_level
        if aggregate_range is not None:
            self.aggregate_range = aggregate_range
        if graduated is not None:
            self.graduated = graduated
        if mode_of_education is not None:
            self.mode_of_education = mode_of_education

    @property
    def degree(self):
        """Gets the degree of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The degree of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._degree

    @degree.setter
    def degree(self, degree):
        """Sets the degree of this AddOrUpdateEducationEducation.


        :param degree: The degree of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._degree = degree

    @property
    def field_of_study(self):
        """Gets the field_of_study of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The field_of_study of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._field_of_study

    @field_of_study.setter
    def field_of_study(self, field_of_study):
        """Sets the field_of_study of this AddOrUpdateEducationEducation.


        :param field_of_study: The field_of_study of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._field_of_study = field_of_study

    @property
    def school_name(self):
        """Gets the school_name of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The school_name of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._school_name

    @school_name.setter
    def school_name(self, school_name):
        """Sets the school_name of this AddOrUpdateEducationEducation.


        :param school_name: The school_name of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._school_name = school_name

    @property
    def start_month(self):
        """Gets the start_month of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The start_month of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: int
        """
        return self._start_month

    @start_month.setter
    def start_month(self, start_month):
        """Sets the start_month of this AddOrUpdateEducationEducation.


        :param start_month: The start_month of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: int
        """

        self._start_month = start_month

    @property
    def start_year(self):
        """Gets the start_year of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The start_year of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: int
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year):
        """Sets the start_year of this AddOrUpdateEducationEducation.


        :param start_year: The start_year of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: int
        """

        self._start_year = start_year

    @property
    def end_month(self):
        """Gets the end_month of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The end_month of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: int
        """
        return self._end_month

    @end_month.setter
    def end_month(self, end_month):
        """Sets the end_month of this AddOrUpdateEducationEducation.


        :param end_month: The end_month of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: int
        """

        self._end_month = end_month

    @property
    def end_year(self):
        """Gets the end_year of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The end_year of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: int
        """
        return self._end_year

    @end_year.setter
    def end_year(self, end_year):
        """Sets the end_year of this AddOrUpdateEducationEducation.


        :param end_year: The end_year of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: int
        """

        self._end_year = end_year

    @property
    def is_high_education(self):
        """Gets the is_high_education of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The is_high_education of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: bool
        """
        return self._is_high_education

    @is_high_education.setter
    def is_high_education(self, is_high_education):
        """Sets the is_high_education of this AddOrUpdateEducationEducation.


        :param is_high_education: The is_high_education of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: bool
        """

        self._is_high_education = is_high_education

    @property
    def city(self):
        """Gets the city of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The city of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddOrUpdateEducationEducation.


        :param city: The city of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The state of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AddOrUpdateEducationEducation.


        :param state: The state of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The country of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddOrUpdateEducationEducation.


        :param country: The country of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def university_name(self):
        """Gets the university_name of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The university_name of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._university_name

    @university_name.setter
    def university_name(self, university_name):
        """Sets the university_name of this AddOrUpdateEducationEducation.


        :param university_name: The university_name of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._university_name = university_name

    @property
    def university_city(self):
        """Gets the university_city of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The university_city of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._university_city

    @university_city.setter
    def university_city(self, university_city):
        """Sets the university_city of this AddOrUpdateEducationEducation.


        :param university_city: The university_city of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._university_city = university_city

    @property
    def university_state(self):
        """Gets the university_state of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The university_state of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._university_state

    @university_state.setter
    def university_state(self, university_state):
        """Sets the university_state of this AddOrUpdateEducationEducation.


        :param university_state: The university_state of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._university_state = university_state

    @property
    def university_country(self):
        """Gets the university_country of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The university_country of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._university_country

    @university_country.setter
    def university_country(self, university_country):
        """Sets the university_country of this AddOrUpdateEducationEducation.


        :param university_country: The university_country of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._university_country = university_country

    @property
    def aggregate(self):
        """Gets the aggregate of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The aggregate of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._aggregate

    @aggregate.setter
    def aggregate(self, aggregate):
        """Sets the aggregate of this AddOrUpdateEducationEducation.


        :param aggregate: The aggregate of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._aggregate = aggregate

    @property
    def school_level(self):
        """Gets the school_level of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The school_level of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._school_level

    @school_level.setter
    def school_level(self, school_level):
        """Sets the school_level of this AddOrUpdateEducationEducation.


        :param school_level: The school_level of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._school_level = school_level

    @property
    def aggregate_range(self):
        """Gets the aggregate_range of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The aggregate_range of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._aggregate_range

    @aggregate_range.setter
    def aggregate_range(self, aggregate_range):
        """Sets the aggregate_range of this AddOrUpdateEducationEducation.


        :param aggregate_range: The aggregate_range of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._aggregate_range = aggregate_range

    @property
    def graduated(self):
        """Gets the graduated of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The graduated of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._graduated

    @graduated.setter
    def graduated(self, graduated):
        """Sets the graduated of this AddOrUpdateEducationEducation.


        :param graduated: The graduated of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._graduated = graduated

    @property
    def mode_of_education(self):
        """Gets the mode_of_education of this AddOrUpdateEducationEducation.  # noqa: E501


        :return: The mode_of_education of this AddOrUpdateEducationEducation.  # noqa: E501
        :rtype: str
        """
        return self._mode_of_education

    @mode_of_education.setter
    def mode_of_education(self, mode_of_education):
        """Sets the mode_of_education of this AddOrUpdateEducationEducation.


        :param mode_of_education: The mode_of_education of this AddOrUpdateEducationEducation.  # noqa: E501
        :type: str
        """

        self._mode_of_education = mode_of_education

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddOrUpdateEducationEducation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOrUpdateEducationEducation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
