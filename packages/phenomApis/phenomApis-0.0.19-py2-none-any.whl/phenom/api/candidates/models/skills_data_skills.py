# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class SkillsDataSkills(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'str',
        'value_org': 'str',
        'skill_source': 'list[str]',
        'type': 'str',
        'standardized_date': 'float',
        'latest_date': 'float'
    }

    attribute_map = {
        'value': 'value',
        'value_org': 'value_org',
        'skill_source': 'skillSource',
        'type': 'type',
        'standardized_date': 'standardizedDate',
        'latest_date': 'latestDate'
    }

    def __init__(self, value=None, value_org=None, skill_source=None, type=None, standardized_date=None, latest_date=None):  # noqa: E501
        """SkillsDataSkills - a model defined in Swagger"""  # noqa: E501
        self._value = None
        self._value_org = None
        self._skill_source = None
        self._type = None
        self._standardized_date = None
        self._latest_date = None
        self.discriminator = None
        if value is not None:
            self.value = value
        if value_org is not None:
            self.value_org = value_org
        if skill_source is not None:
            self.skill_source = skill_source
        if type is not None:
            self.type = type
        if standardized_date is not None:
            self.standardized_date = standardized_date
        if latest_date is not None:
            self.latest_date = latest_date

    @property
    def value(self):
        """Gets the value of this SkillsDataSkills.  # noqa: E501


        :return: The value of this SkillsDataSkills.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SkillsDataSkills.


        :param value: The value of this SkillsDataSkills.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def value_org(self):
        """Gets the value_org of this SkillsDataSkills.  # noqa: E501


        :return: The value_org of this SkillsDataSkills.  # noqa: E501
        :rtype: str
        """
        return self._value_org

    @value_org.setter
    def value_org(self, value_org):
        """Sets the value_org of this SkillsDataSkills.


        :param value_org: The value_org of this SkillsDataSkills.  # noqa: E501
        :type: str
        """

        self._value_org = value_org

    @property
    def skill_source(self):
        """Gets the skill_source of this SkillsDataSkills.  # noqa: E501


        :return: The skill_source of this SkillsDataSkills.  # noqa: E501
        :rtype: list[str]
        """
        return self._skill_source

    @skill_source.setter
    def skill_source(self, skill_source):
        """Sets the skill_source of this SkillsDataSkills.


        :param skill_source: The skill_source of this SkillsDataSkills.  # noqa: E501
        :type: list[str]
        """

        self._skill_source = skill_source

    @property
    def type(self):
        """Gets the type of this SkillsDataSkills.  # noqa: E501


        :return: The type of this SkillsDataSkills.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SkillsDataSkills.


        :param type: The type of this SkillsDataSkills.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def standardized_date(self):
        """Gets the standardized_date of this SkillsDataSkills.  # noqa: E501


        :return: The standardized_date of this SkillsDataSkills.  # noqa: E501
        :rtype: float
        """
        return self._standardized_date

    @standardized_date.setter
    def standardized_date(self, standardized_date):
        """Sets the standardized_date of this SkillsDataSkills.


        :param standardized_date: The standardized_date of this SkillsDataSkills.  # noqa: E501
        :type: float
        """

        self._standardized_date = standardized_date

    @property
    def latest_date(self):
        """Gets the latest_date of this SkillsDataSkills.  # noqa: E501


        :return: The latest_date of this SkillsDataSkills.  # noqa: E501
        :rtype: float
        """
        return self._latest_date

    @latest_date.setter
    def latest_date(self, latest_date):
        """Sets the latest_date of this SkillsDataSkills.


        :param latest_date: The latest_date of this SkillsDataSkills.  # noqa: E501
        :type: float
        """

        self._latest_date = latest_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SkillsDataSkills, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SkillsDataSkills):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
