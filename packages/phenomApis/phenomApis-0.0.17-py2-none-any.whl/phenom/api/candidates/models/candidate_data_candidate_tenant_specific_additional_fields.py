# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateDataCandidateTenantSpecificAdditionalFields(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supervisor_name': 'str',
        'employee_type': 'str',
        'year_of_graduation': 'str',
        'birth_date': 'float',
        'employee_id': 'str',
        'start_date': 'float',
        'department': 'str',
        'joining_date': 'float',
        'background_check': 'str',
        'divison': 'str',
        'reporting_mgr': 'str',
        'team': 'str',
        'recruiter_name': 'str',
        'state': 'str',
        'job_employment_type': 'str',
        'form_id': 'str',
        'department_name': 'str',
        'drug_test': 'str',
        'form_type': 'str',
        'verify_reg': 'bool',
        'time_in_company': 'str',
        'phone_number': 'str',
        'employee_status': 'str',
        'erm_hire_date': 'str',
        'office_location': 'str',
        'secondary_email': 'str',
        'designation': 'str',
        'marital_status': 'str'
    }

    attribute_map = {
        'supervisor_name': 'supervisorName',
        'employee_type': 'employee_Type',
        'year_of_graduation': 'YearOfGraduation',
        'birth_date': 'birth_date',
        'employee_id': 'Employee_ID',
        'start_date': 'StartDate',
        'department': 'Department',
        'joining_date': 'JoiningDate',
        'background_check': 'background_check',
        'divison': 'divison',
        'reporting_mgr': 'ReportingMgr',
        'team': 'Team',
        'recruiter_name': 'RecruiterName',
        'state': 'state',
        'job_employment_type': 'jobEmploymentType',
        'form_id': 'formId',
        'department_name': 'departmentName',
        'drug_test': 'DrugTest',
        'form_type': 'formType',
        'verify_reg': 'verifyReg',
        'time_in_company': 'timeInCompany',
        'phone_number': 'phoneNumber',
        'employee_status': 'EmployeeStatus',
        'erm_hire_date': 'erm_hireDate',
        'office_location': 'OfficeLocation',
        'secondary_email': 'SecondaryEmail',
        'designation': 'designation',
        'marital_status': 'maritalStatus'
    }

    def __init__(self, supervisor_name=None, employee_type=None, year_of_graduation=None, birth_date=None, employee_id=None, start_date=None, department=None, joining_date=None, background_check=None, divison=None, reporting_mgr=None, team=None, recruiter_name=None, state=None, job_employment_type=None, form_id=None, department_name=None, drug_test=None, form_type=None, verify_reg=None, time_in_company=None, phone_number=None, employee_status=None, erm_hire_date=None, office_location=None, secondary_email=None, designation=None, marital_status=None):  # noqa: E501
        """CandidateDataCandidateTenantSpecificAdditionalFields - a model defined in Swagger"""  # noqa: E501
        self._supervisor_name = None
        self._employee_type = None
        self._year_of_graduation = None
        self._birth_date = None
        self._employee_id = None
        self._start_date = None
        self._department = None
        self._joining_date = None
        self._background_check = None
        self._divison = None
        self._reporting_mgr = None
        self._team = None
        self._recruiter_name = None
        self._state = None
        self._job_employment_type = None
        self._form_id = None
        self._department_name = None
        self._drug_test = None
        self._form_type = None
        self._verify_reg = None
        self._time_in_company = None
        self._phone_number = None
        self._employee_status = None
        self._erm_hire_date = None
        self._office_location = None
        self._secondary_email = None
        self._designation = None
        self._marital_status = None
        self.discriminator = None
        if supervisor_name is not None:
            self.supervisor_name = supervisor_name
        if employee_type is not None:
            self.employee_type = employee_type
        if year_of_graduation is not None:
            self.year_of_graduation = year_of_graduation
        if birth_date is not None:
            self.birth_date = birth_date
        if employee_id is not None:
            self.employee_id = employee_id
        if start_date is not None:
            self.start_date = start_date
        if department is not None:
            self.department = department
        if joining_date is not None:
            self.joining_date = joining_date
        if background_check is not None:
            self.background_check = background_check
        if divison is not None:
            self.divison = divison
        if reporting_mgr is not None:
            self.reporting_mgr = reporting_mgr
        if team is not None:
            self.team = team
        if recruiter_name is not None:
            self.recruiter_name = recruiter_name
        if state is not None:
            self.state = state
        if job_employment_type is not None:
            self.job_employment_type = job_employment_type
        if form_id is not None:
            self.form_id = form_id
        if department_name is not None:
            self.department_name = department_name
        if drug_test is not None:
            self.drug_test = drug_test
        if form_type is not None:
            self.form_type = form_type
        if verify_reg is not None:
            self.verify_reg = verify_reg
        if time_in_company is not None:
            self.time_in_company = time_in_company
        if phone_number is not None:
            self.phone_number = phone_number
        if employee_status is not None:
            self.employee_status = employee_status
        if erm_hire_date is not None:
            self.erm_hire_date = erm_hire_date
        if office_location is not None:
            self.office_location = office_location
        if secondary_email is not None:
            self.secondary_email = secondary_email
        if designation is not None:
            self.designation = designation
        if marital_status is not None:
            self.marital_status = marital_status

    @property
    def supervisor_name(self):
        """Gets the supervisor_name of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The supervisor_name of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._supervisor_name

    @supervisor_name.setter
    def supervisor_name(self, supervisor_name):
        """Sets the supervisor_name of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param supervisor_name: The supervisor_name of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._supervisor_name = supervisor_name

    @property
    def employee_type(self):
        """Gets the employee_type of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The employee_type of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._employee_type

    @employee_type.setter
    def employee_type(self, employee_type):
        """Sets the employee_type of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param employee_type: The employee_type of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._employee_type = employee_type

    @property
    def year_of_graduation(self):
        """Gets the year_of_graduation of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The year_of_graduation of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._year_of_graduation

    @year_of_graduation.setter
    def year_of_graduation(self, year_of_graduation):
        """Sets the year_of_graduation of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param year_of_graduation: The year_of_graduation of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._year_of_graduation = year_of_graduation

    @property
    def birth_date(self):
        """Gets the birth_date of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The birth_date of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: float
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param birth_date: The birth_date of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: float
        """

        self._birth_date = birth_date

    @property
    def employee_id(self):
        """Gets the employee_id of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The employee_id of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param employee_id: The employee_id of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._employee_id = employee_id

    @property
    def start_date(self):
        """Gets the start_date of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The start_date of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: float
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param start_date: The start_date of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: float
        """

        self._start_date = start_date

    @property
    def department(self):
        """Gets the department of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The department of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param department: The department of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def joining_date(self):
        """Gets the joining_date of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The joining_date of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: float
        """
        return self._joining_date

    @joining_date.setter
    def joining_date(self, joining_date):
        """Sets the joining_date of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param joining_date: The joining_date of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: float
        """

        self._joining_date = joining_date

    @property
    def background_check(self):
        """Gets the background_check of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The background_check of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._background_check

    @background_check.setter
    def background_check(self, background_check):
        """Sets the background_check of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param background_check: The background_check of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._background_check = background_check

    @property
    def divison(self):
        """Gets the divison of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The divison of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._divison

    @divison.setter
    def divison(self, divison):
        """Sets the divison of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param divison: The divison of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._divison = divison

    @property
    def reporting_mgr(self):
        """Gets the reporting_mgr of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The reporting_mgr of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._reporting_mgr

    @reporting_mgr.setter
    def reporting_mgr(self, reporting_mgr):
        """Sets the reporting_mgr of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param reporting_mgr: The reporting_mgr of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._reporting_mgr = reporting_mgr

    @property
    def team(self):
        """Gets the team of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The team of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param team: The team of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def recruiter_name(self):
        """Gets the recruiter_name of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The recruiter_name of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_name

    @recruiter_name.setter
    def recruiter_name(self, recruiter_name):
        """Sets the recruiter_name of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param recruiter_name: The recruiter_name of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._recruiter_name = recruiter_name

    @property
    def state(self):
        """Gets the state of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The state of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param state: The state of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def job_employment_type(self):
        """Gets the job_employment_type of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The job_employment_type of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._job_employment_type

    @job_employment_type.setter
    def job_employment_type(self, job_employment_type):
        """Sets the job_employment_type of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param job_employment_type: The job_employment_type of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._job_employment_type = job_employment_type

    @property
    def form_id(self):
        """Gets the form_id of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The form_id of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._form_id

    @form_id.setter
    def form_id(self, form_id):
        """Sets the form_id of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param form_id: The form_id of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._form_id = form_id

    @property
    def department_name(self):
        """Gets the department_name of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The department_name of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._department_name

    @department_name.setter
    def department_name(self, department_name):
        """Sets the department_name of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param department_name: The department_name of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._department_name = department_name

    @property
    def drug_test(self):
        """Gets the drug_test of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The drug_test of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._drug_test

    @drug_test.setter
    def drug_test(self, drug_test):
        """Sets the drug_test of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param drug_test: The drug_test of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._drug_test = drug_test

    @property
    def form_type(self):
        """Gets the form_type of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The form_type of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._form_type

    @form_type.setter
    def form_type(self, form_type):
        """Sets the form_type of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param form_type: The form_type of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._form_type = form_type

    @property
    def verify_reg(self):
        """Gets the verify_reg of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The verify_reg of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: bool
        """
        return self._verify_reg

    @verify_reg.setter
    def verify_reg(self, verify_reg):
        """Sets the verify_reg of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param verify_reg: The verify_reg of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: bool
        """

        self._verify_reg = verify_reg

    @property
    def time_in_company(self):
        """Gets the time_in_company of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The time_in_company of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._time_in_company

    @time_in_company.setter
    def time_in_company(self, time_in_company):
        """Sets the time_in_company of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param time_in_company: The time_in_company of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._time_in_company = time_in_company

    @property
    def phone_number(self):
        """Gets the phone_number of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The phone_number of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param phone_number: The phone_number of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def employee_status(self):
        """Gets the employee_status of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The employee_status of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._employee_status

    @employee_status.setter
    def employee_status(self, employee_status):
        """Sets the employee_status of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param employee_status: The employee_status of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._employee_status = employee_status

    @property
    def erm_hire_date(self):
        """Gets the erm_hire_date of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The erm_hire_date of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._erm_hire_date

    @erm_hire_date.setter
    def erm_hire_date(self, erm_hire_date):
        """Sets the erm_hire_date of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param erm_hire_date: The erm_hire_date of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._erm_hire_date = erm_hire_date

    @property
    def office_location(self):
        """Gets the office_location of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The office_location of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._office_location

    @office_location.setter
    def office_location(self, office_location):
        """Sets the office_location of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param office_location: The office_location of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._office_location = office_location

    @property
    def secondary_email(self):
        """Gets the secondary_email of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The secondary_email of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._secondary_email

    @secondary_email.setter
    def secondary_email(self, secondary_email):
        """Sets the secondary_email of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param secondary_email: The secondary_email of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._secondary_email = secondary_email

    @property
    def designation(self):
        """Gets the designation of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The designation of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param designation: The designation of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._designation = designation

    @property
    def marital_status(self):
        """Gets the marital_status of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501


        :return: The marital_status of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this CandidateDataCandidateTenantSpecificAdditionalFields.


        :param marital_status: The marital_status of this CandidateDataCandidateTenantSpecificAdditionalFields.  # noqa: E501
        :type: str
        """

        self._marital_status = marital_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateDataCandidateTenantSpecificAdditionalFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateDataCandidateTenantSpecificAdditionalFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
