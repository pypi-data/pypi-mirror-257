# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateDataCandidateCandidateScore(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scored_by': 'str',
        'movers_probability': 'str',
        'candidate_score': 'str',
        'profile_freshness_days': 'str',
        'willingtorelocate': 'str',
        'profile_updated_date': 'str',
        'movers_label': 'str',
        'job_id': 'str'
    }

    attribute_map = {
        'scored_by': 'scoredBy',
        'movers_probability': 'moversProbability',
        'candidate_score': 'candidateScore',
        'profile_freshness_days': 'profileFreshnessDays',
        'willingtorelocate': 'willingtorelocate',
        'profile_updated_date': 'profileUpdatedDate',
        'movers_label': 'moversLabel',
        'job_id': 'jobId'
    }

    def __init__(self, scored_by=None, movers_probability=None, candidate_score=None, profile_freshness_days=None, willingtorelocate=None, profile_updated_date=None, movers_label=None, job_id=None):  # noqa: E501
        """CandidateDataCandidateCandidateScore - a model defined in Swagger"""  # noqa: E501
        self._scored_by = None
        self._movers_probability = None
        self._candidate_score = None
        self._profile_freshness_days = None
        self._willingtorelocate = None
        self._profile_updated_date = None
        self._movers_label = None
        self._job_id = None
        self.discriminator = None
        if scored_by is not None:
            self.scored_by = scored_by
        if movers_probability is not None:
            self.movers_probability = movers_probability
        if candidate_score is not None:
            self.candidate_score = candidate_score
        if profile_freshness_days is not None:
            self.profile_freshness_days = profile_freshness_days
        if willingtorelocate is not None:
            self.willingtorelocate = willingtorelocate
        if profile_updated_date is not None:
            self.profile_updated_date = profile_updated_date
        if movers_label is not None:
            self.movers_label = movers_label
        if job_id is not None:
            self.job_id = job_id

    @property
    def scored_by(self):
        """Gets the scored_by of this CandidateDataCandidateCandidateScore.  # noqa: E501


        :return: The scored_by of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :rtype: str
        """
        return self._scored_by

    @scored_by.setter
    def scored_by(self, scored_by):
        """Sets the scored_by of this CandidateDataCandidateCandidateScore.


        :param scored_by: The scored_by of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :type: str
        """

        self._scored_by = scored_by

    @property
    def movers_probability(self):
        """Gets the movers_probability of this CandidateDataCandidateCandidateScore.  # noqa: E501


        :return: The movers_probability of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :rtype: str
        """
        return self._movers_probability

    @movers_probability.setter
    def movers_probability(self, movers_probability):
        """Sets the movers_probability of this CandidateDataCandidateCandidateScore.


        :param movers_probability: The movers_probability of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :type: str
        """

        self._movers_probability = movers_probability

    @property
    def candidate_score(self):
        """Gets the candidate_score of this CandidateDataCandidateCandidateScore.  # noqa: E501


        :return: The candidate_score of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :rtype: str
        """
        return self._candidate_score

    @candidate_score.setter
    def candidate_score(self, candidate_score):
        """Sets the candidate_score of this CandidateDataCandidateCandidateScore.


        :param candidate_score: The candidate_score of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :type: str
        """

        self._candidate_score = candidate_score

    @property
    def profile_freshness_days(self):
        """Gets the profile_freshness_days of this CandidateDataCandidateCandidateScore.  # noqa: E501


        :return: The profile_freshness_days of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :rtype: str
        """
        return self._profile_freshness_days

    @profile_freshness_days.setter
    def profile_freshness_days(self, profile_freshness_days):
        """Sets the profile_freshness_days of this CandidateDataCandidateCandidateScore.


        :param profile_freshness_days: The profile_freshness_days of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :type: str
        """

        self._profile_freshness_days = profile_freshness_days

    @property
    def willingtorelocate(self):
        """Gets the willingtorelocate of this CandidateDataCandidateCandidateScore.  # noqa: E501


        :return: The willingtorelocate of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :rtype: str
        """
        return self._willingtorelocate

    @willingtorelocate.setter
    def willingtorelocate(self, willingtorelocate):
        """Sets the willingtorelocate of this CandidateDataCandidateCandidateScore.


        :param willingtorelocate: The willingtorelocate of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :type: str
        """

        self._willingtorelocate = willingtorelocate

    @property
    def profile_updated_date(self):
        """Gets the profile_updated_date of this CandidateDataCandidateCandidateScore.  # noqa: E501


        :return: The profile_updated_date of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :rtype: str
        """
        return self._profile_updated_date

    @profile_updated_date.setter
    def profile_updated_date(self, profile_updated_date):
        """Sets the profile_updated_date of this CandidateDataCandidateCandidateScore.


        :param profile_updated_date: The profile_updated_date of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :type: str
        """

        self._profile_updated_date = profile_updated_date

    @property
    def movers_label(self):
        """Gets the movers_label of this CandidateDataCandidateCandidateScore.  # noqa: E501


        :return: The movers_label of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :rtype: str
        """
        return self._movers_label

    @movers_label.setter
    def movers_label(self, movers_label):
        """Sets the movers_label of this CandidateDataCandidateCandidateScore.


        :param movers_label: The movers_label of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :type: str
        """

        self._movers_label = movers_label

    @property
    def job_id(self):
        """Gets the job_id of this CandidateDataCandidateCandidateScore.  # noqa: E501


        :return: The job_id of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this CandidateDataCandidateCandidateScore.


        :param job_id: The job_id of this CandidateDataCandidateCandidateScore.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateDataCandidateCandidateScore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateDataCandidateCandidateScore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
