# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CertificationDataCertifications(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'certification_number': 'str',
        '_date': 'float',
        'field_id': 'str',
        'state': 'str',
        'institute': 'str',
        'description': 'str',
        'url': 'str',
        'start_date': 'float',
        'issued_date': 'AwardDataAwardedOn',
        'expiry_date': 'AwardDataAwardedOn',
        'source': 'str',
        'priority': 'float'
    }

    attribute_map = {
        'name': 'name',
        'certification_number': 'certificationNumber',
        '_date': 'date',
        'field_id': 'fieldID',
        'state': 'state',
        'institute': 'institute',
        'description': 'description',
        'url': 'url',
        'start_date': 'startDate',
        'issued_date': 'issuedDate',
        'expiry_date': 'expiryDate',
        'source': 'source',
        'priority': 'priority'
    }

    def __init__(self, name=None, certification_number=None, _date=None, field_id=None, state=None, institute=None, description=None, url=None, start_date=None, issued_date=None, expiry_date=None, source=None, priority=None):  # noqa: E501
        """CertificationDataCertifications - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._certification_number = None
        self.__date = None
        self._field_id = None
        self._state = None
        self._institute = None
        self._description = None
        self._url = None
        self._start_date = None
        self._issued_date = None
        self._expiry_date = None
        self._source = None
        self._priority = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if certification_number is not None:
            self.certification_number = certification_number
        if _date is not None:
            self._date = _date
        if field_id is not None:
            self.field_id = field_id
        if state is not None:
            self.state = state
        if institute is not None:
            self.institute = institute
        if description is not None:
            self.description = description
        if url is not None:
            self.url = url
        if start_date is not None:
            self.start_date = start_date
        if issued_date is not None:
            self.issued_date = issued_date
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if source is not None:
            self.source = source
        if priority is not None:
            self.priority = priority

    @property
    def name(self):
        """Gets the name of this CertificationDataCertifications.  # noqa: E501


        :return: The name of this CertificationDataCertifications.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CertificationDataCertifications.


        :param name: The name of this CertificationDataCertifications.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def certification_number(self):
        """Gets the certification_number of this CertificationDataCertifications.  # noqa: E501


        :return: The certification_number of this CertificationDataCertifications.  # noqa: E501
        :rtype: str
        """
        return self._certification_number

    @certification_number.setter
    def certification_number(self, certification_number):
        """Sets the certification_number of this CertificationDataCertifications.


        :param certification_number: The certification_number of this CertificationDataCertifications.  # noqa: E501
        :type: str
        """

        self._certification_number = certification_number

    @property
    def _date(self):
        """Gets the _date of this CertificationDataCertifications.  # noqa: E501


        :return: The _date of this CertificationDataCertifications.  # noqa: E501
        :rtype: float
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CertificationDataCertifications.


        :param _date: The _date of this CertificationDataCertifications.  # noqa: E501
        :type: float
        """

        self.__date = _date

    @property
    def field_id(self):
        """Gets the field_id of this CertificationDataCertifications.  # noqa: E501


        :return: The field_id of this CertificationDataCertifications.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this CertificationDataCertifications.


        :param field_id: The field_id of this CertificationDataCertifications.  # noqa: E501
        :type: str
        """

        self._field_id = field_id

    @property
    def state(self):
        """Gets the state of this CertificationDataCertifications.  # noqa: E501


        :return: The state of this CertificationDataCertifications.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CertificationDataCertifications.


        :param state: The state of this CertificationDataCertifications.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def institute(self):
        """Gets the institute of this CertificationDataCertifications.  # noqa: E501


        :return: The institute of this CertificationDataCertifications.  # noqa: E501
        :rtype: str
        """
        return self._institute

    @institute.setter
    def institute(self, institute):
        """Sets the institute of this CertificationDataCertifications.


        :param institute: The institute of this CertificationDataCertifications.  # noqa: E501
        :type: str
        """

        self._institute = institute

    @property
    def description(self):
        """Gets the description of this CertificationDataCertifications.  # noqa: E501


        :return: The description of this CertificationDataCertifications.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CertificationDataCertifications.


        :param description: The description of this CertificationDataCertifications.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def url(self):
        """Gets the url of this CertificationDataCertifications.  # noqa: E501


        :return: The url of this CertificationDataCertifications.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CertificationDataCertifications.


        :param url: The url of this CertificationDataCertifications.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def start_date(self):
        """Gets the start_date of this CertificationDataCertifications.  # noqa: E501


        :return: The start_date of this CertificationDataCertifications.  # noqa: E501
        :rtype: float
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CertificationDataCertifications.


        :param start_date: The start_date of this CertificationDataCertifications.  # noqa: E501
        :type: float
        """

        self._start_date = start_date

    @property
    def issued_date(self):
        """Gets the issued_date of this CertificationDataCertifications.  # noqa: E501


        :return: The issued_date of this CertificationDataCertifications.  # noqa: E501
        :rtype: AwardDataAwardedOn
        """
        return self._issued_date

    @issued_date.setter
    def issued_date(self, issued_date):
        """Sets the issued_date of this CertificationDataCertifications.


        :param issued_date: The issued_date of this CertificationDataCertifications.  # noqa: E501
        :type: AwardDataAwardedOn
        """

        self._issued_date = issued_date

    @property
    def expiry_date(self):
        """Gets the expiry_date of this CertificationDataCertifications.  # noqa: E501


        :return: The expiry_date of this CertificationDataCertifications.  # noqa: E501
        :rtype: AwardDataAwardedOn
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this CertificationDataCertifications.


        :param expiry_date: The expiry_date of this CertificationDataCertifications.  # noqa: E501
        :type: AwardDataAwardedOn
        """

        self._expiry_date = expiry_date

    @property
    def source(self):
        """Gets the source of this CertificationDataCertifications.  # noqa: E501


        :return: The source of this CertificationDataCertifications.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CertificationDataCertifications.


        :param source: The source of this CertificationDataCertifications.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def priority(self):
        """Gets the priority of this CertificationDataCertifications.  # noqa: E501


        :return: The priority of this CertificationDataCertifications.  # noqa: E501
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CertificationDataCertifications.


        :param priority: The priority of this CertificationDataCertifications.  # noqa: E501
        :type: float
        """

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificationDataCertifications, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificationDataCertifications):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
