# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phenom.commons.api_client import ApiClient


class CandidatesApi(object):
    base_path = "/candidates-api"  # your base path

    def __init__(self, token, gateway_url, apikey, api_client=None):
        if api_client is None:
            api_client = ApiClient(gateway_url + self.base_path, apikey, token)
        self.api_client = api_client

    def create_candidate(self, body, x_ph_user_id, **kwargs):  # noqa: E501
        """Creates candidate profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_candidate(body, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCandidateRequest body: Candidate profile created successfully (required)
        :param str x_ph_user_id: (required)
        :return: CandidateCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_candidate_with_http_info(body, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_candidate_with_http_info(body, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def create_candidate_with_http_info(self, body, x_ph_user_id, **kwargs):  # noqa: E501
        """Creates candidate profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_candidate_with_http_info(body, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCandidateRequest body: Candidate profile created successfully (required)
        :param str x_ph_user_id: (required)
        :return: CandidateCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_candidate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_candidate`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `create_candidate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CandidateCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_candidate_attachments(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """delete attachments on candidate profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_candidate_attachments(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttachmentDelete body: delete candidate attachments (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_candidate_attachments_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_candidate_attachments_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
            return data

    def delete_candidate_attachments_with_http_info(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """delete attachments on candidate profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_candidate_attachments_with_http_info(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttachmentDelete body: delete candidate attachments (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_user_id', 'candidate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_candidate_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_candidate_attachments`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `delete_candidate_attachments`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `delete_candidate_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/attachments', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Success',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_candidate_profile(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """deletes the candidate profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_candidate_profile(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_candidate_profile_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_candidate_profile_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def delete_candidate_profile_with_http_info(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """deletes the candidate profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_candidate_profile_with_http_info(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_candidate_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `delete_candidate_profile`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `delete_candidate_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Success',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_attachment(self, candidate_id, attachment_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Download the file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_attachment(candidate_id, attachment_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: Candidate's userId (required)
        :param str attachment_id: Id of the attachment (required)
        :param str x_ph_user_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_attachment_with_http_info(candidate_id, attachment_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_attachment_with_http_info(candidate_id, attachment_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def download_attachment_with_http_info(self, candidate_id, attachment_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Download the file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_attachment_with_http_info(candidate_id, attachment_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: Candidate's userId (required)
        :param str attachment_id: Id of the attachment (required)
        :param str x_ph_user_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'attachment_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_attachment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `download_attachment`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if ('attachment_id' not in params or
                params['attachment_id'] is None):
            raise ValueError("Missing the required parameter `attachment_id` when calling `download_attachment`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `download_attachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachmentId'] = params['attachment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/attachments/{attachmentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_candidate(self, x_ph_user_id, **kwargs):  # noqa: E501
        """Get Candidate Profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate(x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_user_id: (required)
        :param str candidate_id:
        :param str email:
        :param str ats_id:
        :param str im_profile_id:
        :param str linked_in_profile_url:
        :return: Candidate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_candidate_with_http_info(x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_candidate_with_http_info(x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def get_candidate_with_http_info(self, x_ph_user_id, **kwargs):  # noqa: E501
        """Get Candidate Profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_with_http_info(x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_user_id: (required)
        :param str candidate_id:
        :param str email:
        :param str ats_id:
        :param str im_profile_id:
        :param str linked_in_profile_url:
        :return: Candidate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ph_user_id', 'candidate_id', 'email', 'ats_id', 'im_profile_id', 'linked_in_profile_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_candidate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_candidate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'candidate_id' in params:
            query_params.append(('candidateId', params['candidate_id']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'ats_id' in params:
            query_params.append(('atsId', params['ats_id']))  # noqa: E501
        if 'im_profile_id' in params:
            query_params.append(('imProfileId', params['im_profile_id']))  # noqa: E501
        if 'linked_in_profile_url' in params:
            query_params.append(('linkedInProfileUrl', params['linked_in_profile_url']))  # noqa: E501

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Candidate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_candidate_address(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches address of candidate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_address(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Address
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_candidate_address_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_candidate_address_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def get_candidate_address_with_http_info(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches address of candidate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_address_with_http_info(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Address
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_candidate_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_candidate_address`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_candidate_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Address',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_candidate_attachments(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Get Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_attachments(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Attachment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_candidate_attachments_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_candidate_attachments_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def get_candidate_attachments_with_http_info(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Get Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_attachments_with_http_info(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Attachment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_candidate_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_candidate_attachments`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_candidate_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Attachment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_candidate_awards(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches candidate awards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_awards(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Award
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_candidate_awards_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_candidate_awards_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def get_candidate_awards_with_http_info(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches candidate awards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_awards_with_http_info(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Award
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_candidate_awards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_candidate_awards`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_candidate_awards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/awards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Award',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_candidate_certifications(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches candidate certifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_certifications(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Certification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_candidate_certifications_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_candidate_certifications_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def get_candidate_certifications_with_http_info(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches candidate certifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_certifications_with_http_info(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Certification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_candidate_certifications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_candidate_certifications`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_candidate_certifications`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/certifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Certification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_candidate_education(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Get Educations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_education(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Education
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_candidate_education_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_candidate_education_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def get_candidate_education_with_http_info(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Get Educations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_education_with_http_info(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Education
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_candidate_education" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_candidate_education`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_candidate_education`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/educations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Education',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_candidate_experience(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Get Experiences  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_experience(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Experience
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_candidate_experience_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_candidate_experience_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def get_candidate_experience_with_http_info(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Get Experiences  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_experience_with_http_info(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Experience
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_candidate_experience" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_candidate_experience`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_candidate_experience`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/experiences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Experience',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_candidate_preferred_locations(self, candidate_id, x_ph_userid, **kwargs):  # noqa: E501
        """Fetches candidate preferred locations for a job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_preferred_locations(candidate_id, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_userid: (required)
        :return: PreferredLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_candidate_preferred_locations_with_http_info(candidate_id, x_ph_userid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_candidate_preferred_locations_with_http_info(candidate_id, x_ph_userid, **kwargs)  # noqa: E501
            return data

    def get_candidate_preferred_locations_with_http_info(self, candidate_id, x_ph_userid, **kwargs):  # noqa: E501
        """Fetches candidate preferred locations for a job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_preferred_locations_with_http_info(candidate_id, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_userid: (required)
        :return: PreferredLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_candidate_preferred_locations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_candidate_preferred_locations`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `get_candidate_preferred_locations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/preferred-locations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PreferredLocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_candidate_recommendations(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches recommendations of candidate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_recommendations(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Recommendations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_candidate_recommendations_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_candidate_recommendations_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def get_candidate_recommendations_with_http_info(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches recommendations of candidate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_recommendations_with_http_info(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Recommendations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_candidate_recommendations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_candidate_recommendations`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_candidate_recommendations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/recommendations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Recommendations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_candidate_skills(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches candidate skills  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_skills(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Skills
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_candidate_skills_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_candidate_skills_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def get_candidate_skills_with_http_info(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches candidate skills  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_skills_with_http_info(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: Skills
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_candidate_skills" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_candidate_skills`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_candidate_skills`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/skills', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Skills',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_profile_action_activities(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches profile action activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_action_activities(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: ProfileActionActivities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_profile_action_activities_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_profile_action_activities_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def get_profile_action_activities_with_http_info(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches profile action activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_action_activities_with_http_info(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: ProfileActionActivities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profile_action_activities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_profile_action_activities`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_profile_action_activities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/profile-action-activities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileActionActivities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_profile_update_activities(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches profile update activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_update_activities(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: ProfileUpdateActivities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_profile_update_activities_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_profile_update_activities_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def get_profile_update_activities_with_http_info(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches profile update activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_update_activities_with_http_info(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: ProfileUpdateActivities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profile_update_activities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_profile_update_activities`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_profile_update_activities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/profile-update-activities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileUpdateActivities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tenant_specific_additional_fields(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches tenant specific additional fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenant_specific_additional_fields(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: AdditionalFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tenant_specific_additional_fields_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tenant_specific_additional_fields_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def get_tenant_specific_additional_fields_with_http_info(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Fetches tenant specific additional fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenant_specific_additional_fields_with_http_info(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: AdditionalFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tenant_specific_additional_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_tenant_specific_additional_fields`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_tenant_specific_additional_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/additional-fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdditionalFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_candidate_address(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Updates address of candidate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_address(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAddress body: update address of candidate (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_candidate_address_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_candidate_address_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
            return data

    def update_candidate_address_with_http_info(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Updates address of candidate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_address_with_http_info(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAddress body: update address of candidate (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_user_id', 'candidate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_candidate_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_candidate_address`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `update_candidate_address`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `update_candidate_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/address', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Success',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_candidate_attachments(self, body, x_ph_userid, candidate_id, **kwargs):  # noqa: E501
        """To update candidate attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_attachments(body, x_ph_userid, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddAttachments body: add attachments to a candidate (required)
        :param str x_ph_userid: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_candidate_attachments_with_http_info(body, x_ph_userid, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_candidate_attachments_with_http_info(body, x_ph_userid, candidate_id, **kwargs)  # noqa: E501
            return data

    def update_candidate_attachments_with_http_info(self, body, x_ph_userid, candidate_id, **kwargs):  # noqa: E501
        """To update candidate attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_attachments_with_http_info(body, x_ph_userid, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddAttachments body: add attachments to a candidate (required)
        :param str x_ph_userid: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_userid', 'candidate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_candidate_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_candidate_attachments`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `update_candidate_attachments`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `update_candidate_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/attachments', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Success',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_candidate_awards(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Updates candidate awards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_awards(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddAwards body: add/update awards of a candidate (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Award
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_candidate_awards_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_candidate_awards_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
            return data

    def update_candidate_awards_with_http_info(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Updates candidate awards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_awards_with_http_info(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddAwards body: add/update awards of a candidate (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Award
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_user_id', 'candidate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_candidate_awards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_candidate_awards`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `update_candidate_awards`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `update_candidate_awards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/awards', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Award',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_candidate_certifications(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Updates candidate certifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_certifications(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddCertification body: add/update certifications of a candidate (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_candidate_certifications_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_candidate_certifications_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
            return data

    def update_candidate_certifications_with_http_info(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Updates candidate certifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_certifications_with_http_info(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddCertification body: add/update certifications of a candidate (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_user_id', 'candidate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_candidate_certifications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_candidate_certifications`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `update_candidate_certifications`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `update_candidate_certifications`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/certifications', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Success',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_candidate_education(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Updates the candidate education details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_education(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOrUpdateEducation body: add/update education of a candidate (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_candidate_education_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_candidate_education_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
            return data

    def update_candidate_education_with_http_info(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Updates the candidate education details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_education_with_http_info(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOrUpdateEducation body: add/update education of a candidate (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_user_id', 'candidate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_candidate_education" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_candidate_education`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `update_candidate_education`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `update_candidate_education`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/educations', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Success',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_candidate_experience(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Updates the candidate experience details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_experience(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOrUpdateExperience body: add/update experiences of a candidate (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_candidate_experience_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_candidate_experience_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
            return data

    def update_candidate_experience_with_http_info(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Updates the candidate experience details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_experience_with_http_info(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOrUpdateExperience body: add/update experiences of a candidate (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_user_id', 'candidate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_candidate_experience" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_candidate_experience`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `update_candidate_experience`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `update_candidate_experience`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/experiences', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Success',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_candidate_preferred_locations(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Updates candidate preferred locations for a job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_preferred_locations(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdatePreferredLocation body: update preferred locations on candidate profile (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_candidate_preferred_locations_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_candidate_preferred_locations_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
            return data

    def update_candidate_preferred_locations_with_http_info(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Updates candidate preferred locations for a job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_preferred_locations_with_http_info(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdatePreferredLocation body: update preferred locations on candidate profile (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_user_id', 'candidate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_candidate_preferred_locations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_candidate_preferred_locations`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `update_candidate_preferred_locations`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `update_candidate_preferred_locations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/preferred-locations', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Success',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_candidate_profile(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """updates the candidate profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_profile(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCandidateRequest body: update candidate profile (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_candidate_profile_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_candidate_profile_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
            return data

    def update_candidate_profile_with_http_info(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """updates the candidate profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_profile_with_http_info(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCandidateRequest body: update candidate profile (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_user_id', 'candidate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_candidate_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_candidate_profile`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `update_candidate_profile`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `update_candidate_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Success',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_candidate_recommendations(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Updates recommendations of candidate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_recommendations(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateRecommendations body: update recommendations of candidate (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_candidate_recommendations_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_candidate_recommendations_with_http_info(body, x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
            return data

    def update_candidate_recommendations_with_http_info(self, body, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Updates recommendations of candidate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_recommendations_with_http_info(body, x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateRecommendations body: update recommendations of candidate (required)
        :param str x_ph_user_id: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_user_id', 'candidate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_candidate_recommendations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_candidate_recommendations`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `update_candidate_recommendations`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `update_candidate_recommendations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/recommendations', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Success',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_candidate_skills(self, body, x_ph_userid, candidate_id, **kwargs):  # noqa: E501
        """Updates candidate skills  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_skills(body, x_ph_userid, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddSkills body: add/update skills of a candidate (required)
        :param str x_ph_userid: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_candidate_skills_with_http_info(body, x_ph_userid, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_candidate_skills_with_http_info(body, x_ph_userid, candidate_id, **kwargs)  # noqa: E501
            return data

    def update_candidate_skills_with_http_info(self, body, x_ph_userid, candidate_id, **kwargs):  # noqa: E501
        """Updates candidate skills  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_candidate_skills_with_http_info(body, x_ph_userid, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddSkills body: add/update skills of a candidate (required)
        :param str x_ph_userid: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_userid', 'candidate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_candidate_skills" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_candidate_skills`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `update_candidate_skills`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `update_candidate_skills`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/skills', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Success',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tenant_specific_additional_fields(self, body, x_ph_userid, candidate_id, **kwargs):  # noqa: E501
        """Updates tenant specific additional fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tenant_specific_additional_fields(body, x_ph_userid, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTenantSpecificAdditionalFields body: update tenant specific additional fields of a candidate (required)
        :param str x_ph_userid: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_tenant_specific_additional_fields_with_http_info(body, x_ph_userid, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_tenant_specific_additional_fields_with_http_info(body, x_ph_userid, candidate_id, **kwargs)  # noqa: E501
            return data

    def update_tenant_specific_additional_fields_with_http_info(self, body, x_ph_userid, candidate_id, **kwargs):  # noqa: E501
        """Updates tenant specific additional fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tenant_specific_additional_fields_with_http_info(body, x_ph_userid, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTenantSpecificAdditionalFields body: update tenant specific additional fields of a candidate (required)
        :param str x_ph_userid: (required)
        :param str candidate_id: Id of the candidate (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_userid', 'candidate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tenant_specific_additional_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_tenant_specific_additional_fields`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `update_tenant_specific_additional_fields`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `update_tenant_specific_additional_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/additional-fields', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Success',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
