# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class UpdateAddressLocationIp(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_address': 'str',
        'city': 'str',
        'country': 'str',
        'continent_name': 'str',
        'continent_code': 'str',
        'time_zone': 'str',
        'latitude': 'str',
        'longitude': 'str',
        'postal_code': 'str',
        'country_iso_code': 'str',
        'registered_country': 'str',
        'registered_country_iso_code': 'str',
        'sub_divisions': 'str',
        'sub_divisions_iso_code': 'str'
    }

    attribute_map = {
        'ip_address': 'ipAddress',
        'city': 'city',
        'country': 'country',
        'continent_name': 'continentName',
        'continent_code': 'continentCode',
        'time_zone': 'timeZone',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'postal_code': 'postalCode',
        'country_iso_code': 'countryIsoCode',
        'registered_country': 'registeredCountry',
        'registered_country_iso_code': 'registeredCountryIsoCode',
        'sub_divisions': 'subDivisions',
        'sub_divisions_iso_code': 'subDivisionsIsoCode'
    }

    def __init__(self, ip_address=None, city=None, country=None, continent_name=None, continent_code=None, time_zone=None, latitude=None, longitude=None, postal_code=None, country_iso_code=None, registered_country=None, registered_country_iso_code=None, sub_divisions=None, sub_divisions_iso_code=None):  # noqa: E501
        """UpdateAddressLocationIp - a model defined in Swagger"""  # noqa: E501
        self._ip_address = None
        self._city = None
        self._country = None
        self._continent_name = None
        self._continent_code = None
        self._time_zone = None
        self._latitude = None
        self._longitude = None
        self._postal_code = None
        self._country_iso_code = None
        self._registered_country = None
        self._registered_country_iso_code = None
        self._sub_divisions = None
        self._sub_divisions_iso_code = None
        self.discriminator = None
        if ip_address is not None:
            self.ip_address = ip_address
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if continent_name is not None:
            self.continent_name = continent_name
        if continent_code is not None:
            self.continent_code = continent_code
        if time_zone is not None:
            self.time_zone = time_zone
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if postal_code is not None:
            self.postal_code = postal_code
        if country_iso_code is not None:
            self.country_iso_code = country_iso_code
        if registered_country is not None:
            self.registered_country = registered_country
        if registered_country_iso_code is not None:
            self.registered_country_iso_code = registered_country_iso_code
        if sub_divisions is not None:
            self.sub_divisions = sub_divisions
        if sub_divisions_iso_code is not None:
            self.sub_divisions_iso_code = sub_divisions_iso_code

    @property
    def ip_address(self):
        """Gets the ip_address of this UpdateAddressLocationIp.  # noqa: E501


        :return: The ip_address of this UpdateAddressLocationIp.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this UpdateAddressLocationIp.


        :param ip_address: The ip_address of this UpdateAddressLocationIp.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def city(self):
        """Gets the city of this UpdateAddressLocationIp.  # noqa: E501


        :return: The city of this UpdateAddressLocationIp.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this UpdateAddressLocationIp.


        :param city: The city of this UpdateAddressLocationIp.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this UpdateAddressLocationIp.  # noqa: E501


        :return: The country of this UpdateAddressLocationIp.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UpdateAddressLocationIp.


        :param country: The country of this UpdateAddressLocationIp.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def continent_name(self):
        """Gets the continent_name of this UpdateAddressLocationIp.  # noqa: E501


        :return: The continent_name of this UpdateAddressLocationIp.  # noqa: E501
        :rtype: str
        """
        return self._continent_name

    @continent_name.setter
    def continent_name(self, continent_name):
        """Sets the continent_name of this UpdateAddressLocationIp.


        :param continent_name: The continent_name of this UpdateAddressLocationIp.  # noqa: E501
        :type: str
        """

        self._continent_name = continent_name

    @property
    def continent_code(self):
        """Gets the continent_code of this UpdateAddressLocationIp.  # noqa: E501


        :return: The continent_code of this UpdateAddressLocationIp.  # noqa: E501
        :rtype: str
        """
        return self._continent_code

    @continent_code.setter
    def continent_code(self, continent_code):
        """Sets the continent_code of this UpdateAddressLocationIp.


        :param continent_code: The continent_code of this UpdateAddressLocationIp.  # noqa: E501
        :type: str
        """

        self._continent_code = continent_code

    @property
    def time_zone(self):
        """Gets the time_zone of this UpdateAddressLocationIp.  # noqa: E501


        :return: The time_zone of this UpdateAddressLocationIp.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this UpdateAddressLocationIp.


        :param time_zone: The time_zone of this UpdateAddressLocationIp.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def latitude(self):
        """Gets the latitude of this UpdateAddressLocationIp.  # noqa: E501


        :return: The latitude of this UpdateAddressLocationIp.  # noqa: E501
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this UpdateAddressLocationIp.


        :param latitude: The latitude of this UpdateAddressLocationIp.  # noqa: E501
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this UpdateAddressLocationIp.  # noqa: E501


        :return: The longitude of this UpdateAddressLocationIp.  # noqa: E501
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this UpdateAddressLocationIp.


        :param longitude: The longitude of this UpdateAddressLocationIp.  # noqa: E501
        :type: str
        """

        self._longitude = longitude

    @property
    def postal_code(self):
        """Gets the postal_code of this UpdateAddressLocationIp.  # noqa: E501


        :return: The postal_code of this UpdateAddressLocationIp.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this UpdateAddressLocationIp.


        :param postal_code: The postal_code of this UpdateAddressLocationIp.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country_iso_code(self):
        """Gets the country_iso_code of this UpdateAddressLocationIp.  # noqa: E501


        :return: The country_iso_code of this UpdateAddressLocationIp.  # noqa: E501
        :rtype: str
        """
        return self._country_iso_code

    @country_iso_code.setter
    def country_iso_code(self, country_iso_code):
        """Sets the country_iso_code of this UpdateAddressLocationIp.


        :param country_iso_code: The country_iso_code of this UpdateAddressLocationIp.  # noqa: E501
        :type: str
        """

        self._country_iso_code = country_iso_code

    @property
    def registered_country(self):
        """Gets the registered_country of this UpdateAddressLocationIp.  # noqa: E501


        :return: The registered_country of this UpdateAddressLocationIp.  # noqa: E501
        :rtype: str
        """
        return self._registered_country

    @registered_country.setter
    def registered_country(self, registered_country):
        """Sets the registered_country of this UpdateAddressLocationIp.


        :param registered_country: The registered_country of this UpdateAddressLocationIp.  # noqa: E501
        :type: str
        """

        self._registered_country = registered_country

    @property
    def registered_country_iso_code(self):
        """Gets the registered_country_iso_code of this UpdateAddressLocationIp.  # noqa: E501


        :return: The registered_country_iso_code of this UpdateAddressLocationIp.  # noqa: E501
        :rtype: str
        """
        return self._registered_country_iso_code

    @registered_country_iso_code.setter
    def registered_country_iso_code(self, registered_country_iso_code):
        """Sets the registered_country_iso_code of this UpdateAddressLocationIp.


        :param registered_country_iso_code: The registered_country_iso_code of this UpdateAddressLocationIp.  # noqa: E501
        :type: str
        """

        self._registered_country_iso_code = registered_country_iso_code

    @property
    def sub_divisions(self):
        """Gets the sub_divisions of this UpdateAddressLocationIp.  # noqa: E501


        :return: The sub_divisions of this UpdateAddressLocationIp.  # noqa: E501
        :rtype: str
        """
        return self._sub_divisions

    @sub_divisions.setter
    def sub_divisions(self, sub_divisions):
        """Sets the sub_divisions of this UpdateAddressLocationIp.


        :param sub_divisions: The sub_divisions of this UpdateAddressLocationIp.  # noqa: E501
        :type: str
        """

        self._sub_divisions = sub_divisions

    @property
    def sub_divisions_iso_code(self):
        """Gets the sub_divisions_iso_code of this UpdateAddressLocationIp.  # noqa: E501


        :return: The sub_divisions_iso_code of this UpdateAddressLocationIp.  # noqa: E501
        :rtype: str
        """
        return self._sub_divisions_iso_code

    @sub_divisions_iso_code.setter
    def sub_divisions_iso_code(self, sub_divisions_iso_code):
        """Sets the sub_divisions_iso_code of this UpdateAddressLocationIp.


        :param sub_divisions_iso_code: The sub_divisions_iso_code of this UpdateAddressLocationIp.  # noqa: E501
        :type: str
        """

        self._sub_divisions_iso_code = sub_divisions_iso_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateAddressLocationIp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateAddressLocationIp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
