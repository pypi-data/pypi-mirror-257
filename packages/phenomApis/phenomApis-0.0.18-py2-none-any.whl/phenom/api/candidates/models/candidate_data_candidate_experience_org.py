# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateDataCandidateExperienceOrg(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date': 'float',
        'is_current': 'bool',
        'provided_by_user': 'bool',
        'start_date': 'float',
        'priority': 'float',
        'company_org': 'str',
        'job_title_org': 'str',
        'field_id': 'str',
        'company': 'str',
        'job_summary': 'str',
        'job_title': 'str',
        'job_location': 'str'
    }

    attribute_map = {
        'end_date': 'endDate',
        'is_current': 'isCurrent',
        'provided_by_user': 'providedByUser',
        'start_date': 'startDate',
        'priority': 'priority',
        'company_org': 'company_org',
        'job_title_org': 'jobTitle_org',
        'field_id': 'fieldID',
        'company': 'company',
        'job_summary': 'jobSummary',
        'job_title': 'jobTitle',
        'job_location': 'jobLocation'
    }

    def __init__(self, end_date=None, is_current=None, provided_by_user=None, start_date=None, priority=None, company_org=None, job_title_org=None, field_id=None, company=None, job_summary=None, job_title=None, job_location=None):  # noqa: E501
        """CandidateDataCandidateExperienceOrg - a model defined in Swagger"""  # noqa: E501
        self._end_date = None
        self._is_current = None
        self._provided_by_user = None
        self._start_date = None
        self._priority = None
        self._company_org = None
        self._job_title_org = None
        self._field_id = None
        self._company = None
        self._job_summary = None
        self._job_title = None
        self._job_location = None
        self.discriminator = None
        if end_date is not None:
            self.end_date = end_date
        if is_current is not None:
            self.is_current = is_current
        if provided_by_user is not None:
            self.provided_by_user = provided_by_user
        if start_date is not None:
            self.start_date = start_date
        if priority is not None:
            self.priority = priority
        if company_org is not None:
            self.company_org = company_org
        if job_title_org is not None:
            self.job_title_org = job_title_org
        if field_id is not None:
            self.field_id = field_id
        if company is not None:
            self.company = company
        if job_summary is not None:
            self.job_summary = job_summary
        if job_title is not None:
            self.job_title = job_title
        if job_location is not None:
            self.job_location = job_location

    @property
    def end_date(self):
        """Gets the end_date of this CandidateDataCandidateExperienceOrg.  # noqa: E501


        :return: The end_date of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :rtype: float
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CandidateDataCandidateExperienceOrg.


        :param end_date: The end_date of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :type: float
        """

        self._end_date = end_date

    @property
    def is_current(self):
        """Gets the is_current of this CandidateDataCandidateExperienceOrg.  # noqa: E501


        :return: The is_current of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this CandidateDataCandidateExperienceOrg.


        :param is_current: The is_current of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :type: bool
        """

        self._is_current = is_current

    @property
    def provided_by_user(self):
        """Gets the provided_by_user of this CandidateDataCandidateExperienceOrg.  # noqa: E501


        :return: The provided_by_user of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :rtype: bool
        """
        return self._provided_by_user

    @provided_by_user.setter
    def provided_by_user(self, provided_by_user):
        """Sets the provided_by_user of this CandidateDataCandidateExperienceOrg.


        :param provided_by_user: The provided_by_user of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :type: bool
        """

        self._provided_by_user = provided_by_user

    @property
    def start_date(self):
        """Gets the start_date of this CandidateDataCandidateExperienceOrg.  # noqa: E501


        :return: The start_date of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :rtype: float
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CandidateDataCandidateExperienceOrg.


        :param start_date: The start_date of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :type: float
        """

        self._start_date = start_date

    @property
    def priority(self):
        """Gets the priority of this CandidateDataCandidateExperienceOrg.  # noqa: E501


        :return: The priority of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CandidateDataCandidateExperienceOrg.


        :param priority: The priority of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :type: float
        """

        self._priority = priority

    @property
    def company_org(self):
        """Gets the company_org of this CandidateDataCandidateExperienceOrg.  # noqa: E501


        :return: The company_org of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :rtype: str
        """
        return self._company_org

    @company_org.setter
    def company_org(self, company_org):
        """Sets the company_org of this CandidateDataCandidateExperienceOrg.


        :param company_org: The company_org of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :type: str
        """

        self._company_org = company_org

    @property
    def job_title_org(self):
        """Gets the job_title_org of this CandidateDataCandidateExperienceOrg.  # noqa: E501


        :return: The job_title_org of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :rtype: str
        """
        return self._job_title_org

    @job_title_org.setter
    def job_title_org(self, job_title_org):
        """Sets the job_title_org of this CandidateDataCandidateExperienceOrg.


        :param job_title_org: The job_title_org of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :type: str
        """

        self._job_title_org = job_title_org

    @property
    def field_id(self):
        """Gets the field_id of this CandidateDataCandidateExperienceOrg.  # noqa: E501


        :return: The field_id of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this CandidateDataCandidateExperienceOrg.


        :param field_id: The field_id of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :type: str
        """

        self._field_id = field_id

    @property
    def company(self):
        """Gets the company of this CandidateDataCandidateExperienceOrg.  # noqa: E501


        :return: The company of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CandidateDataCandidateExperienceOrg.


        :param company: The company of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def job_summary(self):
        """Gets the job_summary of this CandidateDataCandidateExperienceOrg.  # noqa: E501


        :return: The job_summary of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :rtype: str
        """
        return self._job_summary

    @job_summary.setter
    def job_summary(self, job_summary):
        """Sets the job_summary of this CandidateDataCandidateExperienceOrg.


        :param job_summary: The job_summary of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :type: str
        """

        self._job_summary = job_summary

    @property
    def job_title(self):
        """Gets the job_title of this CandidateDataCandidateExperienceOrg.  # noqa: E501


        :return: The job_title of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this CandidateDataCandidateExperienceOrg.


        :param job_title: The job_title of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def job_location(self):
        """Gets the job_location of this CandidateDataCandidateExperienceOrg.  # noqa: E501


        :return: The job_location of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :rtype: str
        """
        return self._job_location

    @job_location.setter
    def job_location(self, job_location):
        """Sets the job_location of this CandidateDataCandidateExperienceOrg.


        :param job_location: The job_location of this CandidateDataCandidateExperienceOrg.  # noqa: E501
        :type: str
        """

        self._job_location = job_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateDataCandidateExperienceOrg, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateDataCandidateExperienceOrg):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
