# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateDataCandidateData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parse_type': 'str',
        'parsing_date': 'str',
        'parse_version': 'str',
        'ml_address': 'CandidateDataCandidateDataMlAddress',
        'ml_domain': 'list[str]',
        'ml_jobzone': 'str'
    }

    attribute_map = {
        'parse_type': 'ParseType',
        'parsing_date': 'ParsingDate',
        'parse_version': 'ParseVersion',
        'ml_address': 'ml_address',
        'ml_domain': 'ml_domain',
        'ml_jobzone': 'ml_jobzone'
    }

    def __init__(self, parse_type=None, parsing_date=None, parse_version=None, ml_address=None, ml_domain=None, ml_jobzone=None):  # noqa: E501
        """CandidateDataCandidateData - a model defined in Swagger"""  # noqa: E501
        self._parse_type = None
        self._parsing_date = None
        self._parse_version = None
        self._ml_address = None
        self._ml_domain = None
        self._ml_jobzone = None
        self.discriminator = None
        if parse_type is not None:
            self.parse_type = parse_type
        if parsing_date is not None:
            self.parsing_date = parsing_date
        if parse_version is not None:
            self.parse_version = parse_version
        if ml_address is not None:
            self.ml_address = ml_address
        if ml_domain is not None:
            self.ml_domain = ml_domain
        if ml_jobzone is not None:
            self.ml_jobzone = ml_jobzone

    @property
    def parse_type(self):
        """Gets the parse_type of this CandidateDataCandidateData.  # noqa: E501


        :return: The parse_type of this CandidateDataCandidateData.  # noqa: E501
        :rtype: str
        """
        return self._parse_type

    @parse_type.setter
    def parse_type(self, parse_type):
        """Sets the parse_type of this CandidateDataCandidateData.


        :param parse_type: The parse_type of this CandidateDataCandidateData.  # noqa: E501
        :type: str
        """

        self._parse_type = parse_type

    @property
    def parsing_date(self):
        """Gets the parsing_date of this CandidateDataCandidateData.  # noqa: E501


        :return: The parsing_date of this CandidateDataCandidateData.  # noqa: E501
        :rtype: str
        """
        return self._parsing_date

    @parsing_date.setter
    def parsing_date(self, parsing_date):
        """Sets the parsing_date of this CandidateDataCandidateData.


        :param parsing_date: The parsing_date of this CandidateDataCandidateData.  # noqa: E501
        :type: str
        """

        self._parsing_date = parsing_date

    @property
    def parse_version(self):
        """Gets the parse_version of this CandidateDataCandidateData.  # noqa: E501


        :return: The parse_version of this CandidateDataCandidateData.  # noqa: E501
        :rtype: str
        """
        return self._parse_version

    @parse_version.setter
    def parse_version(self, parse_version):
        """Sets the parse_version of this CandidateDataCandidateData.


        :param parse_version: The parse_version of this CandidateDataCandidateData.  # noqa: E501
        :type: str
        """

        self._parse_version = parse_version

    @property
    def ml_address(self):
        """Gets the ml_address of this CandidateDataCandidateData.  # noqa: E501


        :return: The ml_address of this CandidateDataCandidateData.  # noqa: E501
        :rtype: CandidateDataCandidateDataMlAddress
        """
        return self._ml_address

    @ml_address.setter
    def ml_address(self, ml_address):
        """Sets the ml_address of this CandidateDataCandidateData.


        :param ml_address: The ml_address of this CandidateDataCandidateData.  # noqa: E501
        :type: CandidateDataCandidateDataMlAddress
        """

        self._ml_address = ml_address

    @property
    def ml_domain(self):
        """Gets the ml_domain of this CandidateDataCandidateData.  # noqa: E501


        :return: The ml_domain of this CandidateDataCandidateData.  # noqa: E501
        :rtype: list[str]
        """
        return self._ml_domain

    @ml_domain.setter
    def ml_domain(self, ml_domain):
        """Sets the ml_domain of this CandidateDataCandidateData.


        :param ml_domain: The ml_domain of this CandidateDataCandidateData.  # noqa: E501
        :type: list[str]
        """

        self._ml_domain = ml_domain

    @property
    def ml_jobzone(self):
        """Gets the ml_jobzone of this CandidateDataCandidateData.  # noqa: E501


        :return: The ml_jobzone of this CandidateDataCandidateData.  # noqa: E501
        :rtype: str
        """
        return self._ml_jobzone

    @ml_jobzone.setter
    def ml_jobzone(self, ml_jobzone):
        """Sets the ml_jobzone of this CandidateDataCandidateData.


        :param ml_jobzone: The ml_jobzone of this CandidateDataCandidateData.  # noqa: E501
        :type: str
        """

        self._ml_jobzone = ml_jobzone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateDataCandidateData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateDataCandidateData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
