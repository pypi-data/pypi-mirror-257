# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateDataCandidateEducation(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'degree': 'str',
        'field_of_study': 'str',
        'school_name': 'str',
        'school_and_university': 'str',
        'state': 'str',
        'country': 'str',
        'start_date': 'float',
        'end_date': 'float',
        'is_high_education': 'bool',
        'field_id': 'str',
        'field_of_study_org': 'str',
        'degree_org': 'str',
        'priority': 'float',
        'source': 'str',
        'standardized_date': 'float'
    }

    attribute_map = {
        'degree': 'degree',
        'field_of_study': 'fieldOfStudy',
        'school_name': 'schoolName',
        'school_and_university': 'schoolAndUniversity',
        'state': 'state',
        'country': 'country',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'is_high_education': 'isHighEducation',
        'field_id': 'fieldID',
        'field_of_study_org': 'fieldOfStudy_org',
        'degree_org': 'degree_org',
        'priority': 'priority',
        'source': 'source',
        'standardized_date': 'standardizedDate'
    }

    def __init__(self, degree=None, field_of_study=None, school_name=None, school_and_university=None, state=None, country=None, start_date=None, end_date=None, is_high_education=None, field_id=None, field_of_study_org=None, degree_org=None, priority=None, source=None, standardized_date=None):  # noqa: E501
        """CandidateDataCandidateEducation - a model defined in Swagger"""  # noqa: E501
        self._degree = None
        self._field_of_study = None
        self._school_name = None
        self._school_and_university = None
        self._state = None
        self._country = None
        self._start_date = None
        self._end_date = None
        self._is_high_education = None
        self._field_id = None
        self._field_of_study_org = None
        self._degree_org = None
        self._priority = None
        self._source = None
        self._standardized_date = None
        self.discriminator = None
        if degree is not None:
            self.degree = degree
        if field_of_study is not None:
            self.field_of_study = field_of_study
        if school_name is not None:
            self.school_name = school_name
        if school_and_university is not None:
            self.school_and_university = school_and_university
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if is_high_education is not None:
            self.is_high_education = is_high_education
        if field_id is not None:
            self.field_id = field_id
        if field_of_study_org is not None:
            self.field_of_study_org = field_of_study_org
        if degree_org is not None:
            self.degree_org = degree_org
        if priority is not None:
            self.priority = priority
        if source is not None:
            self.source = source
        if standardized_date is not None:
            self.standardized_date = standardized_date

    @property
    def degree(self):
        """Gets the degree of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The degree of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: str
        """
        return self._degree

    @degree.setter
    def degree(self, degree):
        """Sets the degree of this CandidateDataCandidateEducation.


        :param degree: The degree of this CandidateDataCandidateEducation.  # noqa: E501
        :type: str
        """

        self._degree = degree

    @property
    def field_of_study(self):
        """Gets the field_of_study of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The field_of_study of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: str
        """
        return self._field_of_study

    @field_of_study.setter
    def field_of_study(self, field_of_study):
        """Sets the field_of_study of this CandidateDataCandidateEducation.


        :param field_of_study: The field_of_study of this CandidateDataCandidateEducation.  # noqa: E501
        :type: str
        """

        self._field_of_study = field_of_study

    @property
    def school_name(self):
        """Gets the school_name of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The school_name of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: str
        """
        return self._school_name

    @school_name.setter
    def school_name(self, school_name):
        """Sets the school_name of this CandidateDataCandidateEducation.


        :param school_name: The school_name of this CandidateDataCandidateEducation.  # noqa: E501
        :type: str
        """

        self._school_name = school_name

    @property
    def school_and_university(self):
        """Gets the school_and_university of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The school_and_university of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: str
        """
        return self._school_and_university

    @school_and_university.setter
    def school_and_university(self, school_and_university):
        """Sets the school_and_university of this CandidateDataCandidateEducation.


        :param school_and_university: The school_and_university of this CandidateDataCandidateEducation.  # noqa: E501
        :type: str
        """

        self._school_and_university = school_and_university

    @property
    def state(self):
        """Gets the state of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The state of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CandidateDataCandidateEducation.


        :param state: The state of this CandidateDataCandidateEducation.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The country of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CandidateDataCandidateEducation.


        :param country: The country of this CandidateDataCandidateEducation.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def start_date(self):
        """Gets the start_date of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The start_date of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: float
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CandidateDataCandidateEducation.


        :param start_date: The start_date of this CandidateDataCandidateEducation.  # noqa: E501
        :type: float
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The end_date of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: float
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CandidateDataCandidateEducation.


        :param end_date: The end_date of this CandidateDataCandidateEducation.  # noqa: E501
        :type: float
        """

        self._end_date = end_date

    @property
    def is_high_education(self):
        """Gets the is_high_education of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The is_high_education of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: bool
        """
        return self._is_high_education

    @is_high_education.setter
    def is_high_education(self, is_high_education):
        """Sets the is_high_education of this CandidateDataCandidateEducation.


        :param is_high_education: The is_high_education of this CandidateDataCandidateEducation.  # noqa: E501
        :type: bool
        """

        self._is_high_education = is_high_education

    @property
    def field_id(self):
        """Gets the field_id of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The field_id of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this CandidateDataCandidateEducation.


        :param field_id: The field_id of this CandidateDataCandidateEducation.  # noqa: E501
        :type: str
        """

        self._field_id = field_id

    @property
    def field_of_study_org(self):
        """Gets the field_of_study_org of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The field_of_study_org of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: str
        """
        return self._field_of_study_org

    @field_of_study_org.setter
    def field_of_study_org(self, field_of_study_org):
        """Sets the field_of_study_org of this CandidateDataCandidateEducation.


        :param field_of_study_org: The field_of_study_org of this CandidateDataCandidateEducation.  # noqa: E501
        :type: str
        """

        self._field_of_study_org = field_of_study_org

    @property
    def degree_org(self):
        """Gets the degree_org of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The degree_org of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: str
        """
        return self._degree_org

    @degree_org.setter
    def degree_org(self, degree_org):
        """Sets the degree_org of this CandidateDataCandidateEducation.


        :param degree_org: The degree_org of this CandidateDataCandidateEducation.  # noqa: E501
        :type: str
        """

        self._degree_org = degree_org

    @property
    def priority(self):
        """Gets the priority of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The priority of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CandidateDataCandidateEducation.


        :param priority: The priority of this CandidateDataCandidateEducation.  # noqa: E501
        :type: float
        """

        self._priority = priority

    @property
    def source(self):
        """Gets the source of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The source of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CandidateDataCandidateEducation.


        :param source: The source of this CandidateDataCandidateEducation.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def standardized_date(self):
        """Gets the standardized_date of this CandidateDataCandidateEducation.  # noqa: E501


        :return: The standardized_date of this CandidateDataCandidateEducation.  # noqa: E501
        :rtype: float
        """
        return self._standardized_date

    @standardized_date.setter
    def standardized_date(self, standardized_date):
        """Sets the standardized_date of this CandidateDataCandidateEducation.


        :param standardized_date: The standardized_date of this CandidateDataCandidateEducation.  # noqa: E501
        :type: float
        """

        self._standardized_date = standardized_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateDataCandidateEducation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateDataCandidateEducation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
