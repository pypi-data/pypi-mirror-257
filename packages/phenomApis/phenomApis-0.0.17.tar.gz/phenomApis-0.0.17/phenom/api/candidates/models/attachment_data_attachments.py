# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class AttachmentDataAttachments(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attachment_id': 'str',
        'attachment_name': 'str',
        'attachment_type': 'str',
        'attachment_date': 'float',
        'created_by_user_id': 'str',
        'created_by_user_name': 'str',
        'attachment_language': 'str',
        'parsed_status': 'str'
    }

    attribute_map = {
        'attachment_id': 'attachmentId',
        'attachment_name': 'attachmentName',
        'attachment_type': 'attachmentType',
        'attachment_date': 'attachmentDate',
        'created_by_user_id': 'createdByUserId',
        'created_by_user_name': 'createdByUserName',
        'attachment_language': 'attachmentLanguage',
        'parsed_status': 'parsedStatus'
    }

    def __init__(self, attachment_id=None, attachment_name=None, attachment_type=None, attachment_date=None, created_by_user_id=None, created_by_user_name=None, attachment_language=None, parsed_status=None):  # noqa: E501
        """AttachmentDataAttachments - a model defined in Swagger"""  # noqa: E501
        self._attachment_id = None
        self._attachment_name = None
        self._attachment_type = None
        self._attachment_date = None
        self._created_by_user_id = None
        self._created_by_user_name = None
        self._attachment_language = None
        self._parsed_status = None
        self.discriminator = None
        if attachment_id is not None:
            self.attachment_id = attachment_id
        if attachment_name is not None:
            self.attachment_name = attachment_name
        if attachment_type is not None:
            self.attachment_type = attachment_type
        if attachment_date is not None:
            self.attachment_date = attachment_date
        if created_by_user_id is not None:
            self.created_by_user_id = created_by_user_id
        if created_by_user_name is not None:
            self.created_by_user_name = created_by_user_name
        if attachment_language is not None:
            self.attachment_language = attachment_language
        if parsed_status is not None:
            self.parsed_status = parsed_status

    @property
    def attachment_id(self):
        """Gets the attachment_id of this AttachmentDataAttachments.  # noqa: E501


        :return: The attachment_id of this AttachmentDataAttachments.  # noqa: E501
        :rtype: str
        """
        return self._attachment_id

    @attachment_id.setter
    def attachment_id(self, attachment_id):
        """Sets the attachment_id of this AttachmentDataAttachments.


        :param attachment_id: The attachment_id of this AttachmentDataAttachments.  # noqa: E501
        :type: str
        """

        self._attachment_id = attachment_id

    @property
    def attachment_name(self):
        """Gets the attachment_name of this AttachmentDataAttachments.  # noqa: E501


        :return: The attachment_name of this AttachmentDataAttachments.  # noqa: E501
        :rtype: str
        """
        return self._attachment_name

    @attachment_name.setter
    def attachment_name(self, attachment_name):
        """Sets the attachment_name of this AttachmentDataAttachments.


        :param attachment_name: The attachment_name of this AttachmentDataAttachments.  # noqa: E501
        :type: str
        """

        self._attachment_name = attachment_name

    @property
    def attachment_type(self):
        """Gets the attachment_type of this AttachmentDataAttachments.  # noqa: E501


        :return: The attachment_type of this AttachmentDataAttachments.  # noqa: E501
        :rtype: str
        """
        return self._attachment_type

    @attachment_type.setter
    def attachment_type(self, attachment_type):
        """Sets the attachment_type of this AttachmentDataAttachments.


        :param attachment_type: The attachment_type of this AttachmentDataAttachments.  # noqa: E501
        :type: str
        """

        self._attachment_type = attachment_type

    @property
    def attachment_date(self):
        """Gets the attachment_date of this AttachmentDataAttachments.  # noqa: E501


        :return: The attachment_date of this AttachmentDataAttachments.  # noqa: E501
        :rtype: float
        """
        return self._attachment_date

    @attachment_date.setter
    def attachment_date(self, attachment_date):
        """Sets the attachment_date of this AttachmentDataAttachments.


        :param attachment_date: The attachment_date of this AttachmentDataAttachments.  # noqa: E501
        :type: float
        """

        self._attachment_date = attachment_date

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this AttachmentDataAttachments.  # noqa: E501


        :return: The created_by_user_id of this AttachmentDataAttachments.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this AttachmentDataAttachments.


        :param created_by_user_id: The created_by_user_id of this AttachmentDataAttachments.  # noqa: E501
        :type: str
        """

        self._created_by_user_id = created_by_user_id

    @property
    def created_by_user_name(self):
        """Gets the created_by_user_name of this AttachmentDataAttachments.  # noqa: E501


        :return: The created_by_user_name of this AttachmentDataAttachments.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_name

    @created_by_user_name.setter
    def created_by_user_name(self, created_by_user_name):
        """Sets the created_by_user_name of this AttachmentDataAttachments.


        :param created_by_user_name: The created_by_user_name of this AttachmentDataAttachments.  # noqa: E501
        :type: str
        """

        self._created_by_user_name = created_by_user_name

    @property
    def attachment_language(self):
        """Gets the attachment_language of this AttachmentDataAttachments.  # noqa: E501


        :return: The attachment_language of this AttachmentDataAttachments.  # noqa: E501
        :rtype: str
        """
        return self._attachment_language

    @attachment_language.setter
    def attachment_language(self, attachment_language):
        """Sets the attachment_language of this AttachmentDataAttachments.


        :param attachment_language: The attachment_language of this AttachmentDataAttachments.  # noqa: E501
        :type: str
        """

        self._attachment_language = attachment_language

    @property
    def parsed_status(self):
        """Gets the parsed_status of this AttachmentDataAttachments.  # noqa: E501


        :return: The parsed_status of this AttachmentDataAttachments.  # noqa: E501
        :rtype: str
        """
        return self._parsed_status

    @parsed_status.setter
    def parsed_status(self, parsed_status):
        """Sets the parsed_status of this AttachmentDataAttachments.


        :param parsed_status: The parsed_status of this AttachmentDataAttachments.  # noqa: E501
        :type: str
        """

        self._parsed_status = parsed_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachmentDataAttachments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentDataAttachments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
