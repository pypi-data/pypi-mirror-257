# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateDataCandidateAdditionalRequestInfoOptInInfo(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'db_opt_in_status': 'float',
        'current_opt_in_status': 'float',
        'opt_in_from_request': 'CandidateDataCandidateAdditionalRequestInfoOptInInfoOptInFromRequest',
        'opt_in': 'bool',
        'old_optin_form_db': 'bool'
    }

    attribute_map = {
        'db_opt_in_status': 'dbOptInStatus',
        'current_opt_in_status': 'currentOptInStatus',
        'opt_in_from_request': 'optInFromRequest',
        'opt_in': 'optIn',
        'old_optin_form_db': 'oldOptinFormDb'
    }

    def __init__(self, db_opt_in_status=None, current_opt_in_status=None, opt_in_from_request=None, opt_in=None, old_optin_form_db=None):  # noqa: E501
        """CandidateDataCandidateAdditionalRequestInfoOptInInfo - a model defined in Swagger"""  # noqa: E501
        self._db_opt_in_status = None
        self._current_opt_in_status = None
        self._opt_in_from_request = None
        self._opt_in = None
        self._old_optin_form_db = None
        self.discriminator = None
        if db_opt_in_status is not None:
            self.db_opt_in_status = db_opt_in_status
        if current_opt_in_status is not None:
            self.current_opt_in_status = current_opt_in_status
        if opt_in_from_request is not None:
            self.opt_in_from_request = opt_in_from_request
        if opt_in is not None:
            self.opt_in = opt_in
        if old_optin_form_db is not None:
            self.old_optin_form_db = old_optin_form_db

    @property
    def db_opt_in_status(self):
        """Gets the db_opt_in_status of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501


        :return: The db_opt_in_status of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501
        :rtype: float
        """
        return self._db_opt_in_status

    @db_opt_in_status.setter
    def db_opt_in_status(self, db_opt_in_status):
        """Sets the db_opt_in_status of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.


        :param db_opt_in_status: The db_opt_in_status of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501
        :type: float
        """

        self._db_opt_in_status = db_opt_in_status

    @property
    def current_opt_in_status(self):
        """Gets the current_opt_in_status of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501


        :return: The current_opt_in_status of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501
        :rtype: float
        """
        return self._current_opt_in_status

    @current_opt_in_status.setter
    def current_opt_in_status(self, current_opt_in_status):
        """Sets the current_opt_in_status of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.


        :param current_opt_in_status: The current_opt_in_status of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501
        :type: float
        """

        self._current_opt_in_status = current_opt_in_status

    @property
    def opt_in_from_request(self):
        """Gets the opt_in_from_request of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501


        :return: The opt_in_from_request of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501
        :rtype: CandidateDataCandidateAdditionalRequestInfoOptInInfoOptInFromRequest
        """
        return self._opt_in_from_request

    @opt_in_from_request.setter
    def opt_in_from_request(self, opt_in_from_request):
        """Sets the opt_in_from_request of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.


        :param opt_in_from_request: The opt_in_from_request of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501
        :type: CandidateDataCandidateAdditionalRequestInfoOptInInfoOptInFromRequest
        """

        self._opt_in_from_request = opt_in_from_request

    @property
    def opt_in(self):
        """Gets the opt_in of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501


        :return: The opt_in of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501
        :rtype: bool
        """
        return self._opt_in

    @opt_in.setter
    def opt_in(self, opt_in):
        """Sets the opt_in of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.


        :param opt_in: The opt_in of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501
        :type: bool
        """

        self._opt_in = opt_in

    @property
    def old_optin_form_db(self):
        """Gets the old_optin_form_db of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501


        :return: The old_optin_form_db of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501
        :rtype: bool
        """
        return self._old_optin_form_db

    @old_optin_form_db.setter
    def old_optin_form_db(self, old_optin_form_db):
        """Sets the old_optin_form_db of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.


        :param old_optin_form_db: The old_optin_form_db of this CandidateDataCandidateAdditionalRequestInfoOptInInfo.  # noqa: E501
        :type: bool
        """

        self._old_optin_form_db = old_optin_form_db

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateDataCandidateAdditionalRequestInfoOptInInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateDataCandidateAdditionalRequestInfoOptInInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
