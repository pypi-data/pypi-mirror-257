# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateDataCandidate(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_level_ref_id': 'str',
        'attachments': 'list[CandidateDataCandidateAttachments]',
        'skills_org': 'list[str]',
        'last_activity_status': 'CandidateDataCandidateLastActivityStatus',
        'time_zone': 'str',
        'additional_fields': 'CandidateDataCandidateAdditionalFields',
        'spotlight_worked_for_competetiors': 'bool',
        'user_type': 'str',
        'child_ref_num': 'list[CandidateDataCandidateChildRefNum]',
        'category_list': 'list[AddSkillsSkillList]',
        'education': 'list[CandidateDataCandidateEducation]',
        'preferred_contact_method': 'str',
        'middle_name': 'str',
        'standardized_latest_date': 'float',
        'location_org': 'str',
        'im_test_account': 'bool',
        'passport_number': 'str',
        'tenant_specific_additional_fields': 'CandidateDataCandidateTenantSpecificAdditionalFields',
        'interest_locations': 'list[str]',
        'relocate': 'bool',
        'current_company': 'CandidateDataCandidateCurrentCompany',
        'language_known': 'list[str]',
        'lat_long': 'str',
        'opt_in': 'bool',
        'user_id': 'str',
        'opt_in_text_communication': 'bool',
        'recruiters_user_id': 'list[str]',
        'current_company_org': 'CandidateDataCandidateCurrentCompanyOrg',
        'target_companies': 'list[AddSkillsSkillList]',
        'spotlight_worked_for_top_company': 'bool',
        'opted_out_by_recruiter': 'bool',
        'professional_memberships': 'list[CandidateDataCandidateProfessionalMemberships]',
        'conf_request_priority': 'float',
        'last_update_timestamp': 'float',
        'im_profile_id': 'str',
        'skills': 'list[str]',
        'is_join_tenant_community': 'bool',
        'spotlight_is_ivy_league': 'bool',
        'linked_in_profile_url': 'str',
        'preferred_location_list': 'list[CandidateDataCandidatePreferredLocationList]',
        'education_org': 'list[CandidateDataCandidateEducationOrg]',
        'race': 'str',
        'spotlight_is_management': 'bool',
        'swoop_profile_id': 'str',
        'alert_data': 'CandidateDataCandidateAlertData',
        'traffic_source_list': 'list[CandidateDataCandidateTrafficSourceList]',
        'highest_education': 'CandidateDataCandidateHighestEducation',
        'ml_fields_list': 'list[CandidateDataCandidateMlFieldsList]',
        'apply_transaction_id': 'str',
        'short_term_goal': 'str',
        'apply_sources': 'list[str]',
        'alert_url': 'str',
        'is_ivy_league': 'bool',
        'long_term_goal': 'str',
        'candidate_opt_in_request': 'bool',
        'profile_enrichment_date': 'float',
        'spotlight_is_senior_role': 'bool',
        'job_title': 'str',
        'im_interests': 'list[AddSkillsSkillList]',
        'social_profile': 'list[CandidateDataCandidateSocialProfile]',
        'sms_opt_in_status': 'str',
        'first_name': 'str',
        'new_email': 'bool',
        'pushed_to_atson': 'float',
        'profile_created_by': 'CandidateDataCandidateProfileCreatedBy',
        'experience_range': 'CandidateDataCandidateExperienceRange',
        'referral_source': 'str',
        'opt_in_single_sms': 'bool',
        'previous_employee_ids': 'list[str]',
        'grade': 'str',
        'job_code': 'str',
        'awards': 'list[AwardDataAwards]',
        'company': 'str',
        'resume_url': 'str',
        'user_status': 'str',
        'single_sms_opt_in_status': 'str',
        'address': 'list[CandidateDataCandidateAddress]',
        'geolocation': 'CandidateDataCandidateGeolocation',
        'scope_attr': 'CandidateDataCandidateAlertData',
        'ethnicity': 'str',
        'twitter_url': 'str',
        'partner_tenant': 'str',
        'create_kafka_event': 'bool',
        'work_authorization': 'str',
        'event_organizer': 'bool',
        'candidate_activity_timestamp': 'float',
        'first_source': 'list[str]',
        'created_date': 'float',
        'new_location': 'CandidateDataCandidateNewLocation',
        'opt_in_sms': 'bool',
        'profile_pic_url': 'list[str]',
        'top_rated_skills': 'list[CandidateDataCandidateTopRatedSkills]',
        'spotlight_is_fortune500': 'bool',
        'skill_list': 'list[CandidateDataCandidateSkillList]',
        'instagram_url': 'str',
        'event_name': 'str',
        'team_id': 'str',
        'profile_status': 'CandidateDataCandidateProfileStatus',
        'relocation_date': 'float',
        'ref_num': 'str',
        'designation': 'str',
        'updated_date': 'float',
        'certifications': 'list[CandidateDataCandidateCertifications]',
        'im_employment_type': 'list[str]',
        'contacts_org': 'list[CandidateDataCandidateContactsOrg]',
        'recommendations': 'list[CandidateDataCandidateRecommendations]',
        'picture_url': 'str',
        'event_id': 'str',
        'emails': 'list[str]',
        'location': 'str',
        'spotlight_is_media_agencies': 'bool',
        'gender': 'str',
        'interests': 'list[str]',
        'is_senior_role': 'bool',
        'facebook_url': 'str',
        'first_referrer_id': 'str',
        'google_url': 'str',
        'additional_request_info': 'CandidateDataCandidateAdditionalRequestInfo',
        'utids': 'list[str]',
        'md5_check': 'str',
        'language': 'str',
        'linked_in_md5_sum': 'str',
        'experience_org': 'list[CandidateDataCandidateExperienceOrg]',
        'referrar': 'list[CandidateDataCandidateReferrar]',
        'new_address': 'list[CandidateDataCandidateNewLocation]',
        'preferred_communication_mode': 'CandidateDataCandidatePreferredCommunicationMode',
        'im_locations': 'list[AddSkillsSkillList]',
        'language_preference': 'str',
        'disability': 'str',
        'profile_url': 'str',
        'external_source': 'str',
        'profile_updates_by_recruiter': 'list[CandidateDataCandidateProfileCreatedBy]',
        'flsa_status': 'str',
        'email_list': 'list[CandidateDataCandidateEmailList]',
        'experience': 'list[CandidateDataCandidateExperience]',
        'career_level': 'str',
        'pup_id': 'str',
        'conf_request_source': 'str',
        'highest_education_org': 'CandidateDataCandidateHighestEducation',
        'categories': 'list[str]',
        'imported_candidates': 'list[CandidateDataCandidateImportedCandidates]',
        'veteran': 'str',
        'recruiter_activity_timestamp': 'float',
        'candidate_created': 'float',
        'last_onboarding_date': 'float',
        'contacts': 'list[CandidateDataCandidateContacts]',
        'im_referral_interests': 'str',
        'profile_completion_stage': 'str',
        'candidate_score': 'CandidateDataCandidateCandidateScore',
        'recruiter_user_id': 'str',
        'address_logs': 'list[CandidateDataCandidateAddressLogs]',
        'last_name': 'str',
        'picture_s3_url': 'str',
        'is_fortune500': 'bool',
        'unique_jobs_and_status_list': 'list[CandidateDataCandidateUniqueJobsAndStatusList]',
        'date_created': 'float',
        'prefix': 'str',
        'internal': 'bool',
        'spotlight_calculated': 'bool',
        'old_candidate_anonymous': 'bool',
        'ats_id': 'str',
        'additional_config': 'CandidateDataCandidateAlertData',
        'current_company_name': 'str',
        'zip_code': 'str',
        'derived_ats_event_type': 'str',
        'diversity': 'str',
        'hispanic_or_latino': 'str',
        'recruiter_email': 'str',
        'recruiter_name': 'str',
        'consent': 'str',
        'consent_date': 'float',
        'preferred_first_name': 'str',
        'import_labels': 'list[str]',
        'is_open_api_request': 'bool',
        'parent': 'str'
    }

    attribute_map = {
        'job_level_ref_id': 'jobLevelRefId',
        'attachments': 'attachments',
        'skills_org': 'skills_org',
        'last_activity_status': 'lastActivityStatus',
        'time_zone': 'timeZone',
        'additional_fields': 'additionalFields',
        'spotlight_worked_for_competetiors': 'Spotlight_workedForCompetetiors',
        'user_type': 'userType',
        'child_ref_num': 'childRefNum',
        'category_list': 'categoryList',
        'education': 'education',
        'preferred_contact_method': 'preferredContactMethod',
        'middle_name': 'middleName',
        'standardized_latest_date': 'standardizedLatestDate',
        'location_org': 'location_org',
        'im_test_account': 'imTestAccount',
        'passport_number': 'passportNumber',
        'tenant_specific_additional_fields': 'tenantSpecific_additionalFields',
        'interest_locations': 'interestLocations',
        'relocate': 'relocate',
        'current_company': 'currentCompany',
        'language_known': 'languageKnown',
        'lat_long': 'latLong',
        'opt_in': 'optIn',
        'user_id': 'userId',
        'opt_in_text_communication': 'optInTextCommunication',
        'recruiters_user_id': 'recruitersUserId',
        'current_company_org': 'currentCompany_org',
        'target_companies': 'targetCompanies',
        'spotlight_worked_for_top_company': 'Spotlight_workedForTopCompany',
        'opted_out_by_recruiter': 'optedOutByRecruiter',
        'professional_memberships': 'professionalMemberships',
        'conf_request_priority': 'confRequestPriority',
        'last_update_timestamp': 'lastUpdateTimestamp',
        'im_profile_id': 'imProfileId',
        'skills': 'skills',
        'is_join_tenant_community': 'isJoinTenantCommunity',
        'spotlight_is_ivy_league': 'Spotlight_IsIvyLeague',
        'linked_in_profile_url': 'linkedInProfileURL',
        'preferred_location_list': 'preferredLocationList',
        'education_org': 'education_org',
        'race': 'race',
        'spotlight_is_management': 'Spotlight_IsManagement',
        'swoop_profile_id': 'swoopProfileId',
        'alert_data': 'alertData',
        'traffic_source_list': 'trafficSourceList',
        'highest_education': 'highestEducation',
        'ml_fields_list': 'mlFieldsList',
        'apply_transaction_id': 'applyTransactionId',
        'short_term_goal': 'shortTermGoal',
        'apply_sources': 'applySources',
        'alert_url': 'alertUrl',
        'is_ivy_league': 'isIvyLeague',
        'long_term_goal': 'longTermGoal',
        'candidate_opt_in_request': 'candidateOptInRequest',
        'profile_enrichment_date': 'profileEnrichmentDate',
        'spotlight_is_senior_role': 'Spotlight_IsSeniorRole',
        'job_title': 'jobTitle',
        'im_interests': 'imInterests',
        'social_profile': 'socialProfile',
        'sms_opt_in_status': 'smsOptInStatus',
        'first_name': 'firstName',
        'new_email': 'newEmail',
        'pushed_to_atson': 'pushedToATSOn',
        'profile_created_by': 'profileCreatedBy',
        'experience_range': 'experienceRange',
        'referral_source': 'referralSource',
        'opt_in_single_sms': 'optInSingleSMS',
        'previous_employee_ids': 'previousEmployeeIds',
        'grade': 'grade',
        'job_code': 'jobCode',
        'awards': 'awards',
        'company': 'company',
        'resume_url': 'resumeUrl',
        'user_status': 'userStatus',
        'single_sms_opt_in_status': 'singleSmsOptInStatus',
        'address': 'address',
        'geolocation': 'geolocation',
        'scope_attr': 'scopeAttr',
        'ethnicity': 'ethnicity',
        'twitter_url': 'twitterUrl',
        'partner_tenant': 'partnerTenant',
        'create_kafka_event': 'createKafkaEvent',
        'work_authorization': 'workAuthorization',
        'event_organizer': 'eventOrganizer',
        'candidate_activity_timestamp': 'candidateActivityTimestamp',
        'first_source': 'firstSource',
        'created_date': 'createdDate',
        'new_location': 'newLocation',
        'opt_in_sms': 'optInSMS',
        'profile_pic_url': 'profilePicUrl',
        'top_rated_skills': 'topRatedSkills',
        'spotlight_is_fortune500': 'Spotlight_IsFortune500',
        'skill_list': 'skillList',
        'instagram_url': 'instagramUrl',
        'event_name': 'eventName',
        'team_id': 'teamId',
        'profile_status': 'profileStatus',
        'relocation_date': 'relocationDate',
        'ref_num': 'refNum',
        'designation': 'designation',
        'updated_date': 'updatedDate',
        'certifications': 'certifications',
        'im_employment_type': 'imEmploymentType',
        'contacts_org': 'contacts_org',
        'recommendations': 'recommendations',
        'picture_url': 'pictureUrl',
        'event_id': 'eventId',
        'emails': 'emails',
        'location': 'location',
        'spotlight_is_media_agencies': 'Spotlight_IsMediaAgencies',
        'gender': 'gender',
        'interests': 'interests',
        'is_senior_role': 'isSeniorRole',
        'facebook_url': 'facebookUrl',
        'first_referrer_id': 'firstReferrerId',
        'google_url': 'googleUrl',
        'additional_request_info': 'additionalRequestInfo',
        'utids': 'utids',
        'md5_check': 'md5Check',
        'language': 'language',
        'linked_in_md5_sum': 'linkedInMD5Sum',
        'experience_org': 'experience_org',
        'referrar': 'referrar',
        'new_address': 'newAddress',
        'preferred_communication_mode': 'preferredCommunicationMode',
        'im_locations': 'imLocations',
        'language_preference': 'languagePreference',
        'disability': 'disability',
        'profile_url': 'profileUrl',
        'external_source': 'externalSource',
        'profile_updates_by_recruiter': 'profileUpdatesByRecruiter',
        'flsa_status': 'flsaStatus',
        'email_list': 'emailList',
        'experience': 'experience',
        'career_level': 'careerLevel',
        'pup_id': 'pupId',
        'conf_request_source': 'conf_request_source',
        'highest_education_org': 'highestEducation_org',
        'categories': 'categories',
        'imported_candidates': 'importedCandidates',
        'veteran': 'veteran',
        'recruiter_activity_timestamp': 'recruiterActivityTimestamp',
        'candidate_created': 'candidateCreated',
        'last_onboarding_date': 'lastOnboardingDate',
        'contacts': 'contacts',
        'im_referral_interests': 'imReferralInterests',
        'profile_completion_stage': 'profileCompletionStage',
        'candidate_score': 'candidateScore',
        'recruiter_user_id': 'recruiterUserId',
        'address_logs': 'addressLogs',
        'last_name': 'lastName',
        'picture_s3_url': 'pictureS3Url',
        'is_fortune500': 'isFortune500',
        'unique_jobs_and_status_list': 'uniqueJobsAndStatusList',
        'date_created': 'dateCreated',
        'prefix': 'prefix',
        'internal': 'internal',
        'spotlight_calculated': 'Spotlight_Calculated',
        'old_candidate_anonymous': 'oldCandidateAnonymous',
        'ats_id': 'atsId',
        'additional_config': 'additionalConfig',
        'current_company_name': 'currentCompanyName',
        'zip_code': 'zipCode',
        'derived_ats_event_type': 'derivedAtsEventType',
        'diversity': 'diversity',
        'hispanic_or_latino': 'hispanicOrLatino',
        'recruiter_email': 'recruiterEmail',
        'recruiter_name': 'recruiterName',
        'consent': 'consent',
        'consent_date': 'consentDate',
        'preferred_first_name': 'preferredFirstName',
        'import_labels': 'importLabels',
        'is_open_api_request': 'isOpenApiRequest',
        'parent': 'parent'
    }

    def __init__(self, job_level_ref_id=None, attachments=None, skills_org=None, last_activity_status=None, time_zone=None, additional_fields=None, spotlight_worked_for_competetiors=None, user_type=None, child_ref_num=None, category_list=None, education=None, preferred_contact_method=None, middle_name=None, standardized_latest_date=None, location_org=None, im_test_account=None, passport_number=None, tenant_specific_additional_fields=None, interest_locations=None, relocate=None, current_company=None, language_known=None, lat_long=None, opt_in=None, user_id=None, opt_in_text_communication=None, recruiters_user_id=None, current_company_org=None, target_companies=None, spotlight_worked_for_top_company=None, opted_out_by_recruiter=None, professional_memberships=None, conf_request_priority=None, last_update_timestamp=None, im_profile_id=None, skills=None, is_join_tenant_community=None, spotlight_is_ivy_league=None, linked_in_profile_url=None, preferred_location_list=None, education_org=None, race=None, spotlight_is_management=None, swoop_profile_id=None, alert_data=None, traffic_source_list=None, highest_education=None, ml_fields_list=None, apply_transaction_id=None, short_term_goal=None, apply_sources=None, alert_url=None, is_ivy_league=None, long_term_goal=None, candidate_opt_in_request=None, profile_enrichment_date=None, spotlight_is_senior_role=None, job_title=None, im_interests=None, social_profile=None, sms_opt_in_status=None, first_name=None, new_email=None, pushed_to_atson=None, profile_created_by=None, experience_range=None, referral_source=None, opt_in_single_sms=None, previous_employee_ids=None, grade=None, job_code=None, awards=None, company=None, resume_url=None, user_status=None, single_sms_opt_in_status=None, address=None, geolocation=None, scope_attr=None, ethnicity=None, twitter_url=None, partner_tenant=None, create_kafka_event=None, work_authorization=None, event_organizer=None, candidate_activity_timestamp=None, first_source=None, created_date=None, new_location=None, opt_in_sms=None, profile_pic_url=None, top_rated_skills=None, spotlight_is_fortune500=None, skill_list=None, instagram_url=None, event_name=None, team_id=None, profile_status=None, relocation_date=None, ref_num=None, designation=None, updated_date=None, certifications=None, im_employment_type=None, contacts_org=None, recommendations=None, picture_url=None, event_id=None, emails=None, location=None, spotlight_is_media_agencies=None, gender=None, interests=None, is_senior_role=None, facebook_url=None, first_referrer_id=None, google_url=None, additional_request_info=None, utids=None, md5_check=None, language=None, linked_in_md5_sum=None, experience_org=None, referrar=None, new_address=None, preferred_communication_mode=None, im_locations=None, language_preference=None, disability=None, profile_url=None, external_source=None, profile_updates_by_recruiter=None, flsa_status=None, email_list=None, experience=None, career_level=None, pup_id=None, conf_request_source=None, highest_education_org=None, categories=None, imported_candidates=None, veteran=None, recruiter_activity_timestamp=None, candidate_created=None, last_onboarding_date=None, contacts=None, im_referral_interests=None, profile_completion_stage=None, candidate_score=None, recruiter_user_id=None, address_logs=None, last_name=None, picture_s3_url=None, is_fortune500=None, unique_jobs_and_status_list=None, date_created=None, prefix=None, internal=None, spotlight_calculated=None, old_candidate_anonymous=None, ats_id=None, additional_config=None, current_company_name=None, zip_code=None, derived_ats_event_type=None, diversity=None, hispanic_or_latino=None, recruiter_email=None, recruiter_name=None, consent=None, consent_date=None, preferred_first_name=None, import_labels=None, is_open_api_request=None, parent=None):  # noqa: E501
        """CandidateDataCandidate - a model defined in Swagger"""  # noqa: E501
        self._job_level_ref_id = None
        self._attachments = None
        self._skills_org = None
        self._last_activity_status = None
        self._time_zone = None
        self._additional_fields = None
        self._spotlight_worked_for_competetiors = None
        self._user_type = None
        self._child_ref_num = None
        self._category_list = None
        self._education = None
        self._preferred_contact_method = None
        self._middle_name = None
        self._standardized_latest_date = None
        self._location_org = None
        self._im_test_account = None
        self._passport_number = None
        self._tenant_specific_additional_fields = None
        self._interest_locations = None
        self._relocate = None
        self._current_company = None
        self._language_known = None
        self._lat_long = None
        self._opt_in = None
        self._user_id = None
        self._opt_in_text_communication = None
        self._recruiters_user_id = None
        self._current_company_org = None
        self._target_companies = None
        self._spotlight_worked_for_top_company = None
        self._opted_out_by_recruiter = None
        self._professional_memberships = None
        self._conf_request_priority = None
        self._last_update_timestamp = None
        self._im_profile_id = None
        self._skills = None
        self._is_join_tenant_community = None
        self._spotlight_is_ivy_league = None
        self._linked_in_profile_url = None
        self._preferred_location_list = None
        self._education_org = None
        self._race = None
        self._spotlight_is_management = None
        self._swoop_profile_id = None
        self._alert_data = None
        self._traffic_source_list = None
        self._highest_education = None
        self._ml_fields_list = None
        self._apply_transaction_id = None
        self._short_term_goal = None
        self._apply_sources = None
        self._alert_url = None
        self._is_ivy_league = None
        self._long_term_goal = None
        self._candidate_opt_in_request = None
        self._profile_enrichment_date = None
        self._spotlight_is_senior_role = None
        self._job_title = None
        self._im_interests = None
        self._social_profile = None
        self._sms_opt_in_status = None
        self._first_name = None
        self._new_email = None
        self._pushed_to_atson = None
        self._profile_created_by = None
        self._experience_range = None
        self._referral_source = None
        self._opt_in_single_sms = None
        self._previous_employee_ids = None
        self._grade = None
        self._job_code = None
        self._awards = None
        self._company = None
        self._resume_url = None
        self._user_status = None
        self._single_sms_opt_in_status = None
        self._address = None
        self._geolocation = None
        self._scope_attr = None
        self._ethnicity = None
        self._twitter_url = None
        self._partner_tenant = None
        self._create_kafka_event = None
        self._work_authorization = None
        self._event_organizer = None
        self._candidate_activity_timestamp = None
        self._first_source = None
        self._created_date = None
        self._new_location = None
        self._opt_in_sms = None
        self._profile_pic_url = None
        self._top_rated_skills = None
        self._spotlight_is_fortune500 = None
        self._skill_list = None
        self._instagram_url = None
        self._event_name = None
        self._team_id = None
        self._profile_status = None
        self._relocation_date = None
        self._ref_num = None
        self._designation = None
        self._updated_date = None
        self._certifications = None
        self._im_employment_type = None
        self._contacts_org = None
        self._recommendations = None
        self._picture_url = None
        self._event_id = None
        self._emails = None
        self._location = None
        self._spotlight_is_media_agencies = None
        self._gender = None
        self._interests = None
        self._is_senior_role = None
        self._facebook_url = None
        self._first_referrer_id = None
        self._google_url = None
        self._additional_request_info = None
        self._utids = None
        self._md5_check = None
        self._language = None
        self._linked_in_md5_sum = None
        self._experience_org = None
        self._referrar = None
        self._new_address = None
        self._preferred_communication_mode = None
        self._im_locations = None
        self._language_preference = None
        self._disability = None
        self._profile_url = None
        self._external_source = None
        self._profile_updates_by_recruiter = None
        self._flsa_status = None
        self._email_list = None
        self._experience = None
        self._career_level = None
        self._pup_id = None
        self._conf_request_source = None
        self._highest_education_org = None
        self._categories = None
        self._imported_candidates = None
        self._veteran = None
        self._recruiter_activity_timestamp = None
        self._candidate_created = None
        self._last_onboarding_date = None
        self._contacts = None
        self._im_referral_interests = None
        self._profile_completion_stage = None
        self._candidate_score = None
        self._recruiter_user_id = None
        self._address_logs = None
        self._last_name = None
        self._picture_s3_url = None
        self._is_fortune500 = None
        self._unique_jobs_and_status_list = None
        self._date_created = None
        self._prefix = None
        self._internal = None
        self._spotlight_calculated = None
        self._old_candidate_anonymous = None
        self._ats_id = None
        self._additional_config = None
        self._current_company_name = None
        self._zip_code = None
        self._derived_ats_event_type = None
        self._diversity = None
        self._hispanic_or_latino = None
        self._recruiter_email = None
        self._recruiter_name = None
        self._consent = None
        self._consent_date = None
        self._preferred_first_name = None
        self._import_labels = None
        self._is_open_api_request = None
        self._parent = None
        self.discriminator = None
        if job_level_ref_id is not None:
            self.job_level_ref_id = job_level_ref_id
        if attachments is not None:
            self.attachments = attachments
        if skills_org is not None:
            self.skills_org = skills_org
        if last_activity_status is not None:
            self.last_activity_status = last_activity_status
        if time_zone is not None:
            self.time_zone = time_zone
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if spotlight_worked_for_competetiors is not None:
            self.spotlight_worked_for_competetiors = spotlight_worked_for_competetiors
        if user_type is not None:
            self.user_type = user_type
        if child_ref_num is not None:
            self.child_ref_num = child_ref_num
        if category_list is not None:
            self.category_list = category_list
        if education is not None:
            self.education = education
        if preferred_contact_method is not None:
            self.preferred_contact_method = preferred_contact_method
        if middle_name is not None:
            self.middle_name = middle_name
        if standardized_latest_date is not None:
            self.standardized_latest_date = standardized_latest_date
        if location_org is not None:
            self.location_org = location_org
        if im_test_account is not None:
            self.im_test_account = im_test_account
        if passport_number is not None:
            self.passport_number = passport_number
        if tenant_specific_additional_fields is not None:
            self.tenant_specific_additional_fields = tenant_specific_additional_fields
        if interest_locations is not None:
            self.interest_locations = interest_locations
        if relocate is not None:
            self.relocate = relocate
        if current_company is not None:
            self.current_company = current_company
        if language_known is not None:
            self.language_known = language_known
        if lat_long is not None:
            self.lat_long = lat_long
        if opt_in is not None:
            self.opt_in = opt_in
        if user_id is not None:
            self.user_id = user_id
        if opt_in_text_communication is not None:
            self.opt_in_text_communication = opt_in_text_communication
        if recruiters_user_id is not None:
            self.recruiters_user_id = recruiters_user_id
        if current_company_org is not None:
            self.current_company_org = current_company_org
        if target_companies is not None:
            self.target_companies = target_companies
        if spotlight_worked_for_top_company is not None:
            self.spotlight_worked_for_top_company = spotlight_worked_for_top_company
        if opted_out_by_recruiter is not None:
            self.opted_out_by_recruiter = opted_out_by_recruiter
        if professional_memberships is not None:
            self.professional_memberships = professional_memberships
        if conf_request_priority is not None:
            self.conf_request_priority = conf_request_priority
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if im_profile_id is not None:
            self.im_profile_id = im_profile_id
        if skills is not None:
            self.skills = skills
        if is_join_tenant_community is not None:
            self.is_join_tenant_community = is_join_tenant_community
        if spotlight_is_ivy_league is not None:
            self.spotlight_is_ivy_league = spotlight_is_ivy_league
        if linked_in_profile_url is not None:
            self.linked_in_profile_url = linked_in_profile_url
        if preferred_location_list is not None:
            self.preferred_location_list = preferred_location_list
        if education_org is not None:
            self.education_org = education_org
        if race is not None:
            self.race = race
        if spotlight_is_management is not None:
            self.spotlight_is_management = spotlight_is_management
        if swoop_profile_id is not None:
            self.swoop_profile_id = swoop_profile_id
        if alert_data is not None:
            self.alert_data = alert_data
        if traffic_source_list is not None:
            self.traffic_source_list = traffic_source_list
        if highest_education is not None:
            self.highest_education = highest_education
        if ml_fields_list is not None:
            self.ml_fields_list = ml_fields_list
        if apply_transaction_id is not None:
            self.apply_transaction_id = apply_transaction_id
        if short_term_goal is not None:
            self.short_term_goal = short_term_goal
        if apply_sources is not None:
            self.apply_sources = apply_sources
        if alert_url is not None:
            self.alert_url = alert_url
        if is_ivy_league is not None:
            self.is_ivy_league = is_ivy_league
        if long_term_goal is not None:
            self.long_term_goal = long_term_goal
        if candidate_opt_in_request is not None:
            self.candidate_opt_in_request = candidate_opt_in_request
        if profile_enrichment_date is not None:
            self.profile_enrichment_date = profile_enrichment_date
        if spotlight_is_senior_role is not None:
            self.spotlight_is_senior_role = spotlight_is_senior_role
        if job_title is not None:
            self.job_title = job_title
        if im_interests is not None:
            self.im_interests = im_interests
        if social_profile is not None:
            self.social_profile = social_profile
        if sms_opt_in_status is not None:
            self.sms_opt_in_status = sms_opt_in_status
        if first_name is not None:
            self.first_name = first_name
        if new_email is not None:
            self.new_email = new_email
        if pushed_to_atson is not None:
            self.pushed_to_atson = pushed_to_atson
        if profile_created_by is not None:
            self.profile_created_by = profile_created_by
        if experience_range is not None:
            self.experience_range = experience_range
        if referral_source is not None:
            self.referral_source = referral_source
        if opt_in_single_sms is not None:
            self.opt_in_single_sms = opt_in_single_sms
        if previous_employee_ids is not None:
            self.previous_employee_ids = previous_employee_ids
        if grade is not None:
            self.grade = grade
        if job_code is not None:
            self.job_code = job_code
        if awards is not None:
            self.awards = awards
        if company is not None:
            self.company = company
        if resume_url is not None:
            self.resume_url = resume_url
        if user_status is not None:
            self.user_status = user_status
        if single_sms_opt_in_status is not None:
            self.single_sms_opt_in_status = single_sms_opt_in_status
        if address is not None:
            self.address = address
        if geolocation is not None:
            self.geolocation = geolocation
        if scope_attr is not None:
            self.scope_attr = scope_attr
        if ethnicity is not None:
            self.ethnicity = ethnicity
        if twitter_url is not None:
            self.twitter_url = twitter_url
        if partner_tenant is not None:
            self.partner_tenant = partner_tenant
        if create_kafka_event is not None:
            self.create_kafka_event = create_kafka_event
        if work_authorization is not None:
            self.work_authorization = work_authorization
        if event_organizer is not None:
            self.event_organizer = event_organizer
        if candidate_activity_timestamp is not None:
            self.candidate_activity_timestamp = candidate_activity_timestamp
        if first_source is not None:
            self.first_source = first_source
        if created_date is not None:
            self.created_date = created_date
        if new_location is not None:
            self.new_location = new_location
        if opt_in_sms is not None:
            self.opt_in_sms = opt_in_sms
        if profile_pic_url is not None:
            self.profile_pic_url = profile_pic_url
        if top_rated_skills is not None:
            self.top_rated_skills = top_rated_skills
        if spotlight_is_fortune500 is not None:
            self.spotlight_is_fortune500 = spotlight_is_fortune500
        if skill_list is not None:
            self.skill_list = skill_list
        if instagram_url is not None:
            self.instagram_url = instagram_url
        if event_name is not None:
            self.event_name = event_name
        if team_id is not None:
            self.team_id = team_id
        if profile_status is not None:
            self.profile_status = profile_status
        if relocation_date is not None:
            self.relocation_date = relocation_date
        if ref_num is not None:
            self.ref_num = ref_num
        if designation is not None:
            self.designation = designation
        if updated_date is not None:
            self.updated_date = updated_date
        if certifications is not None:
            self.certifications = certifications
        if im_employment_type is not None:
            self.im_employment_type = im_employment_type
        if contacts_org is not None:
            self.contacts_org = contacts_org
        if recommendations is not None:
            self.recommendations = recommendations
        if picture_url is not None:
            self.picture_url = picture_url
        if event_id is not None:
            self.event_id = event_id
        if emails is not None:
            self.emails = emails
        if location is not None:
            self.location = location
        if spotlight_is_media_agencies is not None:
            self.spotlight_is_media_agencies = spotlight_is_media_agencies
        if gender is not None:
            self.gender = gender
        if interests is not None:
            self.interests = interests
        if is_senior_role is not None:
            self.is_senior_role = is_senior_role
        if facebook_url is not None:
            self.facebook_url = facebook_url
        if first_referrer_id is not None:
            self.first_referrer_id = first_referrer_id
        if google_url is not None:
            self.google_url = google_url
        if additional_request_info is not None:
            self.additional_request_info = additional_request_info
        if utids is not None:
            self.utids = utids
        if md5_check is not None:
            self.md5_check = md5_check
        if language is not None:
            self.language = language
        if linked_in_md5_sum is not None:
            self.linked_in_md5_sum = linked_in_md5_sum
        if experience_org is not None:
            self.experience_org = experience_org
        if referrar is not None:
            self.referrar = referrar
        if new_address is not None:
            self.new_address = new_address
        if preferred_communication_mode is not None:
            self.preferred_communication_mode = preferred_communication_mode
        if im_locations is not None:
            self.im_locations = im_locations
        if language_preference is not None:
            self.language_preference = language_preference
        if disability is not None:
            self.disability = disability
        if profile_url is not None:
            self.profile_url = profile_url
        if external_source is not None:
            self.external_source = external_source
        if profile_updates_by_recruiter is not None:
            self.profile_updates_by_recruiter = profile_updates_by_recruiter
        if flsa_status is not None:
            self.flsa_status = flsa_status
        if email_list is not None:
            self.email_list = email_list
        if experience is not None:
            self.experience = experience
        if career_level is not None:
            self.career_level = career_level
        if pup_id is not None:
            self.pup_id = pup_id
        if conf_request_source is not None:
            self.conf_request_source = conf_request_source
        if highest_education_org is not None:
            self.highest_education_org = highest_education_org
        if categories is not None:
            self.categories = categories
        if imported_candidates is not None:
            self.imported_candidates = imported_candidates
        if veteran is not None:
            self.veteran = veteran
        if recruiter_activity_timestamp is not None:
            self.recruiter_activity_timestamp = recruiter_activity_timestamp
        if candidate_created is not None:
            self.candidate_created = candidate_created
        if last_onboarding_date is not None:
            self.last_onboarding_date = last_onboarding_date
        if contacts is not None:
            self.contacts = contacts
        if im_referral_interests is not None:
            self.im_referral_interests = im_referral_interests
        if profile_completion_stage is not None:
            self.profile_completion_stage = profile_completion_stage
        if candidate_score is not None:
            self.candidate_score = candidate_score
        if recruiter_user_id is not None:
            self.recruiter_user_id = recruiter_user_id
        if address_logs is not None:
            self.address_logs = address_logs
        if last_name is not None:
            self.last_name = last_name
        if picture_s3_url is not None:
            self.picture_s3_url = picture_s3_url
        if is_fortune500 is not None:
            self.is_fortune500 = is_fortune500
        if unique_jobs_and_status_list is not None:
            self.unique_jobs_and_status_list = unique_jobs_and_status_list
        if date_created is not None:
            self.date_created = date_created
        if prefix is not None:
            self.prefix = prefix
        if internal is not None:
            self.internal = internal
        if spotlight_calculated is not None:
            self.spotlight_calculated = spotlight_calculated
        if old_candidate_anonymous is not None:
            self.old_candidate_anonymous = old_candidate_anonymous
        if ats_id is not None:
            self.ats_id = ats_id
        if additional_config is not None:
            self.additional_config = additional_config
        if current_company_name is not None:
            self.current_company_name = current_company_name
        if zip_code is not None:
            self.zip_code = zip_code
        if derived_ats_event_type is not None:
            self.derived_ats_event_type = derived_ats_event_type
        if diversity is not None:
            self.diversity = diversity
        if hispanic_or_latino is not None:
            self.hispanic_or_latino = hispanic_or_latino
        if recruiter_email is not None:
            self.recruiter_email = recruiter_email
        if recruiter_name is not None:
            self.recruiter_name = recruiter_name
        if consent is not None:
            self.consent = consent
        if consent_date is not None:
            self.consent_date = consent_date
        if preferred_first_name is not None:
            self.preferred_first_name = preferred_first_name
        if import_labels is not None:
            self.import_labels = import_labels
        if is_open_api_request is not None:
            self.is_open_api_request = is_open_api_request
        if parent is not None:
            self.parent = parent

    @property
    def job_level_ref_id(self):
        """Gets the job_level_ref_id of this CandidateDataCandidate.  # noqa: E501


        :return: The job_level_ref_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._job_level_ref_id

    @job_level_ref_id.setter
    def job_level_ref_id(self, job_level_ref_id):
        """Sets the job_level_ref_id of this CandidateDataCandidate.


        :param job_level_ref_id: The job_level_ref_id of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._job_level_ref_id = job_level_ref_id

    @property
    def attachments(self):
        """Gets the attachments of this CandidateDataCandidate.  # noqa: E501


        :return: The attachments of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateAttachments]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this CandidateDataCandidate.


        :param attachments: The attachments of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateAttachments]
        """

        self._attachments = attachments

    @property
    def skills_org(self):
        """Gets the skills_org of this CandidateDataCandidate.  # noqa: E501


        :return: The skills_org of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._skills_org

    @skills_org.setter
    def skills_org(self, skills_org):
        """Sets the skills_org of this CandidateDataCandidate.


        :param skills_org: The skills_org of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._skills_org = skills_org

    @property
    def last_activity_status(self):
        """Gets the last_activity_status of this CandidateDataCandidate.  # noqa: E501


        :return: The last_activity_status of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateLastActivityStatus
        """
        return self._last_activity_status

    @last_activity_status.setter
    def last_activity_status(self, last_activity_status):
        """Sets the last_activity_status of this CandidateDataCandidate.


        :param last_activity_status: The last_activity_status of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateLastActivityStatus
        """

        self._last_activity_status = last_activity_status

    @property
    def time_zone(self):
        """Gets the time_zone of this CandidateDataCandidate.  # noqa: E501


        :return: The time_zone of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this CandidateDataCandidate.


        :param time_zone: The time_zone of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def additional_fields(self):
        """Gets the additional_fields of this CandidateDataCandidate.  # noqa: E501


        :return: The additional_fields of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateAdditionalFields
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this CandidateDataCandidate.


        :param additional_fields: The additional_fields of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateAdditionalFields
        """

        self._additional_fields = additional_fields

    @property
    def spotlight_worked_for_competetiors(self):
        """Gets the spotlight_worked_for_competetiors of this CandidateDataCandidate.  # noqa: E501


        :return: The spotlight_worked_for_competetiors of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._spotlight_worked_for_competetiors

    @spotlight_worked_for_competetiors.setter
    def spotlight_worked_for_competetiors(self, spotlight_worked_for_competetiors):
        """Sets the spotlight_worked_for_competetiors of this CandidateDataCandidate.


        :param spotlight_worked_for_competetiors: The spotlight_worked_for_competetiors of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._spotlight_worked_for_competetiors = spotlight_worked_for_competetiors

    @property
    def user_type(self):
        """Gets the user_type of this CandidateDataCandidate.  # noqa: E501


        :return: The user_type of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this CandidateDataCandidate.


        :param user_type: The user_type of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._user_type = user_type

    @property
    def child_ref_num(self):
        """Gets the child_ref_num of this CandidateDataCandidate.  # noqa: E501


        :return: The child_ref_num of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateChildRefNum]
        """
        return self._child_ref_num

    @child_ref_num.setter
    def child_ref_num(self, child_ref_num):
        """Sets the child_ref_num of this CandidateDataCandidate.


        :param child_ref_num: The child_ref_num of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateChildRefNum]
        """

        self._child_ref_num = child_ref_num

    @property
    def category_list(self):
        """Gets the category_list of this CandidateDataCandidate.  # noqa: E501


        :return: The category_list of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[AddSkillsSkillList]
        """
        return self._category_list

    @category_list.setter
    def category_list(self, category_list):
        """Sets the category_list of this CandidateDataCandidate.


        :param category_list: The category_list of this CandidateDataCandidate.  # noqa: E501
        :type: list[AddSkillsSkillList]
        """

        self._category_list = category_list

    @property
    def education(self):
        """Gets the education of this CandidateDataCandidate.  # noqa: E501


        :return: The education of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateEducation]
        """
        return self._education

    @education.setter
    def education(self, education):
        """Sets the education of this CandidateDataCandidate.


        :param education: The education of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateEducation]
        """

        self._education = education

    @property
    def preferred_contact_method(self):
        """Gets the preferred_contact_method of this CandidateDataCandidate.  # noqa: E501


        :return: The preferred_contact_method of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._preferred_contact_method

    @preferred_contact_method.setter
    def preferred_contact_method(self, preferred_contact_method):
        """Sets the preferred_contact_method of this CandidateDataCandidate.


        :param preferred_contact_method: The preferred_contact_method of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._preferred_contact_method = preferred_contact_method

    @property
    def middle_name(self):
        """Gets the middle_name of this CandidateDataCandidate.  # noqa: E501


        :return: The middle_name of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this CandidateDataCandidate.


        :param middle_name: The middle_name of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def standardized_latest_date(self):
        """Gets the standardized_latest_date of this CandidateDataCandidate.  # noqa: E501


        :return: The standardized_latest_date of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._standardized_latest_date

    @standardized_latest_date.setter
    def standardized_latest_date(self, standardized_latest_date):
        """Sets the standardized_latest_date of this CandidateDataCandidate.


        :param standardized_latest_date: The standardized_latest_date of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._standardized_latest_date = standardized_latest_date

    @property
    def location_org(self):
        """Gets the location_org of this CandidateDataCandidate.  # noqa: E501


        :return: The location_org of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._location_org

    @location_org.setter
    def location_org(self, location_org):
        """Sets the location_org of this CandidateDataCandidate.


        :param location_org: The location_org of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._location_org = location_org

    @property
    def im_test_account(self):
        """Gets the im_test_account of this CandidateDataCandidate.  # noqa: E501


        :return: The im_test_account of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._im_test_account

    @im_test_account.setter
    def im_test_account(self, im_test_account):
        """Sets the im_test_account of this CandidateDataCandidate.


        :param im_test_account: The im_test_account of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._im_test_account = im_test_account

    @property
    def passport_number(self):
        """Gets the passport_number of this CandidateDataCandidate.  # noqa: E501


        :return: The passport_number of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._passport_number

    @passport_number.setter
    def passport_number(self, passport_number):
        """Sets the passport_number of this CandidateDataCandidate.


        :param passport_number: The passport_number of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._passport_number = passport_number

    @property
    def tenant_specific_additional_fields(self):
        """Gets the tenant_specific_additional_fields of this CandidateDataCandidate.  # noqa: E501


        :return: The tenant_specific_additional_fields of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateTenantSpecificAdditionalFields
        """
        return self._tenant_specific_additional_fields

    @tenant_specific_additional_fields.setter
    def tenant_specific_additional_fields(self, tenant_specific_additional_fields):
        """Sets the tenant_specific_additional_fields of this CandidateDataCandidate.


        :param tenant_specific_additional_fields: The tenant_specific_additional_fields of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateTenantSpecificAdditionalFields
        """

        self._tenant_specific_additional_fields = tenant_specific_additional_fields

    @property
    def interest_locations(self):
        """Gets the interest_locations of this CandidateDataCandidate.  # noqa: E501


        :return: The interest_locations of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._interest_locations

    @interest_locations.setter
    def interest_locations(self, interest_locations):
        """Sets the interest_locations of this CandidateDataCandidate.


        :param interest_locations: The interest_locations of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._interest_locations = interest_locations

    @property
    def relocate(self):
        """Gets the relocate of this CandidateDataCandidate.  # noqa: E501


        :return: The relocate of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._relocate

    @relocate.setter
    def relocate(self, relocate):
        """Sets the relocate of this CandidateDataCandidate.


        :param relocate: The relocate of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._relocate = relocate

    @property
    def current_company(self):
        """Gets the current_company of this CandidateDataCandidate.  # noqa: E501


        :return: The current_company of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateCurrentCompany
        """
        return self._current_company

    @current_company.setter
    def current_company(self, current_company):
        """Sets the current_company of this CandidateDataCandidate.


        :param current_company: The current_company of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateCurrentCompany
        """

        self._current_company = current_company

    @property
    def language_known(self):
        """Gets the language_known of this CandidateDataCandidate.  # noqa: E501


        :return: The language_known of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._language_known

    @language_known.setter
    def language_known(self, language_known):
        """Sets the language_known of this CandidateDataCandidate.


        :param language_known: The language_known of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._language_known = language_known

    @property
    def lat_long(self):
        """Gets the lat_long of this CandidateDataCandidate.  # noqa: E501


        :return: The lat_long of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._lat_long

    @lat_long.setter
    def lat_long(self, lat_long):
        """Sets the lat_long of this CandidateDataCandidate.


        :param lat_long: The lat_long of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._lat_long = lat_long

    @property
    def opt_in(self):
        """Gets the opt_in of this CandidateDataCandidate.  # noqa: E501


        :return: The opt_in of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._opt_in

    @opt_in.setter
    def opt_in(self, opt_in):
        """Sets the opt_in of this CandidateDataCandidate.


        :param opt_in: The opt_in of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._opt_in = opt_in

    @property
    def user_id(self):
        """Gets the user_id of this CandidateDataCandidate.  # noqa: E501


        :return: The user_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CandidateDataCandidate.


        :param user_id: The user_id of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def opt_in_text_communication(self):
        """Gets the opt_in_text_communication of this CandidateDataCandidate.  # noqa: E501


        :return: The opt_in_text_communication of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._opt_in_text_communication

    @opt_in_text_communication.setter
    def opt_in_text_communication(self, opt_in_text_communication):
        """Sets the opt_in_text_communication of this CandidateDataCandidate.


        :param opt_in_text_communication: The opt_in_text_communication of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._opt_in_text_communication = opt_in_text_communication

    @property
    def recruiters_user_id(self):
        """Gets the recruiters_user_id of this CandidateDataCandidate.  # noqa: E501


        :return: The recruiters_user_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._recruiters_user_id

    @recruiters_user_id.setter
    def recruiters_user_id(self, recruiters_user_id):
        """Sets the recruiters_user_id of this CandidateDataCandidate.


        :param recruiters_user_id: The recruiters_user_id of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._recruiters_user_id = recruiters_user_id

    @property
    def current_company_org(self):
        """Gets the current_company_org of this CandidateDataCandidate.  # noqa: E501


        :return: The current_company_org of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateCurrentCompanyOrg
        """
        return self._current_company_org

    @current_company_org.setter
    def current_company_org(self, current_company_org):
        """Sets the current_company_org of this CandidateDataCandidate.


        :param current_company_org: The current_company_org of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateCurrentCompanyOrg
        """

        self._current_company_org = current_company_org

    @property
    def target_companies(self):
        """Gets the target_companies of this CandidateDataCandidate.  # noqa: E501


        :return: The target_companies of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[AddSkillsSkillList]
        """
        return self._target_companies

    @target_companies.setter
    def target_companies(self, target_companies):
        """Sets the target_companies of this CandidateDataCandidate.


        :param target_companies: The target_companies of this CandidateDataCandidate.  # noqa: E501
        :type: list[AddSkillsSkillList]
        """

        self._target_companies = target_companies

    @property
    def spotlight_worked_for_top_company(self):
        """Gets the spotlight_worked_for_top_company of this CandidateDataCandidate.  # noqa: E501


        :return: The spotlight_worked_for_top_company of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._spotlight_worked_for_top_company

    @spotlight_worked_for_top_company.setter
    def spotlight_worked_for_top_company(self, spotlight_worked_for_top_company):
        """Sets the spotlight_worked_for_top_company of this CandidateDataCandidate.


        :param spotlight_worked_for_top_company: The spotlight_worked_for_top_company of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._spotlight_worked_for_top_company = spotlight_worked_for_top_company

    @property
    def opted_out_by_recruiter(self):
        """Gets the opted_out_by_recruiter of this CandidateDataCandidate.  # noqa: E501


        :return: The opted_out_by_recruiter of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._opted_out_by_recruiter

    @opted_out_by_recruiter.setter
    def opted_out_by_recruiter(self, opted_out_by_recruiter):
        """Sets the opted_out_by_recruiter of this CandidateDataCandidate.


        :param opted_out_by_recruiter: The opted_out_by_recruiter of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._opted_out_by_recruiter = opted_out_by_recruiter

    @property
    def professional_memberships(self):
        """Gets the professional_memberships of this CandidateDataCandidate.  # noqa: E501


        :return: The professional_memberships of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateProfessionalMemberships]
        """
        return self._professional_memberships

    @professional_memberships.setter
    def professional_memberships(self, professional_memberships):
        """Sets the professional_memberships of this CandidateDataCandidate.


        :param professional_memberships: The professional_memberships of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateProfessionalMemberships]
        """

        self._professional_memberships = professional_memberships

    @property
    def conf_request_priority(self):
        """Gets the conf_request_priority of this CandidateDataCandidate.  # noqa: E501


        :return: The conf_request_priority of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._conf_request_priority

    @conf_request_priority.setter
    def conf_request_priority(self, conf_request_priority):
        """Sets the conf_request_priority of this CandidateDataCandidate.


        :param conf_request_priority: The conf_request_priority of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._conf_request_priority = conf_request_priority

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this CandidateDataCandidate.  # noqa: E501


        :return: The last_update_timestamp of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this CandidateDataCandidate.


        :param last_update_timestamp: The last_update_timestamp of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def im_profile_id(self):
        """Gets the im_profile_id of this CandidateDataCandidate.  # noqa: E501


        :return: The im_profile_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._im_profile_id

    @im_profile_id.setter
    def im_profile_id(self, im_profile_id):
        """Sets the im_profile_id of this CandidateDataCandidate.


        :param im_profile_id: The im_profile_id of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._im_profile_id = im_profile_id

    @property
    def skills(self):
        """Gets the skills of this CandidateDataCandidate.  # noqa: E501


        :return: The skills of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this CandidateDataCandidate.


        :param skills: The skills of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._skills = skills

    @property
    def is_join_tenant_community(self):
        """Gets the is_join_tenant_community of this CandidateDataCandidate.  # noqa: E501


        :return: The is_join_tenant_community of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._is_join_tenant_community

    @is_join_tenant_community.setter
    def is_join_tenant_community(self, is_join_tenant_community):
        """Sets the is_join_tenant_community of this CandidateDataCandidate.


        :param is_join_tenant_community: The is_join_tenant_community of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._is_join_tenant_community = is_join_tenant_community

    @property
    def spotlight_is_ivy_league(self):
        """Gets the spotlight_is_ivy_league of this CandidateDataCandidate.  # noqa: E501


        :return: The spotlight_is_ivy_league of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._spotlight_is_ivy_league

    @spotlight_is_ivy_league.setter
    def spotlight_is_ivy_league(self, spotlight_is_ivy_league):
        """Sets the spotlight_is_ivy_league of this CandidateDataCandidate.


        :param spotlight_is_ivy_league: The spotlight_is_ivy_league of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._spotlight_is_ivy_league = spotlight_is_ivy_league

    @property
    def linked_in_profile_url(self):
        """Gets the linked_in_profile_url of this CandidateDataCandidate.  # noqa: E501


        :return: The linked_in_profile_url of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._linked_in_profile_url

    @linked_in_profile_url.setter
    def linked_in_profile_url(self, linked_in_profile_url):
        """Sets the linked_in_profile_url of this CandidateDataCandidate.


        :param linked_in_profile_url: The linked_in_profile_url of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._linked_in_profile_url = linked_in_profile_url

    @property
    def preferred_location_list(self):
        """Gets the preferred_location_list of this CandidateDataCandidate.  # noqa: E501


        :return: The preferred_location_list of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidatePreferredLocationList]
        """
        return self._preferred_location_list

    @preferred_location_list.setter
    def preferred_location_list(self, preferred_location_list):
        """Sets the preferred_location_list of this CandidateDataCandidate.


        :param preferred_location_list: The preferred_location_list of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidatePreferredLocationList]
        """

        self._preferred_location_list = preferred_location_list

    @property
    def education_org(self):
        """Gets the education_org of this CandidateDataCandidate.  # noqa: E501


        :return: The education_org of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateEducationOrg]
        """
        return self._education_org

    @education_org.setter
    def education_org(self, education_org):
        """Sets the education_org of this CandidateDataCandidate.


        :param education_org: The education_org of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateEducationOrg]
        """

        self._education_org = education_org

    @property
    def race(self):
        """Gets the race of this CandidateDataCandidate.  # noqa: E501


        :return: The race of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._race

    @race.setter
    def race(self, race):
        """Sets the race of this CandidateDataCandidate.


        :param race: The race of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._race = race

    @property
    def spotlight_is_management(self):
        """Gets the spotlight_is_management of this CandidateDataCandidate.  # noqa: E501


        :return: The spotlight_is_management of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._spotlight_is_management

    @spotlight_is_management.setter
    def spotlight_is_management(self, spotlight_is_management):
        """Sets the spotlight_is_management of this CandidateDataCandidate.


        :param spotlight_is_management: The spotlight_is_management of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._spotlight_is_management = spotlight_is_management

    @property
    def swoop_profile_id(self):
        """Gets the swoop_profile_id of this CandidateDataCandidate.  # noqa: E501


        :return: The swoop_profile_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._swoop_profile_id

    @swoop_profile_id.setter
    def swoop_profile_id(self, swoop_profile_id):
        """Sets the swoop_profile_id of this CandidateDataCandidate.


        :param swoop_profile_id: The swoop_profile_id of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._swoop_profile_id = swoop_profile_id

    @property
    def alert_data(self):
        """Gets the alert_data of this CandidateDataCandidate.  # noqa: E501


        :return: The alert_data of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateAlertData
        """
        return self._alert_data

    @alert_data.setter
    def alert_data(self, alert_data):
        """Sets the alert_data of this CandidateDataCandidate.


        :param alert_data: The alert_data of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateAlertData
        """

        self._alert_data = alert_data

    @property
    def traffic_source_list(self):
        """Gets the traffic_source_list of this CandidateDataCandidate.  # noqa: E501


        :return: The traffic_source_list of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateTrafficSourceList]
        """
        return self._traffic_source_list

    @traffic_source_list.setter
    def traffic_source_list(self, traffic_source_list):
        """Sets the traffic_source_list of this CandidateDataCandidate.


        :param traffic_source_list: The traffic_source_list of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateTrafficSourceList]
        """

        self._traffic_source_list = traffic_source_list

    @property
    def highest_education(self):
        """Gets the highest_education of this CandidateDataCandidate.  # noqa: E501


        :return: The highest_education of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateHighestEducation
        """
        return self._highest_education

    @highest_education.setter
    def highest_education(self, highest_education):
        """Sets the highest_education of this CandidateDataCandidate.


        :param highest_education: The highest_education of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateHighestEducation
        """

        self._highest_education = highest_education

    @property
    def ml_fields_list(self):
        """Gets the ml_fields_list of this CandidateDataCandidate.  # noqa: E501


        :return: The ml_fields_list of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateMlFieldsList]
        """
        return self._ml_fields_list

    @ml_fields_list.setter
    def ml_fields_list(self, ml_fields_list):
        """Sets the ml_fields_list of this CandidateDataCandidate.


        :param ml_fields_list: The ml_fields_list of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateMlFieldsList]
        """

        self._ml_fields_list = ml_fields_list

    @property
    def apply_transaction_id(self):
        """Gets the apply_transaction_id of this CandidateDataCandidate.  # noqa: E501


        :return: The apply_transaction_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._apply_transaction_id

    @apply_transaction_id.setter
    def apply_transaction_id(self, apply_transaction_id):
        """Sets the apply_transaction_id of this CandidateDataCandidate.


        :param apply_transaction_id: The apply_transaction_id of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._apply_transaction_id = apply_transaction_id

    @property
    def short_term_goal(self):
        """Gets the short_term_goal of this CandidateDataCandidate.  # noqa: E501


        :return: The short_term_goal of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._short_term_goal

    @short_term_goal.setter
    def short_term_goal(self, short_term_goal):
        """Sets the short_term_goal of this CandidateDataCandidate.


        :param short_term_goal: The short_term_goal of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._short_term_goal = short_term_goal

    @property
    def apply_sources(self):
        """Gets the apply_sources of this CandidateDataCandidate.  # noqa: E501


        :return: The apply_sources of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._apply_sources

    @apply_sources.setter
    def apply_sources(self, apply_sources):
        """Sets the apply_sources of this CandidateDataCandidate.


        :param apply_sources: The apply_sources of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._apply_sources = apply_sources

    @property
    def alert_url(self):
        """Gets the alert_url of this CandidateDataCandidate.  # noqa: E501


        :return: The alert_url of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._alert_url

    @alert_url.setter
    def alert_url(self, alert_url):
        """Sets the alert_url of this CandidateDataCandidate.


        :param alert_url: The alert_url of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._alert_url = alert_url

    @property
    def is_ivy_league(self):
        """Gets the is_ivy_league of this CandidateDataCandidate.  # noqa: E501


        :return: The is_ivy_league of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._is_ivy_league

    @is_ivy_league.setter
    def is_ivy_league(self, is_ivy_league):
        """Sets the is_ivy_league of this CandidateDataCandidate.


        :param is_ivy_league: The is_ivy_league of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._is_ivy_league = is_ivy_league

    @property
    def long_term_goal(self):
        """Gets the long_term_goal of this CandidateDataCandidate.  # noqa: E501


        :return: The long_term_goal of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._long_term_goal

    @long_term_goal.setter
    def long_term_goal(self, long_term_goal):
        """Sets the long_term_goal of this CandidateDataCandidate.


        :param long_term_goal: The long_term_goal of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._long_term_goal = long_term_goal

    @property
    def candidate_opt_in_request(self):
        """Gets the candidate_opt_in_request of this CandidateDataCandidate.  # noqa: E501


        :return: The candidate_opt_in_request of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._candidate_opt_in_request

    @candidate_opt_in_request.setter
    def candidate_opt_in_request(self, candidate_opt_in_request):
        """Sets the candidate_opt_in_request of this CandidateDataCandidate.


        :param candidate_opt_in_request: The candidate_opt_in_request of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._candidate_opt_in_request = candidate_opt_in_request

    @property
    def profile_enrichment_date(self):
        """Gets the profile_enrichment_date of this CandidateDataCandidate.  # noqa: E501


        :return: The profile_enrichment_date of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._profile_enrichment_date

    @profile_enrichment_date.setter
    def profile_enrichment_date(self, profile_enrichment_date):
        """Sets the profile_enrichment_date of this CandidateDataCandidate.


        :param profile_enrichment_date: The profile_enrichment_date of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._profile_enrichment_date = profile_enrichment_date

    @property
    def spotlight_is_senior_role(self):
        """Gets the spotlight_is_senior_role of this CandidateDataCandidate.  # noqa: E501


        :return: The spotlight_is_senior_role of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._spotlight_is_senior_role

    @spotlight_is_senior_role.setter
    def spotlight_is_senior_role(self, spotlight_is_senior_role):
        """Sets the spotlight_is_senior_role of this CandidateDataCandidate.


        :param spotlight_is_senior_role: The spotlight_is_senior_role of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._spotlight_is_senior_role = spotlight_is_senior_role

    @property
    def job_title(self):
        """Gets the job_title of this CandidateDataCandidate.  # noqa: E501


        :return: The job_title of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this CandidateDataCandidate.


        :param job_title: The job_title of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def im_interests(self):
        """Gets the im_interests of this CandidateDataCandidate.  # noqa: E501


        :return: The im_interests of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[AddSkillsSkillList]
        """
        return self._im_interests

    @im_interests.setter
    def im_interests(self, im_interests):
        """Sets the im_interests of this CandidateDataCandidate.


        :param im_interests: The im_interests of this CandidateDataCandidate.  # noqa: E501
        :type: list[AddSkillsSkillList]
        """

        self._im_interests = im_interests

    @property
    def social_profile(self):
        """Gets the social_profile of this CandidateDataCandidate.  # noqa: E501


        :return: The social_profile of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateSocialProfile]
        """
        return self._social_profile

    @social_profile.setter
    def social_profile(self, social_profile):
        """Sets the social_profile of this CandidateDataCandidate.


        :param social_profile: The social_profile of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateSocialProfile]
        """

        self._social_profile = social_profile

    @property
    def sms_opt_in_status(self):
        """Gets the sms_opt_in_status of this CandidateDataCandidate.  # noqa: E501


        :return: The sms_opt_in_status of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._sms_opt_in_status

    @sms_opt_in_status.setter
    def sms_opt_in_status(self, sms_opt_in_status):
        """Sets the sms_opt_in_status of this CandidateDataCandidate.


        :param sms_opt_in_status: The sms_opt_in_status of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._sms_opt_in_status = sms_opt_in_status

    @property
    def first_name(self):
        """Gets the first_name of this CandidateDataCandidate.  # noqa: E501


        :return: The first_name of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CandidateDataCandidate.


        :param first_name: The first_name of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def new_email(self):
        """Gets the new_email of this CandidateDataCandidate.  # noqa: E501


        :return: The new_email of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._new_email

    @new_email.setter
    def new_email(self, new_email):
        """Sets the new_email of this CandidateDataCandidate.


        :param new_email: The new_email of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._new_email = new_email

    @property
    def pushed_to_atson(self):
        """Gets the pushed_to_atson of this CandidateDataCandidate.  # noqa: E501


        :return: The pushed_to_atson of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._pushed_to_atson

    @pushed_to_atson.setter
    def pushed_to_atson(self, pushed_to_atson):
        """Sets the pushed_to_atson of this CandidateDataCandidate.


        :param pushed_to_atson: The pushed_to_atson of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._pushed_to_atson = pushed_to_atson

    @property
    def profile_created_by(self):
        """Gets the profile_created_by of this CandidateDataCandidate.  # noqa: E501


        :return: The profile_created_by of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateProfileCreatedBy
        """
        return self._profile_created_by

    @profile_created_by.setter
    def profile_created_by(self, profile_created_by):
        """Sets the profile_created_by of this CandidateDataCandidate.


        :param profile_created_by: The profile_created_by of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateProfileCreatedBy
        """

        self._profile_created_by = profile_created_by

    @property
    def experience_range(self):
        """Gets the experience_range of this CandidateDataCandidate.  # noqa: E501


        :return: The experience_range of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateExperienceRange
        """
        return self._experience_range

    @experience_range.setter
    def experience_range(self, experience_range):
        """Sets the experience_range of this CandidateDataCandidate.


        :param experience_range: The experience_range of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateExperienceRange
        """

        self._experience_range = experience_range

    @property
    def referral_source(self):
        """Gets the referral_source of this CandidateDataCandidate.  # noqa: E501


        :return: The referral_source of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._referral_source

    @referral_source.setter
    def referral_source(self, referral_source):
        """Sets the referral_source of this CandidateDataCandidate.


        :param referral_source: The referral_source of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._referral_source = referral_source

    @property
    def opt_in_single_sms(self):
        """Gets the opt_in_single_sms of this CandidateDataCandidate.  # noqa: E501


        :return: The opt_in_single_sms of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._opt_in_single_sms

    @opt_in_single_sms.setter
    def opt_in_single_sms(self, opt_in_single_sms):
        """Sets the opt_in_single_sms of this CandidateDataCandidate.


        :param opt_in_single_sms: The opt_in_single_sms of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._opt_in_single_sms = opt_in_single_sms

    @property
    def previous_employee_ids(self):
        """Gets the previous_employee_ids of this CandidateDataCandidate.  # noqa: E501


        :return: The previous_employee_ids of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._previous_employee_ids

    @previous_employee_ids.setter
    def previous_employee_ids(self, previous_employee_ids):
        """Sets the previous_employee_ids of this CandidateDataCandidate.


        :param previous_employee_ids: The previous_employee_ids of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._previous_employee_ids = previous_employee_ids

    @property
    def grade(self):
        """Gets the grade of this CandidateDataCandidate.  # noqa: E501


        :return: The grade of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this CandidateDataCandidate.


        :param grade: The grade of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._grade = grade

    @property
    def job_code(self):
        """Gets the job_code of this CandidateDataCandidate.  # noqa: E501


        :return: The job_code of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._job_code

    @job_code.setter
    def job_code(self, job_code):
        """Sets the job_code of this CandidateDataCandidate.


        :param job_code: The job_code of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._job_code = job_code

    @property
    def awards(self):
        """Gets the awards of this CandidateDataCandidate.  # noqa: E501


        :return: The awards of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[AwardDataAwards]
        """
        return self._awards

    @awards.setter
    def awards(self, awards):
        """Sets the awards of this CandidateDataCandidate.


        :param awards: The awards of this CandidateDataCandidate.  # noqa: E501
        :type: list[AwardDataAwards]
        """

        self._awards = awards

    @property
    def company(self):
        """Gets the company of this CandidateDataCandidate.  # noqa: E501


        :return: The company of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CandidateDataCandidate.


        :param company: The company of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def resume_url(self):
        """Gets the resume_url of this CandidateDataCandidate.  # noqa: E501


        :return: The resume_url of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._resume_url

    @resume_url.setter
    def resume_url(self, resume_url):
        """Sets the resume_url of this CandidateDataCandidate.


        :param resume_url: The resume_url of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._resume_url = resume_url

    @property
    def user_status(self):
        """Gets the user_status of this CandidateDataCandidate.  # noqa: E501


        :return: The user_status of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this CandidateDataCandidate.


        :param user_status: The user_status of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._user_status = user_status

    @property
    def single_sms_opt_in_status(self):
        """Gets the single_sms_opt_in_status of this CandidateDataCandidate.  # noqa: E501


        :return: The single_sms_opt_in_status of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._single_sms_opt_in_status

    @single_sms_opt_in_status.setter
    def single_sms_opt_in_status(self, single_sms_opt_in_status):
        """Sets the single_sms_opt_in_status of this CandidateDataCandidate.


        :param single_sms_opt_in_status: The single_sms_opt_in_status of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._single_sms_opt_in_status = single_sms_opt_in_status

    @property
    def address(self):
        """Gets the address of this CandidateDataCandidate.  # noqa: E501


        :return: The address of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateAddress]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CandidateDataCandidate.


        :param address: The address of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateAddress]
        """

        self._address = address

    @property
    def geolocation(self):
        """Gets the geolocation of this CandidateDataCandidate.  # noqa: E501


        :return: The geolocation of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateGeolocation
        """
        return self._geolocation

    @geolocation.setter
    def geolocation(self, geolocation):
        """Sets the geolocation of this CandidateDataCandidate.


        :param geolocation: The geolocation of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateGeolocation
        """

        self._geolocation = geolocation

    @property
    def scope_attr(self):
        """Gets the scope_attr of this CandidateDataCandidate.  # noqa: E501


        :return: The scope_attr of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateAlertData
        """
        return self._scope_attr

    @scope_attr.setter
    def scope_attr(self, scope_attr):
        """Sets the scope_attr of this CandidateDataCandidate.


        :param scope_attr: The scope_attr of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateAlertData
        """

        self._scope_attr = scope_attr

    @property
    def ethnicity(self):
        """Gets the ethnicity of this CandidateDataCandidate.  # noqa: E501


        :return: The ethnicity of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._ethnicity

    @ethnicity.setter
    def ethnicity(self, ethnicity):
        """Sets the ethnicity of this CandidateDataCandidate.


        :param ethnicity: The ethnicity of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._ethnicity = ethnicity

    @property
    def twitter_url(self):
        """Gets the twitter_url of this CandidateDataCandidate.  # noqa: E501


        :return: The twitter_url of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._twitter_url

    @twitter_url.setter
    def twitter_url(self, twitter_url):
        """Sets the twitter_url of this CandidateDataCandidate.


        :param twitter_url: The twitter_url of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._twitter_url = twitter_url

    @property
    def partner_tenant(self):
        """Gets the partner_tenant of this CandidateDataCandidate.  # noqa: E501


        :return: The partner_tenant of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._partner_tenant

    @partner_tenant.setter
    def partner_tenant(self, partner_tenant):
        """Sets the partner_tenant of this CandidateDataCandidate.


        :param partner_tenant: The partner_tenant of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._partner_tenant = partner_tenant

    @property
    def create_kafka_event(self):
        """Gets the create_kafka_event of this CandidateDataCandidate.  # noqa: E501


        :return: The create_kafka_event of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._create_kafka_event

    @create_kafka_event.setter
    def create_kafka_event(self, create_kafka_event):
        """Sets the create_kafka_event of this CandidateDataCandidate.


        :param create_kafka_event: The create_kafka_event of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._create_kafka_event = create_kafka_event

    @property
    def work_authorization(self):
        """Gets the work_authorization of this CandidateDataCandidate.  # noqa: E501


        :return: The work_authorization of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._work_authorization

    @work_authorization.setter
    def work_authorization(self, work_authorization):
        """Sets the work_authorization of this CandidateDataCandidate.


        :param work_authorization: The work_authorization of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._work_authorization = work_authorization

    @property
    def event_organizer(self):
        """Gets the event_organizer of this CandidateDataCandidate.  # noqa: E501


        :return: The event_organizer of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._event_organizer

    @event_organizer.setter
    def event_organizer(self, event_organizer):
        """Sets the event_organizer of this CandidateDataCandidate.


        :param event_organizer: The event_organizer of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._event_organizer = event_organizer

    @property
    def candidate_activity_timestamp(self):
        """Gets the candidate_activity_timestamp of this CandidateDataCandidate.  # noqa: E501


        :return: The candidate_activity_timestamp of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._candidate_activity_timestamp

    @candidate_activity_timestamp.setter
    def candidate_activity_timestamp(self, candidate_activity_timestamp):
        """Sets the candidate_activity_timestamp of this CandidateDataCandidate.


        :param candidate_activity_timestamp: The candidate_activity_timestamp of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._candidate_activity_timestamp = candidate_activity_timestamp

    @property
    def first_source(self):
        """Gets the first_source of this CandidateDataCandidate.  # noqa: E501


        :return: The first_source of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._first_source

    @first_source.setter
    def first_source(self, first_source):
        """Sets the first_source of this CandidateDataCandidate.


        :param first_source: The first_source of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._first_source = first_source

    @property
    def created_date(self):
        """Gets the created_date of this CandidateDataCandidate.  # noqa: E501


        :return: The created_date of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CandidateDataCandidate.


        :param created_date: The created_date of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._created_date = created_date

    @property
    def new_location(self):
        """Gets the new_location of this CandidateDataCandidate.  # noqa: E501


        :return: The new_location of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateNewLocation
        """
        return self._new_location

    @new_location.setter
    def new_location(self, new_location):
        """Sets the new_location of this CandidateDataCandidate.


        :param new_location: The new_location of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateNewLocation
        """

        self._new_location = new_location

    @property
    def opt_in_sms(self):
        """Gets the opt_in_sms of this CandidateDataCandidate.  # noqa: E501


        :return: The opt_in_sms of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._opt_in_sms

    @opt_in_sms.setter
    def opt_in_sms(self, opt_in_sms):
        """Sets the opt_in_sms of this CandidateDataCandidate.


        :param opt_in_sms: The opt_in_sms of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._opt_in_sms = opt_in_sms

    @property
    def profile_pic_url(self):
        """Gets the profile_pic_url of this CandidateDataCandidate.  # noqa: E501


        :return: The profile_pic_url of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._profile_pic_url

    @profile_pic_url.setter
    def profile_pic_url(self, profile_pic_url):
        """Sets the profile_pic_url of this CandidateDataCandidate.


        :param profile_pic_url: The profile_pic_url of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._profile_pic_url = profile_pic_url

    @property
    def top_rated_skills(self):
        """Gets the top_rated_skills of this CandidateDataCandidate.  # noqa: E501


        :return: The top_rated_skills of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateTopRatedSkills]
        """
        return self._top_rated_skills

    @top_rated_skills.setter
    def top_rated_skills(self, top_rated_skills):
        """Sets the top_rated_skills of this CandidateDataCandidate.


        :param top_rated_skills: The top_rated_skills of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateTopRatedSkills]
        """

        self._top_rated_skills = top_rated_skills

    @property
    def spotlight_is_fortune500(self):
        """Gets the spotlight_is_fortune500 of this CandidateDataCandidate.  # noqa: E501


        :return: The spotlight_is_fortune500 of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._spotlight_is_fortune500

    @spotlight_is_fortune500.setter
    def spotlight_is_fortune500(self, spotlight_is_fortune500):
        """Sets the spotlight_is_fortune500 of this CandidateDataCandidate.


        :param spotlight_is_fortune500: The spotlight_is_fortune500 of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._spotlight_is_fortune500 = spotlight_is_fortune500

    @property
    def skill_list(self):
        """Gets the skill_list of this CandidateDataCandidate.  # noqa: E501


        :return: The skill_list of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateSkillList]
        """
        return self._skill_list

    @skill_list.setter
    def skill_list(self, skill_list):
        """Sets the skill_list of this CandidateDataCandidate.


        :param skill_list: The skill_list of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateSkillList]
        """

        self._skill_list = skill_list

    @property
    def instagram_url(self):
        """Gets the instagram_url of this CandidateDataCandidate.  # noqa: E501


        :return: The instagram_url of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._instagram_url

    @instagram_url.setter
    def instagram_url(self, instagram_url):
        """Sets the instagram_url of this CandidateDataCandidate.


        :param instagram_url: The instagram_url of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._instagram_url = instagram_url

    @property
    def event_name(self):
        """Gets the event_name of this CandidateDataCandidate.  # noqa: E501


        :return: The event_name of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this CandidateDataCandidate.


        :param event_name: The event_name of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def team_id(self):
        """Gets the team_id of this CandidateDataCandidate.  # noqa: E501


        :return: The team_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this CandidateDataCandidate.


        :param team_id: The team_id of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def profile_status(self):
        """Gets the profile_status of this CandidateDataCandidate.  # noqa: E501


        :return: The profile_status of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateProfileStatus
        """
        return self._profile_status

    @profile_status.setter
    def profile_status(self, profile_status):
        """Sets the profile_status of this CandidateDataCandidate.


        :param profile_status: The profile_status of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateProfileStatus
        """

        self._profile_status = profile_status

    @property
    def relocation_date(self):
        """Gets the relocation_date of this CandidateDataCandidate.  # noqa: E501


        :return: The relocation_date of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._relocation_date

    @relocation_date.setter
    def relocation_date(self, relocation_date):
        """Sets the relocation_date of this CandidateDataCandidate.


        :param relocation_date: The relocation_date of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._relocation_date = relocation_date

    @property
    def ref_num(self):
        """Gets the ref_num of this CandidateDataCandidate.  # noqa: E501


        :return: The ref_num of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._ref_num

    @ref_num.setter
    def ref_num(self, ref_num):
        """Sets the ref_num of this CandidateDataCandidate.


        :param ref_num: The ref_num of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._ref_num = ref_num

    @property
    def designation(self):
        """Gets the designation of this CandidateDataCandidate.  # noqa: E501


        :return: The designation of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this CandidateDataCandidate.


        :param designation: The designation of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._designation = designation

    @property
    def updated_date(self):
        """Gets the updated_date of this CandidateDataCandidate.  # noqa: E501


        :return: The updated_date of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this CandidateDataCandidate.


        :param updated_date: The updated_date of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._updated_date = updated_date

    @property
    def certifications(self):
        """Gets the certifications of this CandidateDataCandidate.  # noqa: E501


        :return: The certifications of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateCertifications]
        """
        return self._certifications

    @certifications.setter
    def certifications(self, certifications):
        """Sets the certifications of this CandidateDataCandidate.


        :param certifications: The certifications of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateCertifications]
        """

        self._certifications = certifications

    @property
    def im_employment_type(self):
        """Gets the im_employment_type of this CandidateDataCandidate.  # noqa: E501


        :return: The im_employment_type of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._im_employment_type

    @im_employment_type.setter
    def im_employment_type(self, im_employment_type):
        """Sets the im_employment_type of this CandidateDataCandidate.


        :param im_employment_type: The im_employment_type of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._im_employment_type = im_employment_type

    @property
    def contacts_org(self):
        """Gets the contacts_org of this CandidateDataCandidate.  # noqa: E501


        :return: The contacts_org of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateContactsOrg]
        """
        return self._contacts_org

    @contacts_org.setter
    def contacts_org(self, contacts_org):
        """Sets the contacts_org of this CandidateDataCandidate.


        :param contacts_org: The contacts_org of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateContactsOrg]
        """

        self._contacts_org = contacts_org

    @property
    def recommendations(self):
        """Gets the recommendations of this CandidateDataCandidate.  # noqa: E501


        :return: The recommendations of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateRecommendations]
        """
        return self._recommendations

    @recommendations.setter
    def recommendations(self, recommendations):
        """Sets the recommendations of this CandidateDataCandidate.


        :param recommendations: The recommendations of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateRecommendations]
        """

        self._recommendations = recommendations

    @property
    def picture_url(self):
        """Gets the picture_url of this CandidateDataCandidate.  # noqa: E501


        :return: The picture_url of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this CandidateDataCandidate.


        :param picture_url: The picture_url of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._picture_url = picture_url

    @property
    def event_id(self):
        """Gets the event_id of this CandidateDataCandidate.  # noqa: E501


        :return: The event_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this CandidateDataCandidate.


        :param event_id: The event_id of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._event_id = event_id

    @property
    def emails(self):
        """Gets the emails of this CandidateDataCandidate.  # noqa: E501


        :return: The emails of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this CandidateDataCandidate.


        :param emails: The emails of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def location(self):
        """Gets the location of this CandidateDataCandidate.  # noqa: E501


        :return: The location of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CandidateDataCandidate.


        :param location: The location of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def spotlight_is_media_agencies(self):
        """Gets the spotlight_is_media_agencies of this CandidateDataCandidate.  # noqa: E501


        :return: The spotlight_is_media_agencies of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._spotlight_is_media_agencies

    @spotlight_is_media_agencies.setter
    def spotlight_is_media_agencies(self, spotlight_is_media_agencies):
        """Sets the spotlight_is_media_agencies of this CandidateDataCandidate.


        :param spotlight_is_media_agencies: The spotlight_is_media_agencies of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._spotlight_is_media_agencies = spotlight_is_media_agencies

    @property
    def gender(self):
        """Gets the gender of this CandidateDataCandidate.  # noqa: E501


        :return: The gender of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CandidateDataCandidate.


        :param gender: The gender of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def interests(self):
        """Gets the interests of this CandidateDataCandidate.  # noqa: E501


        :return: The interests of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._interests

    @interests.setter
    def interests(self, interests):
        """Sets the interests of this CandidateDataCandidate.


        :param interests: The interests of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._interests = interests

    @property
    def is_senior_role(self):
        """Gets the is_senior_role of this CandidateDataCandidate.  # noqa: E501


        :return: The is_senior_role of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._is_senior_role

    @is_senior_role.setter
    def is_senior_role(self, is_senior_role):
        """Sets the is_senior_role of this CandidateDataCandidate.


        :param is_senior_role: The is_senior_role of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._is_senior_role = is_senior_role

    @property
    def facebook_url(self):
        """Gets the facebook_url of this CandidateDataCandidate.  # noqa: E501


        :return: The facebook_url of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._facebook_url

    @facebook_url.setter
    def facebook_url(self, facebook_url):
        """Sets the facebook_url of this CandidateDataCandidate.


        :param facebook_url: The facebook_url of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._facebook_url = facebook_url

    @property
    def first_referrer_id(self):
        """Gets the first_referrer_id of this CandidateDataCandidate.  # noqa: E501


        :return: The first_referrer_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._first_referrer_id

    @first_referrer_id.setter
    def first_referrer_id(self, first_referrer_id):
        """Sets the first_referrer_id of this CandidateDataCandidate.


        :param first_referrer_id: The first_referrer_id of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._first_referrer_id = first_referrer_id

    @property
    def google_url(self):
        """Gets the google_url of this CandidateDataCandidate.  # noqa: E501


        :return: The google_url of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._google_url

    @google_url.setter
    def google_url(self, google_url):
        """Sets the google_url of this CandidateDataCandidate.


        :param google_url: The google_url of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._google_url = google_url

    @property
    def additional_request_info(self):
        """Gets the additional_request_info of this CandidateDataCandidate.  # noqa: E501


        :return: The additional_request_info of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateAdditionalRequestInfo
        """
        return self._additional_request_info

    @additional_request_info.setter
    def additional_request_info(self, additional_request_info):
        """Sets the additional_request_info of this CandidateDataCandidate.


        :param additional_request_info: The additional_request_info of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateAdditionalRequestInfo
        """

        self._additional_request_info = additional_request_info

    @property
    def utids(self):
        """Gets the utids of this CandidateDataCandidate.  # noqa: E501


        :return: The utids of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._utids

    @utids.setter
    def utids(self, utids):
        """Sets the utids of this CandidateDataCandidate.


        :param utids: The utids of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._utids = utids

    @property
    def md5_check(self):
        """Gets the md5_check of this CandidateDataCandidate.  # noqa: E501


        :return: The md5_check of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._md5_check

    @md5_check.setter
    def md5_check(self, md5_check):
        """Sets the md5_check of this CandidateDataCandidate.


        :param md5_check: The md5_check of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._md5_check = md5_check

    @property
    def language(self):
        """Gets the language of this CandidateDataCandidate.  # noqa: E501


        :return: The language of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CandidateDataCandidate.


        :param language: The language of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def linked_in_md5_sum(self):
        """Gets the linked_in_md5_sum of this CandidateDataCandidate.  # noqa: E501


        :return: The linked_in_md5_sum of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._linked_in_md5_sum

    @linked_in_md5_sum.setter
    def linked_in_md5_sum(self, linked_in_md5_sum):
        """Sets the linked_in_md5_sum of this CandidateDataCandidate.


        :param linked_in_md5_sum: The linked_in_md5_sum of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._linked_in_md5_sum = linked_in_md5_sum

    @property
    def experience_org(self):
        """Gets the experience_org of this CandidateDataCandidate.  # noqa: E501


        :return: The experience_org of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateExperienceOrg]
        """
        return self._experience_org

    @experience_org.setter
    def experience_org(self, experience_org):
        """Sets the experience_org of this CandidateDataCandidate.


        :param experience_org: The experience_org of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateExperienceOrg]
        """

        self._experience_org = experience_org

    @property
    def referrar(self):
        """Gets the referrar of this CandidateDataCandidate.  # noqa: E501


        :return: The referrar of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateReferrar]
        """
        return self._referrar

    @referrar.setter
    def referrar(self, referrar):
        """Sets the referrar of this CandidateDataCandidate.


        :param referrar: The referrar of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateReferrar]
        """

        self._referrar = referrar

    @property
    def new_address(self):
        """Gets the new_address of this CandidateDataCandidate.  # noqa: E501


        :return: The new_address of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateNewLocation]
        """
        return self._new_address

    @new_address.setter
    def new_address(self, new_address):
        """Sets the new_address of this CandidateDataCandidate.


        :param new_address: The new_address of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateNewLocation]
        """

        self._new_address = new_address

    @property
    def preferred_communication_mode(self):
        """Gets the preferred_communication_mode of this CandidateDataCandidate.  # noqa: E501


        :return: The preferred_communication_mode of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidatePreferredCommunicationMode
        """
        return self._preferred_communication_mode

    @preferred_communication_mode.setter
    def preferred_communication_mode(self, preferred_communication_mode):
        """Sets the preferred_communication_mode of this CandidateDataCandidate.


        :param preferred_communication_mode: The preferred_communication_mode of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidatePreferredCommunicationMode
        """

        self._preferred_communication_mode = preferred_communication_mode

    @property
    def im_locations(self):
        """Gets the im_locations of this CandidateDataCandidate.  # noqa: E501


        :return: The im_locations of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[AddSkillsSkillList]
        """
        return self._im_locations

    @im_locations.setter
    def im_locations(self, im_locations):
        """Sets the im_locations of this CandidateDataCandidate.


        :param im_locations: The im_locations of this CandidateDataCandidate.  # noqa: E501
        :type: list[AddSkillsSkillList]
        """

        self._im_locations = im_locations

    @property
    def language_preference(self):
        """Gets the language_preference of this CandidateDataCandidate.  # noqa: E501


        :return: The language_preference of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._language_preference

    @language_preference.setter
    def language_preference(self, language_preference):
        """Sets the language_preference of this CandidateDataCandidate.


        :param language_preference: The language_preference of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._language_preference = language_preference

    @property
    def disability(self):
        """Gets the disability of this CandidateDataCandidate.  # noqa: E501


        :return: The disability of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._disability

    @disability.setter
    def disability(self, disability):
        """Sets the disability of this CandidateDataCandidate.


        :param disability: The disability of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._disability = disability

    @property
    def profile_url(self):
        """Gets the profile_url of this CandidateDataCandidate.  # noqa: E501


        :return: The profile_url of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._profile_url

    @profile_url.setter
    def profile_url(self, profile_url):
        """Sets the profile_url of this CandidateDataCandidate.


        :param profile_url: The profile_url of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._profile_url = profile_url

    @property
    def external_source(self):
        """Gets the external_source of this CandidateDataCandidate.  # noqa: E501


        :return: The external_source of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._external_source

    @external_source.setter
    def external_source(self, external_source):
        """Sets the external_source of this CandidateDataCandidate.


        :param external_source: The external_source of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._external_source = external_source

    @property
    def profile_updates_by_recruiter(self):
        """Gets the profile_updates_by_recruiter of this CandidateDataCandidate.  # noqa: E501


        :return: The profile_updates_by_recruiter of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateProfileCreatedBy]
        """
        return self._profile_updates_by_recruiter

    @profile_updates_by_recruiter.setter
    def profile_updates_by_recruiter(self, profile_updates_by_recruiter):
        """Sets the profile_updates_by_recruiter of this CandidateDataCandidate.


        :param profile_updates_by_recruiter: The profile_updates_by_recruiter of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateProfileCreatedBy]
        """

        self._profile_updates_by_recruiter = profile_updates_by_recruiter

    @property
    def flsa_status(self):
        """Gets the flsa_status of this CandidateDataCandidate.  # noqa: E501


        :return: The flsa_status of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._flsa_status

    @flsa_status.setter
    def flsa_status(self, flsa_status):
        """Sets the flsa_status of this CandidateDataCandidate.


        :param flsa_status: The flsa_status of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._flsa_status = flsa_status

    @property
    def email_list(self):
        """Gets the email_list of this CandidateDataCandidate.  # noqa: E501


        :return: The email_list of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateEmailList]
        """
        return self._email_list

    @email_list.setter
    def email_list(self, email_list):
        """Sets the email_list of this CandidateDataCandidate.


        :param email_list: The email_list of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateEmailList]
        """

        self._email_list = email_list

    @property
    def experience(self):
        """Gets the experience of this CandidateDataCandidate.  # noqa: E501


        :return: The experience of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateExperience]
        """
        return self._experience

    @experience.setter
    def experience(self, experience):
        """Sets the experience of this CandidateDataCandidate.


        :param experience: The experience of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateExperience]
        """

        self._experience = experience

    @property
    def career_level(self):
        """Gets the career_level of this CandidateDataCandidate.  # noqa: E501


        :return: The career_level of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._career_level

    @career_level.setter
    def career_level(self, career_level):
        """Sets the career_level of this CandidateDataCandidate.


        :param career_level: The career_level of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._career_level = career_level

    @property
    def pup_id(self):
        """Gets the pup_id of this CandidateDataCandidate.  # noqa: E501


        :return: The pup_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._pup_id

    @pup_id.setter
    def pup_id(self, pup_id):
        """Sets the pup_id of this CandidateDataCandidate.


        :param pup_id: The pup_id of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._pup_id = pup_id

    @property
    def conf_request_source(self):
        """Gets the conf_request_source of this CandidateDataCandidate.  # noqa: E501


        :return: The conf_request_source of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._conf_request_source

    @conf_request_source.setter
    def conf_request_source(self, conf_request_source):
        """Sets the conf_request_source of this CandidateDataCandidate.


        :param conf_request_source: The conf_request_source of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._conf_request_source = conf_request_source

    @property
    def highest_education_org(self):
        """Gets the highest_education_org of this CandidateDataCandidate.  # noqa: E501


        :return: The highest_education_org of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateHighestEducation
        """
        return self._highest_education_org

    @highest_education_org.setter
    def highest_education_org(self, highest_education_org):
        """Sets the highest_education_org of this CandidateDataCandidate.


        :param highest_education_org: The highest_education_org of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateHighestEducation
        """

        self._highest_education_org = highest_education_org

    @property
    def categories(self):
        """Gets the categories of this CandidateDataCandidate.  # noqa: E501


        :return: The categories of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this CandidateDataCandidate.


        :param categories: The categories of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def imported_candidates(self):
        """Gets the imported_candidates of this CandidateDataCandidate.  # noqa: E501


        :return: The imported_candidates of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateImportedCandidates]
        """
        return self._imported_candidates

    @imported_candidates.setter
    def imported_candidates(self, imported_candidates):
        """Sets the imported_candidates of this CandidateDataCandidate.


        :param imported_candidates: The imported_candidates of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateImportedCandidates]
        """

        self._imported_candidates = imported_candidates

    @property
    def veteran(self):
        """Gets the veteran of this CandidateDataCandidate.  # noqa: E501


        :return: The veteran of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._veteran

    @veteran.setter
    def veteran(self, veteran):
        """Sets the veteran of this CandidateDataCandidate.


        :param veteran: The veteran of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._veteran = veteran

    @property
    def recruiter_activity_timestamp(self):
        """Gets the recruiter_activity_timestamp of this CandidateDataCandidate.  # noqa: E501


        :return: The recruiter_activity_timestamp of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._recruiter_activity_timestamp

    @recruiter_activity_timestamp.setter
    def recruiter_activity_timestamp(self, recruiter_activity_timestamp):
        """Sets the recruiter_activity_timestamp of this CandidateDataCandidate.


        :param recruiter_activity_timestamp: The recruiter_activity_timestamp of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._recruiter_activity_timestamp = recruiter_activity_timestamp

    @property
    def candidate_created(self):
        """Gets the candidate_created of this CandidateDataCandidate.  # noqa: E501


        :return: The candidate_created of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._candidate_created

    @candidate_created.setter
    def candidate_created(self, candidate_created):
        """Sets the candidate_created of this CandidateDataCandidate.


        :param candidate_created: The candidate_created of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._candidate_created = candidate_created

    @property
    def last_onboarding_date(self):
        """Gets the last_onboarding_date of this CandidateDataCandidate.  # noqa: E501


        :return: The last_onboarding_date of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._last_onboarding_date

    @last_onboarding_date.setter
    def last_onboarding_date(self, last_onboarding_date):
        """Sets the last_onboarding_date of this CandidateDataCandidate.


        :param last_onboarding_date: The last_onboarding_date of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._last_onboarding_date = last_onboarding_date

    @property
    def contacts(self):
        """Gets the contacts of this CandidateDataCandidate.  # noqa: E501


        :return: The contacts of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateContacts]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this CandidateDataCandidate.


        :param contacts: The contacts of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateContacts]
        """

        self._contacts = contacts

    @property
    def im_referral_interests(self):
        """Gets the im_referral_interests of this CandidateDataCandidate.  # noqa: E501


        :return: The im_referral_interests of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._im_referral_interests

    @im_referral_interests.setter
    def im_referral_interests(self, im_referral_interests):
        """Sets the im_referral_interests of this CandidateDataCandidate.


        :param im_referral_interests: The im_referral_interests of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._im_referral_interests = im_referral_interests

    @property
    def profile_completion_stage(self):
        """Gets the profile_completion_stage of this CandidateDataCandidate.  # noqa: E501


        :return: The profile_completion_stage of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._profile_completion_stage

    @profile_completion_stage.setter
    def profile_completion_stage(self, profile_completion_stage):
        """Sets the profile_completion_stage of this CandidateDataCandidate.


        :param profile_completion_stage: The profile_completion_stage of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._profile_completion_stage = profile_completion_stage

    @property
    def candidate_score(self):
        """Gets the candidate_score of this CandidateDataCandidate.  # noqa: E501


        :return: The candidate_score of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateCandidateScore
        """
        return self._candidate_score

    @candidate_score.setter
    def candidate_score(self, candidate_score):
        """Sets the candidate_score of this CandidateDataCandidate.


        :param candidate_score: The candidate_score of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateCandidateScore
        """

        self._candidate_score = candidate_score

    @property
    def recruiter_user_id(self):
        """Gets the recruiter_user_id of this CandidateDataCandidate.  # noqa: E501


        :return: The recruiter_user_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_user_id

    @recruiter_user_id.setter
    def recruiter_user_id(self, recruiter_user_id):
        """Sets the recruiter_user_id of this CandidateDataCandidate.


        :param recruiter_user_id: The recruiter_user_id of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._recruiter_user_id = recruiter_user_id

    @property
    def address_logs(self):
        """Gets the address_logs of this CandidateDataCandidate.  # noqa: E501


        :return: The address_logs of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateAddressLogs]
        """
        return self._address_logs

    @address_logs.setter
    def address_logs(self, address_logs):
        """Sets the address_logs of this CandidateDataCandidate.


        :param address_logs: The address_logs of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateAddressLogs]
        """

        self._address_logs = address_logs

    @property
    def last_name(self):
        """Gets the last_name of this CandidateDataCandidate.  # noqa: E501


        :return: The last_name of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CandidateDataCandidate.


        :param last_name: The last_name of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def picture_s3_url(self):
        """Gets the picture_s3_url of this CandidateDataCandidate.  # noqa: E501


        :return: The picture_s3_url of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._picture_s3_url

    @picture_s3_url.setter
    def picture_s3_url(self, picture_s3_url):
        """Sets the picture_s3_url of this CandidateDataCandidate.


        :param picture_s3_url: The picture_s3_url of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._picture_s3_url = picture_s3_url

    @property
    def is_fortune500(self):
        """Gets the is_fortune500 of this CandidateDataCandidate.  # noqa: E501


        :return: The is_fortune500 of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._is_fortune500

    @is_fortune500.setter
    def is_fortune500(self, is_fortune500):
        """Sets the is_fortune500 of this CandidateDataCandidate.


        :param is_fortune500: The is_fortune500 of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._is_fortune500 = is_fortune500

    @property
    def unique_jobs_and_status_list(self):
        """Gets the unique_jobs_and_status_list of this CandidateDataCandidate.  # noqa: E501


        :return: The unique_jobs_and_status_list of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateUniqueJobsAndStatusList]
        """
        return self._unique_jobs_and_status_list

    @unique_jobs_and_status_list.setter
    def unique_jobs_and_status_list(self, unique_jobs_and_status_list):
        """Sets the unique_jobs_and_status_list of this CandidateDataCandidate.


        :param unique_jobs_and_status_list: The unique_jobs_and_status_list of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateUniqueJobsAndStatusList]
        """

        self._unique_jobs_and_status_list = unique_jobs_and_status_list

    @property
    def date_created(self):
        """Gets the date_created of this CandidateDataCandidate.  # noqa: E501


        :return: The date_created of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CandidateDataCandidate.


        :param date_created: The date_created of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._date_created = date_created

    @property
    def prefix(self):
        """Gets the prefix of this CandidateDataCandidate.  # noqa: E501


        :return: The prefix of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this CandidateDataCandidate.


        :param prefix: The prefix of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def internal(self):
        """Gets the internal of this CandidateDataCandidate.  # noqa: E501


        :return: The internal of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this CandidateDataCandidate.


        :param internal: The internal of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._internal = internal

    @property
    def spotlight_calculated(self):
        """Gets the spotlight_calculated of this CandidateDataCandidate.  # noqa: E501


        :return: The spotlight_calculated of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._spotlight_calculated

    @spotlight_calculated.setter
    def spotlight_calculated(self, spotlight_calculated):
        """Sets the spotlight_calculated of this CandidateDataCandidate.


        :param spotlight_calculated: The spotlight_calculated of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._spotlight_calculated = spotlight_calculated

    @property
    def old_candidate_anonymous(self):
        """Gets the old_candidate_anonymous of this CandidateDataCandidate.  # noqa: E501


        :return: The old_candidate_anonymous of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._old_candidate_anonymous

    @old_candidate_anonymous.setter
    def old_candidate_anonymous(self, old_candidate_anonymous):
        """Sets the old_candidate_anonymous of this CandidateDataCandidate.


        :param old_candidate_anonymous: The old_candidate_anonymous of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._old_candidate_anonymous = old_candidate_anonymous

    @property
    def ats_id(self):
        """Gets the ats_id of this CandidateDataCandidate.  # noqa: E501


        :return: The ats_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._ats_id

    @ats_id.setter
    def ats_id(self, ats_id):
        """Sets the ats_id of this CandidateDataCandidate.


        :param ats_id: The ats_id of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._ats_id = ats_id

    @property
    def additional_config(self):
        """Gets the additional_config of this CandidateDataCandidate.  # noqa: E501


        :return: The additional_config of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateAlertData
        """
        return self._additional_config

    @additional_config.setter
    def additional_config(self, additional_config):
        """Sets the additional_config of this CandidateDataCandidate.


        :param additional_config: The additional_config of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateAlertData
        """

        self._additional_config = additional_config

    @property
    def current_company_name(self):
        """Gets the current_company_name of this CandidateDataCandidate.  # noqa: E501


        :return: The current_company_name of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._current_company_name

    @current_company_name.setter
    def current_company_name(self, current_company_name):
        """Sets the current_company_name of this CandidateDataCandidate.


        :param current_company_name: The current_company_name of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._current_company_name = current_company_name

    @property
    def zip_code(self):
        """Gets the zip_code of this CandidateDataCandidate.  # noqa: E501


        :return: The zip_code of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this CandidateDataCandidate.


        :param zip_code: The zip_code of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def derived_ats_event_type(self):
        """Gets the derived_ats_event_type of this CandidateDataCandidate.  # noqa: E501


        :return: The derived_ats_event_type of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._derived_ats_event_type

    @derived_ats_event_type.setter
    def derived_ats_event_type(self, derived_ats_event_type):
        """Sets the derived_ats_event_type of this CandidateDataCandidate.


        :param derived_ats_event_type: The derived_ats_event_type of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._derived_ats_event_type = derived_ats_event_type

    @property
    def diversity(self):
        """Gets the diversity of this CandidateDataCandidate.  # noqa: E501


        :return: The diversity of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._diversity

    @diversity.setter
    def diversity(self, diversity):
        """Sets the diversity of this CandidateDataCandidate.


        :param diversity: The diversity of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._diversity = diversity

    @property
    def hispanic_or_latino(self):
        """Gets the hispanic_or_latino of this CandidateDataCandidate.  # noqa: E501


        :return: The hispanic_or_latino of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._hispanic_or_latino

    @hispanic_or_latino.setter
    def hispanic_or_latino(self, hispanic_or_latino):
        """Sets the hispanic_or_latino of this CandidateDataCandidate.


        :param hispanic_or_latino: The hispanic_or_latino of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._hispanic_or_latino = hispanic_or_latino

    @property
    def recruiter_email(self):
        """Gets the recruiter_email of this CandidateDataCandidate.  # noqa: E501


        :return: The recruiter_email of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_email

    @recruiter_email.setter
    def recruiter_email(self, recruiter_email):
        """Sets the recruiter_email of this CandidateDataCandidate.


        :param recruiter_email: The recruiter_email of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._recruiter_email = recruiter_email

    @property
    def recruiter_name(self):
        """Gets the recruiter_name of this CandidateDataCandidate.  # noqa: E501


        :return: The recruiter_name of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_name

    @recruiter_name.setter
    def recruiter_name(self, recruiter_name):
        """Sets the recruiter_name of this CandidateDataCandidate.


        :param recruiter_name: The recruiter_name of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._recruiter_name = recruiter_name

    @property
    def consent(self):
        """Gets the consent of this CandidateDataCandidate.  # noqa: E501


        :return: The consent of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._consent

    @consent.setter
    def consent(self, consent):
        """Sets the consent of this CandidateDataCandidate.


        :param consent: The consent of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._consent = consent

    @property
    def consent_date(self):
        """Gets the consent_date of this CandidateDataCandidate.  # noqa: E501


        :return: The consent_date of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._consent_date

    @consent_date.setter
    def consent_date(self, consent_date):
        """Sets the consent_date of this CandidateDataCandidate.


        :param consent_date: The consent_date of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._consent_date = consent_date

    @property
    def preferred_first_name(self):
        """Gets the preferred_first_name of this CandidateDataCandidate.  # noqa: E501


        :return: The preferred_first_name of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._preferred_first_name

    @preferred_first_name.setter
    def preferred_first_name(self, preferred_first_name):
        """Sets the preferred_first_name of this CandidateDataCandidate.


        :param preferred_first_name: The preferred_first_name of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._preferred_first_name = preferred_first_name

    @property
    def import_labels(self):
        """Gets the import_labels of this CandidateDataCandidate.  # noqa: E501


        :return: The import_labels of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._import_labels

    @import_labels.setter
    def import_labels(self, import_labels):
        """Sets the import_labels of this CandidateDataCandidate.


        :param import_labels: The import_labels of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._import_labels = import_labels

    @property
    def is_open_api_request(self):
        """Gets the is_open_api_request of this CandidateDataCandidate.  # noqa: E501


        :return: The is_open_api_request of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._is_open_api_request

    @is_open_api_request.setter
    def is_open_api_request(self, is_open_api_request):
        """Sets the is_open_api_request of this CandidateDataCandidate.


        :param is_open_api_request: The is_open_api_request of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._is_open_api_request = is_open_api_request

    @property
    def parent(self):
        """Gets the parent of this CandidateDataCandidate.  # noqa: E501


        :return: The parent of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this CandidateDataCandidate.


        :param parent: The parent of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._parent = parent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateDataCandidate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateDataCandidate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
