# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateDataCandidateLastActivityStatus(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'priority_first_name': 'float',
        'priority_last_name': 'float',
        'priority_middle_name': 'float',
        'priority_language': 'float',
        'priority_location': 'float',
        'priority_education': 'float',
        'priority_experience': 'float',
        'cand_last_update_source': 'str',
        'internal_last_updated': 'float'
    }

    attribute_map = {
        'priority_first_name': 'priority_firstName',
        'priority_last_name': 'priority_lastName',
        'priority_middle_name': 'priority_middleName',
        'priority_language': 'priority_language',
        'priority_location': 'priority_location',
        'priority_education': 'priority_education',
        'priority_experience': 'priority_experience',
        'cand_last_update_source': 'cand_lastUpdateSource',
        'internal_last_updated': 'internalLastUpdated'
    }

    def __init__(self, priority_first_name=None, priority_last_name=None, priority_middle_name=None, priority_language=None, priority_location=None, priority_education=None, priority_experience=None, cand_last_update_source=None, internal_last_updated=None):  # noqa: E501
        """CandidateDataCandidateLastActivityStatus - a model defined in Swagger"""  # noqa: E501
        self._priority_first_name = None
        self._priority_last_name = None
        self._priority_middle_name = None
        self._priority_language = None
        self._priority_location = None
        self._priority_education = None
        self._priority_experience = None
        self._cand_last_update_source = None
        self._internal_last_updated = None
        self.discriminator = None
        if priority_first_name is not None:
            self.priority_first_name = priority_first_name
        if priority_last_name is not None:
            self.priority_last_name = priority_last_name
        if priority_middle_name is not None:
            self.priority_middle_name = priority_middle_name
        if priority_language is not None:
            self.priority_language = priority_language
        if priority_location is not None:
            self.priority_location = priority_location
        if priority_education is not None:
            self.priority_education = priority_education
        if priority_experience is not None:
            self.priority_experience = priority_experience
        if cand_last_update_source is not None:
            self.cand_last_update_source = cand_last_update_source
        if internal_last_updated is not None:
            self.internal_last_updated = internal_last_updated

    @property
    def priority_first_name(self):
        """Gets the priority_first_name of this CandidateDataCandidateLastActivityStatus.  # noqa: E501


        :return: The priority_first_name of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :rtype: float
        """
        return self._priority_first_name

    @priority_first_name.setter
    def priority_first_name(self, priority_first_name):
        """Sets the priority_first_name of this CandidateDataCandidateLastActivityStatus.


        :param priority_first_name: The priority_first_name of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :type: float
        """

        self._priority_first_name = priority_first_name

    @property
    def priority_last_name(self):
        """Gets the priority_last_name of this CandidateDataCandidateLastActivityStatus.  # noqa: E501


        :return: The priority_last_name of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :rtype: float
        """
        return self._priority_last_name

    @priority_last_name.setter
    def priority_last_name(self, priority_last_name):
        """Sets the priority_last_name of this CandidateDataCandidateLastActivityStatus.


        :param priority_last_name: The priority_last_name of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :type: float
        """

        self._priority_last_name = priority_last_name

    @property
    def priority_middle_name(self):
        """Gets the priority_middle_name of this CandidateDataCandidateLastActivityStatus.  # noqa: E501


        :return: The priority_middle_name of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :rtype: float
        """
        return self._priority_middle_name

    @priority_middle_name.setter
    def priority_middle_name(self, priority_middle_name):
        """Sets the priority_middle_name of this CandidateDataCandidateLastActivityStatus.


        :param priority_middle_name: The priority_middle_name of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :type: float
        """

        self._priority_middle_name = priority_middle_name

    @property
    def priority_language(self):
        """Gets the priority_language of this CandidateDataCandidateLastActivityStatus.  # noqa: E501


        :return: The priority_language of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :rtype: float
        """
        return self._priority_language

    @priority_language.setter
    def priority_language(self, priority_language):
        """Sets the priority_language of this CandidateDataCandidateLastActivityStatus.


        :param priority_language: The priority_language of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :type: float
        """

        self._priority_language = priority_language

    @property
    def priority_location(self):
        """Gets the priority_location of this CandidateDataCandidateLastActivityStatus.  # noqa: E501


        :return: The priority_location of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :rtype: float
        """
        return self._priority_location

    @priority_location.setter
    def priority_location(self, priority_location):
        """Sets the priority_location of this CandidateDataCandidateLastActivityStatus.


        :param priority_location: The priority_location of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :type: float
        """

        self._priority_location = priority_location

    @property
    def priority_education(self):
        """Gets the priority_education of this CandidateDataCandidateLastActivityStatus.  # noqa: E501


        :return: The priority_education of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :rtype: float
        """
        return self._priority_education

    @priority_education.setter
    def priority_education(self, priority_education):
        """Sets the priority_education of this CandidateDataCandidateLastActivityStatus.


        :param priority_education: The priority_education of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :type: float
        """

        self._priority_education = priority_education

    @property
    def priority_experience(self):
        """Gets the priority_experience of this CandidateDataCandidateLastActivityStatus.  # noqa: E501


        :return: The priority_experience of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :rtype: float
        """
        return self._priority_experience

    @priority_experience.setter
    def priority_experience(self, priority_experience):
        """Sets the priority_experience of this CandidateDataCandidateLastActivityStatus.


        :param priority_experience: The priority_experience of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :type: float
        """

        self._priority_experience = priority_experience

    @property
    def cand_last_update_source(self):
        """Gets the cand_last_update_source of this CandidateDataCandidateLastActivityStatus.  # noqa: E501


        :return: The cand_last_update_source of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :rtype: str
        """
        return self._cand_last_update_source

    @cand_last_update_source.setter
    def cand_last_update_source(self, cand_last_update_source):
        """Sets the cand_last_update_source of this CandidateDataCandidateLastActivityStatus.


        :param cand_last_update_source: The cand_last_update_source of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :type: str
        """

        self._cand_last_update_source = cand_last_update_source

    @property
    def internal_last_updated(self):
        """Gets the internal_last_updated of this CandidateDataCandidateLastActivityStatus.  # noqa: E501


        :return: The internal_last_updated of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :rtype: float
        """
        return self._internal_last_updated

    @internal_last_updated.setter
    def internal_last_updated(self, internal_last_updated):
        """Sets the internal_last_updated of this CandidateDataCandidateLastActivityStatus.


        :param internal_last_updated: The internal_last_updated of this CandidateDataCandidateLastActivityStatus.  # noqa: E501
        :type: float
        """

        self._internal_last_updated = internal_last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateDataCandidateLastActivityStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateDataCandidateLastActivityStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
