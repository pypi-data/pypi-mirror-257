# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateDataCandidateProfileStatus(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_key': 'str',
        'status_language': 'str',
        'locale': 'str',
        'status_final': 'str',
        'updated_date': 'float'
    }

    attribute_map = {
        'status_key': 'statusKey',
        'status_language': 'statusLanguage',
        'locale': 'locale',
        'status_final': 'statusFinal',
        'updated_date': 'updatedDate'
    }

    def __init__(self, status_key=None, status_language=None, locale=None, status_final=None, updated_date=None):  # noqa: E501
        """CandidateDataCandidateProfileStatus - a model defined in Swagger"""  # noqa: E501
        self._status_key = None
        self._status_language = None
        self._locale = None
        self._status_final = None
        self._updated_date = None
        self.discriminator = None
        if status_key is not None:
            self.status_key = status_key
        if status_language is not None:
            self.status_language = status_language
        if locale is not None:
            self.locale = locale
        if status_final is not None:
            self.status_final = status_final
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def status_key(self):
        """Gets the status_key of this CandidateDataCandidateProfileStatus.  # noqa: E501


        :return: The status_key of this CandidateDataCandidateProfileStatus.  # noqa: E501
        :rtype: str
        """
        return self._status_key

    @status_key.setter
    def status_key(self, status_key):
        """Sets the status_key of this CandidateDataCandidateProfileStatus.


        :param status_key: The status_key of this CandidateDataCandidateProfileStatus.  # noqa: E501
        :type: str
        """

        self._status_key = status_key

    @property
    def status_language(self):
        """Gets the status_language of this CandidateDataCandidateProfileStatus.  # noqa: E501


        :return: The status_language of this CandidateDataCandidateProfileStatus.  # noqa: E501
        :rtype: str
        """
        return self._status_language

    @status_language.setter
    def status_language(self, status_language):
        """Sets the status_language of this CandidateDataCandidateProfileStatus.


        :param status_language: The status_language of this CandidateDataCandidateProfileStatus.  # noqa: E501
        :type: str
        """

        self._status_language = status_language

    @property
    def locale(self):
        """Gets the locale of this CandidateDataCandidateProfileStatus.  # noqa: E501


        :return: The locale of this CandidateDataCandidateProfileStatus.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this CandidateDataCandidateProfileStatus.


        :param locale: The locale of this CandidateDataCandidateProfileStatus.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def status_final(self):
        """Gets the status_final of this CandidateDataCandidateProfileStatus.  # noqa: E501


        :return: The status_final of this CandidateDataCandidateProfileStatus.  # noqa: E501
        :rtype: str
        """
        return self._status_final

    @status_final.setter
    def status_final(self, status_final):
        """Sets the status_final of this CandidateDataCandidateProfileStatus.


        :param status_final: The status_final of this CandidateDataCandidateProfileStatus.  # noqa: E501
        :type: str
        """

        self._status_final = status_final

    @property
    def updated_date(self):
        """Gets the updated_date of this CandidateDataCandidateProfileStatus.  # noqa: E501


        :return: The updated_date of this CandidateDataCandidateProfileStatus.  # noqa: E501
        :rtype: float
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this CandidateDataCandidateProfileStatus.


        :param updated_date: The updated_date of this CandidateDataCandidateProfileStatus.  # noqa: E501
        :type: float
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateDataCandidateProfileStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateDataCandidateProfileStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
