# AUTOGENERATED ON 2023-11-20 12:30:27.276235
## DO NOT MODIFY THIS FILE MANUALLY

from autogoal.utils import nice_repr
from numpy import inf, nan

from autogoal.grammar import (
    ContinuousValue,
    DiscreteValue,
    CategoricalValue,
    BooleanValue,
)
from autogoal_transformers._builder import (
    PretrainedZeroShotClassifier,
    PetrainedTextClassifier,
    PretrainedTokenClassifier,
)
from autogoal.kb import *


@nice_repr
class TOC_Dslim_BertBaseNer(PretrainedTokenClassifier):
    name = "dslim/bert-base-NER"
    likes = 291
    downloads = 1010000.0
    id2label = {
        "0": "O",
        "1": "B-MISC",
        "2": "I-MISC",
        "3": "B-PER",
        "4": "I-PER",
        "5": "B-ORG",
        "6": "I-ORG",
        "7": "B-LOC",
        "8": "I-LOC",
    }
    num_classes = 9
    tags = 9

    def __init__(self):
        PretrainedTokenClassifier.__init__(self)


@nice_repr
class TOC_D4Data_BiomedicalNerAll(PretrainedTokenClassifier):
    name = "d4data/biomedical-ner-all"
    likes = 103
    downloads = 121000.0
    id2label = {
        "0": "O",
        "1": "B-Activity",
        "2": "B-Administration",
        "3": "B-Age",
        "4": "B-Area",
        "5": "B-Biological_attribute",
        "6": "B-Biological_structure",
        "7": "B-Clinical_event",
        "8": "B-Color",
        "9": "B-Coreference",
        "10": "B-Date",
        "11": "B-Detailed_description",
        "12": "B-Diagnostic_procedure",
        "13": "B-Disease_disorder",
        "14": "B-Distance",
        "15": "B-Dosage",
        "16": "B-Duration",
        "17": "B-Family_history",
        "18": "B-Frequency",
        "19": "B-Height",
        "20": "B-History",
        "21": "B-Lab_value",
        "22": "B-Mass",
        "23": "B-Medication",
        "24": "B-Non[biological](Detailed_description",
        "25": "B-Nonbiological_location",
        "26": "B-Occupation",
        "27": "B-Other_entity",
        "28": "B-Other_event",
        "29": "B-Outcome",
        "30": "B-Personal_[back](Biological_structure",
        "31": "B-Personal_background",
        "32": "B-Qualitative_concept",
        "33": "B-Quantitative_concept",
        "34": "B-Severity",
        "35": "B-Sex",
        "36": "B-Shape",
        "37": "B-Sign_symptom",
        "38": "B-Subject",
        "39": "B-Texture",
        "40": "B-Therapeutic_procedure",
        "41": "B-Time",
        "42": "B-Volume",
        "43": "B-Weight",
        "44": "I-Activity",
        "45": "I-Administration",
        "46": "I-Age",
        "47": "I-Area",
        "48": "I-Biological_attribute",
        "49": "I-Biological_structure",
        "50": "I-Clinical_event",
        "51": "I-Color",
        "52": "I-Coreference",
        "53": "I-Date",
        "54": "I-Detailed_description",
        "55": "I-Diagnostic_procedure",
        "56": "I-Disease_disorder",
        "57": "I-Distance",
        "58": "I-Dosage",
        "59": "I-Duration",
        "60": "I-Family_history",
        "61": "I-Frequency",
        "62": "I-Height",
        "63": "I-History",
        "64": "I-Lab_value",
        "65": "I-Mass",
        "66": "I-Medication",
        "67": "I-Nonbiological_location",
        "68": "I-Occupation",
        "69": "I-Other_entity",
        "70": "I-Other_event",
        "71": "I-Outcome",
        "72": "I-Personal_background",
        "73": "I-Qualitative_concept",
        "74": "I-Quantitative_concept",
        "75": "I-Severity",
        "76": "I-Shape",
        "77": "I-Sign_symptom",
        "78": "I-Subject",
        "79": "I-Texture",
        "80": "I-Therapeutic_procedure",
        "81": "I-Time",
        "82": "I-Volume",
        "83": "I-Weight",
    }
    num_classes = 84
    tags = 84

    def __init__(self):
        PretrainedTokenClassifier.__init__(self)


@nice_repr
class TOC_Dslim_BertLargeNer(PretrainedTokenClassifier):
    name = "dslim/bert-large-NER"
    likes = 101
    downloads = 722000.0
    id2label = {
        "0": "O",
        "1": "B-MISC",
        "2": "I-MISC",
        "3": "B-PER",
        "4": "I-PER",
        "5": "B-ORG",
        "6": "I-ORG",
        "7": "B-LOC",
        "8": "I-LOC",
    }
    num_classes = 9
    tags = 9

    def __init__(self):
        PretrainedTokenClassifier.__init__(self)


@nice_repr
class TOC_Oliverguhr_FullstopPunctuationMultilangLarge(PretrainedTokenClassifier):
    name = "oliverguhr/fullstop-punctuation-multilang-large"
    likes = 93
    downloads = 271000.0
    id2label = {"0": "0", "1": ".", "2": ",", "3": "?", "4": "-", "5": ":"}
    num_classes = 6
    tags = 6

    def __init__(self):
        PretrainedTokenClassifier.__init__(self)


@nice_repr
class TOC_JeanBaptiste_CamembertNer(PretrainedTokenClassifier):
    name = "Jean-Baptiste/camembert-ner"
    likes = 82
    downloads = 279000.0
    id2label = {"0": "O", "1": "I-LOC", "2": "I-PER", "3": "I-MISC", "4": "I-ORG"}
    num_classes = 5
    tags = 5

    def __init__(self):
        PretrainedTokenClassifier.__init__(self)


@nice_repr
class TOC_Ml6Team_KeyphraseExtractionKbirInspec(PretrainedTokenClassifier):
    name = "ml6team/keyphrase-extraction-kbir-inspec"
    likes = 81
    downloads = 24100.0
    id2label = {"0": "B-KEY", "1": "I-KEY", "2": "O"}
    num_classes = 3
    tags = 3

    def __init__(self):
        PretrainedTokenClassifier.__init__(self)


@nice_repr
class TOC_XlmRobertaLargeFinetunedConll03English(PretrainedTokenClassifier):
    name = "xlm-roberta-large-finetuned-conll03-english"
    likes = 74
    downloads = 238000.0
    id2label = {
        "0": "B-LOC",
        "1": "B-MISC",
        "2": "B-ORG",
        "3": "I-LOC",
        "4": "I-MISC",
        "5": "I-ORG",
        "6": "I-PER",
        "7": "O",
    }
    num_classes = 8
    tags = 8

    def __init__(self):
        PretrainedTokenClassifier.__init__(self)


@nice_repr
class TOC_Davlan_DistilbertBaseMultilingualCasedNerHrl(PretrainedTokenClassifier):
    name = "Davlan/distilbert-base-multilingual-cased-ner-hrl"
    likes = 73
    downloads = 1300000.0
    id2label = {
        "0": "O",
        "1": "B-DATE",
        "2": "I-DATE",
        "3": "B-PER",
        "4": "I-PER",
        "5": "B-ORG",
        "6": "I-ORG",
        "7": "B-LOC",
        "8": "I-LOC",
    }
    num_classes = 9
    tags = 9

    def __init__(self):
        PretrainedTokenClassifier.__init__(self)


@nice_repr
class TOC_Ckiplab_BertBaseChineseNer(PretrainedTokenClassifier):
    name = "ckiplab/bert-base-chinese-ner"
    likes = 61
    downloads = 1660000.0
    id2label = {
        "0": "O",
        "1": "B-CARDINAL",
        "2": "B-DATE",
        "3": "B-EVENT",
        "4": "B-FAC",
        "5": "B-GPE",
        "6": "B-LANGUAGE",
        "7": "B-LAW",
        "8": "B-LOC",
        "9": "B-MONEY",
        "10": "B-NORP",
        "11": "B-ORDINAL",
        "12": "B-ORG",
        "13": "B-PERCENT",
        "14": "B-PERSON",
        "15": "B-PRODUCT",
        "16": "B-QUANTITY",
        "17": "B-TIME",
        "18": "B-WORK_OF_ART",
        "19": "I-CARDINAL",
        "20": "I-DATE",
        "21": "I-EVENT",
        "22": "I-FAC",
        "23": "I-GPE",
        "24": "I-LANGUAGE",
        "25": "I-LAW",
        "26": "I-LOC",
        "27": "I-MONEY",
        "28": "I-NORP",
        "29": "I-ORDINAL",
        "30": "I-ORG",
        "31": "I-PERCENT",
        "32": "I-PERSON",
        "33": "I-PRODUCT",
        "34": "I-QUANTITY",
        "35": "I-TIME",
        "36": "I-WORK_OF_ART",
        "37": "E-CARDINAL",
        "38": "E-DATE",
        "39": "E-EVENT",
        "40": "E-FAC",
        "41": "E-GPE",
        "42": "E-LANGUAGE",
        "43": "E-LAW",
        "44": "E-LOC",
        "45": "E-MONEY",
        "46": "E-NORP",
        "47": "E-ORDINAL",
        "48": "E-ORG",
        "49": "E-PERCENT",
        "50": "E-PERSON",
        "51": "E-PRODUCT",
        "52": "E-QUANTITY",
        "53": "E-TIME",
        "54": "E-WORK_OF_ART",
        "55": "S-CARDINAL",
        "56": "S-DATE",
        "57": "S-EVENT",
        "58": "S-FAC",
        "59": "S-GPE",
        "60": "S-LANGUAGE",
        "61": "S-LAW",
        "62": "S-LOC",
        "63": "S-MONEY",
        "64": "S-NORP",
        "65": "S-ORDINAL",
        "66": "S-ORG",
        "67": "S-PERCENT",
        "68": "S-PERSON",
        "69": "S-PRODUCT",
        "70": "S-QUANTITY",
        "71": "S-TIME",
        "72": "S-WORK_OF_ART",
    }
    num_classes = 73
    tags = 73

    def __init__(self):
        PretrainedTokenClassifier.__init__(self)


@nice_repr
class TOC_Babelscape_WikineuralMultilingualNer(PretrainedTokenClassifier):
    name = "Babelscape/wikineural-multilingual-ner"
    likes = 58
    downloads = 101000.0
    id2label = {
        "0": "O",
        "1": "B-PER",
        "2": "I-PER",
        "3": "B-ORG",
        "4": "I-ORG",
        "5": "B-LOC",
        "6": "I-LOC",
        "7": "B-MISC",
        "8": "I-MISC",
    }
    num_classes = 9
    tags = 9

    def __init__(self):
        PretrainedTokenClassifier.__init__(self)


@nice_repr
class TOC_JeanBaptiste_RobertaLargeNerEnglish(PretrainedTokenClassifier):
    name = "Jean-Baptiste/roberta-large-ner-english"
    likes = 55
    downloads = 188000.0
    id2label = {"0": "O", "1": "PER", "2": "ORG", "3": "LOC", "4": "MISC"}
    num_classes = 5
    tags = 5

    def __init__(self):
        PretrainedTokenClassifier.__init__(self)


@nice_repr
class TOC_Stanfordaimi_StanfordDeidentifierBase(PretrainedTokenClassifier):
    name = "StanfordAIMI/stanford-deidentifier-base"
    likes = 53
    downloads = 25100.0
    id2label = {
        "0": "O",
        "1": "VENDOR",
        "2": "DATE",
        "3": "HCW",
        "4": "HOSPITAL",
        "5": "ID",
        "6": "PATIENT",
        "7": "PHONE",
    }
    num_classes = 8
    tags = 8

    def __init__(self):
        PretrainedTokenClassifier.__init__(self)


@nice_repr
class TOC_Felflare_BertRestorePunctuation(PretrainedTokenClassifier):
    name = "felflare/bert-restore-punctuation"
    likes = 52
    downloads = 11200.0
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
    }
    num_classes = 15
    tags = 15

    def __init__(self):
        PretrainedTokenClassifier.__init__(self)


@nice_repr
class TOC_Davlan_BertBaseMultilingualCasedNerHrl(PretrainedTokenClassifier):
    name = "Davlan/bert-base-multilingual-cased-ner-hrl"
    likes = 51
    downloads = 341000.0
    id2label = {
        "0": "O",
        "1": "B-DATE",
        "2": "I-DATE",
        "3": "B-PER",
        "4": "I-PER",
        "5": "B-ORG",
        "6": "I-ORG",
        "7": "B-LOC",
        "8": "I-LOC",
    }
    num_classes = 9
    tags = 9

    def __init__(self):
        PretrainedTokenClassifier.__init__(self)
