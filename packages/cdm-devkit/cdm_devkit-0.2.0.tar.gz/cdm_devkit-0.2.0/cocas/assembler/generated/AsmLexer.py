# Generated from assembler/grammar/AsmLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,286,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
        1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,5,29,201,8,29,10,29,12,29,
        204,9,29,1,30,4,30,207,8,30,11,30,12,30,208,1,31,1,31,1,31,1,31,
        4,31,215,8,31,11,31,12,31,216,1,32,1,32,1,32,1,32,4,32,223,8,32,
        11,32,12,32,224,1,33,1,33,5,33,229,8,33,10,33,12,33,232,9,33,1,33,
        1,33,1,33,1,33,5,33,238,8,33,10,33,12,33,241,9,33,5,33,243,8,33,
        10,33,12,33,246,9,33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,254,8,34,
        1,34,1,34,1,35,3,35,259,8,35,1,35,1,35,1,36,1,36,5,36,265,8,36,10,
        36,12,36,268,9,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,
        38,1,38,4,38,281,8,38,11,38,12,38,282,1,39,1,39,0,0,40,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,1,0,11,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,1,0,48,57,1,0,48,49,3,0,48,57,65,70,97,102,3,0,10,10,
        34,34,92,92,3,0,10,10,39,39,92,92,1,0,10,10,2,0,9,9,32,32,5,0,43,
        43,47,57,61,61,65,90,97,122,1,0,0,65534,296,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
        0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
        0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,81,1,0,0,0,3,87,1,0,0,
        0,5,93,1,0,0,0,7,102,1,0,0,0,9,105,1,0,0,0,11,110,1,0,0,0,13,114,
        1,0,0,0,15,118,1,0,0,0,17,121,1,0,0,0,19,124,1,0,0,0,21,127,1,0,
        0,0,23,133,1,0,0,0,25,139,1,0,0,0,27,145,1,0,0,0,29,150,1,0,0,0,
        31,157,1,0,0,0,33,163,1,0,0,0,35,168,1,0,0,0,37,174,1,0,0,0,39,176,
        1,0,0,0,41,178,1,0,0,0,43,180,1,0,0,0,45,182,1,0,0,0,47,184,1,0,
        0,0,49,186,1,0,0,0,51,188,1,0,0,0,53,190,1,0,0,0,55,192,1,0,0,0,
        57,195,1,0,0,0,59,198,1,0,0,0,61,206,1,0,0,0,63,210,1,0,0,0,65,218,
        1,0,0,0,67,226,1,0,0,0,69,249,1,0,0,0,71,258,1,0,0,0,73,262,1,0,
        0,0,75,271,1,0,0,0,77,275,1,0,0,0,79,284,1,0,0,0,81,82,5,97,0,0,
        82,83,5,115,0,0,83,84,5,101,0,0,84,85,5,99,0,0,85,86,5,116,0,0,86,
        2,1,0,0,0,87,88,5,98,0,0,88,89,5,114,0,0,89,90,5,101,0,0,90,91,5,
        97,0,0,91,92,5,107,0,0,92,4,1,0,0,0,93,94,5,99,0,0,94,95,5,111,0,
        0,95,96,5,110,0,0,96,97,5,116,0,0,97,98,5,105,0,0,98,99,5,110,0,
        0,99,100,5,117,0,0,100,101,5,101,0,0,101,6,1,0,0,0,102,103,5,100,
        0,0,103,104,5,111,0,0,104,8,1,0,0,0,105,106,5,101,0,0,106,107,5,
        108,0,0,107,108,5,115,0,0,108,109,5,101,0,0,109,10,1,0,0,0,110,111,
        5,101,0,0,111,112,5,110,0,0,112,113,5,100,0,0,113,12,1,0,0,0,114,
        115,5,101,0,0,115,116,5,120,0,0,116,117,5,116,0,0,117,14,1,0,0,0,
        118,119,5,102,0,0,119,120,5,105,0,0,120,16,1,0,0,0,121,122,5,105,
        0,0,122,123,5,102,0,0,123,18,1,0,0,0,124,125,5,105,0,0,125,126,5,
        115,0,0,126,20,1,0,0,0,127,128,5,109,0,0,128,129,5,97,0,0,129,130,
        5,99,0,0,130,131,5,114,0,0,131,132,5,111,0,0,132,22,1,0,0,0,133,
        134,5,114,0,0,134,135,5,115,0,0,135,136,5,101,0,0,136,137,5,99,0,
        0,137,138,5,116,0,0,138,24,1,0,0,0,139,140,5,115,0,0,140,141,5,116,
        0,0,141,142,5,97,0,0,142,143,5,121,0,0,143,144,5,115,0,0,144,26,
        1,0,0,0,145,146,5,116,0,0,146,147,5,104,0,0,147,148,5,101,0,0,148,
        149,5,110,0,0,149,28,1,0,0,0,150,151,5,116,0,0,151,152,5,112,0,0,
        152,153,5,108,0,0,153,154,5,97,0,0,154,155,5,116,0,0,155,156,5,101,
        0,0,156,30,1,0,0,0,157,158,5,117,0,0,158,159,5,110,0,0,159,160,5,
        116,0,0,160,161,5,105,0,0,161,162,5,108,0,0,162,32,1,0,0,0,163,164,
        5,119,0,0,164,165,5,101,0,0,165,166,5,110,0,0,166,167,5,100,0,0,
        167,34,1,0,0,0,168,169,5,119,0,0,169,170,5,104,0,0,170,171,5,105,
        0,0,171,172,5,108,0,0,172,173,5,101,0,0,173,36,1,0,0,0,174,175,5,
        46,0,0,175,38,1,0,0,0,176,177,5,44,0,0,177,40,1,0,0,0,178,179,5,
        43,0,0,179,42,1,0,0,0,180,181,5,45,0,0,181,44,1,0,0,0,182,183,5,
        58,0,0,183,46,1,0,0,0,184,185,5,42,0,0,185,48,1,0,0,0,186,187,5,
        62,0,0,187,50,1,0,0,0,188,189,5,40,0,0,189,52,1,0,0,0,190,191,5,
        41,0,0,191,54,1,0,0,0,192,193,5,45,0,0,193,194,5,124,0,0,194,56,
        1,0,0,0,195,196,5,114,0,0,196,197,3,61,30,0,197,58,1,0,0,0,198,202,
        7,0,0,0,199,201,7,1,0,0,200,199,1,0,0,0,201,204,1,0,0,0,202,200,
        1,0,0,0,202,203,1,0,0,0,203,60,1,0,0,0,204,202,1,0,0,0,205,207,7,
        2,0,0,206,205,1,0,0,0,207,208,1,0,0,0,208,206,1,0,0,0,208,209,1,
        0,0,0,209,62,1,0,0,0,210,211,5,48,0,0,211,212,5,98,0,0,212,214,1,
        0,0,0,213,215,7,3,0,0,214,213,1,0,0,0,215,216,1,0,0,0,216,214,1,
        0,0,0,216,217,1,0,0,0,217,64,1,0,0,0,218,219,5,48,0,0,219,220,5,
        120,0,0,220,222,1,0,0,0,221,223,7,4,0,0,222,221,1,0,0,0,223,224,
        1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,66,1,0,0,0,226,230,5,
        34,0,0,227,229,8,5,0,0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,1,
        0,0,0,230,231,1,0,0,0,231,244,1,0,0,0,232,230,1,0,0,0,233,234,5,
        92,0,0,234,235,9,0,0,0,235,239,1,0,0,0,236,238,8,5,0,0,237,236,1,
        0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,243,1,
        0,0,0,241,239,1,0,0,0,242,233,1,0,0,0,243,246,1,0,0,0,244,242,1,
        0,0,0,244,245,1,0,0,0,245,247,1,0,0,0,246,244,1,0,0,0,247,248,5,
        34,0,0,248,68,1,0,0,0,249,253,5,39,0,0,250,251,5,92,0,0,251,254,
        9,0,0,0,252,254,8,6,0,0,253,250,1,0,0,0,253,252,1,0,0,0,254,255,
        1,0,0,0,255,256,5,39,0,0,256,70,1,0,0,0,257,259,5,13,0,0,258,257,
        1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,261,5,10,0,0,261,72,
        1,0,0,0,262,266,5,35,0,0,263,265,8,7,0,0,264,263,1,0,0,0,265,268,
        1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,268,266,
        1,0,0,0,269,270,6,36,0,0,270,74,1,0,0,0,271,272,7,8,0,0,272,273,
        1,0,0,0,273,274,6,37,0,0,274,76,1,0,0,0,275,276,5,102,0,0,276,277,
        5,112,0,0,277,278,5,45,0,0,278,280,1,0,0,0,279,281,7,9,0,0,280,279,
        1,0,0,0,281,282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,78,1,
        0,0,0,284,285,7,10,0,0,285,80,1,0,0,0,12,0,202,208,216,224,230,239,
        244,253,258,266,282,1,6,0,0
    ]

class AsmLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Asect = 1
    Break = 2
    Continue = 3
    Do = 4
    Else = 5
    End = 6
    Ext = 7
    Fi = 8
    If = 9
    Is = 10
    Macro = 11
    Rsect = 12
    Stays = 13
    Then = 14
    Tplate = 15
    Until = 16
    Wend = 17
    While = 18
    DOT = 19
    COMMA = 20
    PLUS = 21
    MINUS = 22
    COLON = 23
    ASTERISK = 24
    ANGLE_BRACKET = 25
    OPEN_PAREN = 26
    CLOSE_PAREN = 27
    LINE_MARK_MARKER = 28
    REGISTER = 29
    WORD = 30
    DECIMAL_NUMBER = 31
    BINARY_NUMBER = 32
    HEX_NUMBER = 33
    STRING = 34
    CHAR = 35
    NEWLINE = 36
    COMMENT = 37
    WS = 38
    BASE64 = 39
    UNEXPECTED_TOKEN = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'asect'", "'break'", "'continue'", "'do'", "'else'", "'end'", 
            "'ext'", "'fi'", "'if'", "'is'", "'macro'", "'rsect'", "'stays'", 
            "'then'", "'tplate'", "'until'", "'wend'", "'while'", "'.'", 
            "','", "'+'", "'-'", "':'", "'*'", "'>'", "'('", "')'", "'-|'" ]

    symbolicNames = [ "<INVALID>",
            "Asect", "Break", "Continue", "Do", "Else", "End", "Ext", "Fi", 
            "If", "Is", "Macro", "Rsect", "Stays", "Then", "Tplate", "Until", 
            "Wend", "While", "DOT", "COMMA", "PLUS", "MINUS", "COLON", "ASTERISK", 
            "ANGLE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "LINE_MARK_MARKER", 
            "REGISTER", "WORD", "DECIMAL_NUMBER", "BINARY_NUMBER", "HEX_NUMBER", 
            "STRING", "CHAR", "NEWLINE", "COMMENT", "WS", "BASE64", "UNEXPECTED_TOKEN" ]

    ruleNames = [ "Asect", "Break", "Continue", "Do", "Else", "End", "Ext", 
                  "Fi", "If", "Is", "Macro", "Rsect", "Stays", "Then", "Tplate", 
                  "Until", "Wend", "While", "DOT", "COMMA", "PLUS", "MINUS", 
                  "COLON", "ASTERISK", "ANGLE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", 
                  "LINE_MARK_MARKER", "REGISTER", "WORD", "DECIMAL_NUMBER", 
                  "BINARY_NUMBER", "HEX_NUMBER", "STRING", "CHAR", "NEWLINE", 
                  "COMMENT", "WS", "BASE64", "UNEXPECTED_TOKEN" ]

    grammarFileName = "AsmLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


