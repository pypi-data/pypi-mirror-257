# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AInfo(BaseModel):
    """
    AInfo
    """ # noqa: E501
    title: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    category: Optional[StrictStr] = None
    category_ids: Optional[StrictStr] = None
    additional_categories: Optional[StrictStr] = None
    cid: Optional[StrictStr] = None
    feature_id: Optional[StrictStr] = None
    address: Optional[StrictStr] = None
    address_info_borough: Optional[StrictStr] = Field(default=None, alias="address_info.borough")
    address_info_address: Optional[StrictStr] = Field(default=None, alias="address_info.address")
    address_info_city: Optional[StrictStr] = Field(default=None, alias="address_info.city")
    address_info_zip: Optional[StrictStr] = Field(default=None, alias="address_info.zip")
    address_info_region: Optional[StrictStr] = Field(default=None, alias="address_info.region")
    address_info_country_code: Optional[StrictStr] = Field(default=None, alias="address_info.country_code")
    place_id: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    domain: Optional[StrictStr] = None
    logo: Optional[StrictStr] = None
    main_image: Optional[StrictStr] = None
    total_photos: Optional[StrictStr] = None
    snippet: Optional[StrictStr] = None
    latitude: Optional[StrictStr] = None
    longitude: Optional[StrictStr] = None
    is_claimed: Optional[StrictStr] = None
    rating_rating_type: Optional[StrictStr] = Field(default=None, alias="rating.rating_type")
    rating_value: Optional[StrictStr] = Field(default=None, alias="rating.value")
    rating_votes_count: Optional[StrictStr] = Field(default=None, alias="rating.votes_count")
    rating_rating_max: Optional[StrictStr] = Field(default=None, alias="rating.rating_max")
    rating_distribution_1: Optional[StrictStr] = Field(default=None, alias="rating_distribution.1")
    rating_distribution_2: Optional[StrictStr] = Field(default=None, alias="rating_distribution.2")
    rating_distribution_3: Optional[StrictStr] = Field(default=None, alias="rating_distribution.3")
    rating_distribution_4: Optional[StrictStr] = Field(default=None, alias="rating_distribution.4")
    rating_distribution_5: Optional[StrictStr] = Field(default=None, alias="rating_distribution.5")
    work_time_work_hours_current_status: Optional[StrictStr] = Field(default=None, alias="work_time.work_hours.current_status")
    check_url: Optional[StrictStr] = None
    last_updated_time: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["title", "description", "category", "category_ids", "additional_categories", "cid", "feature_id", "address", "address_info.borough", "address_info.address", "address_info.city", "address_info.zip", "address_info.region", "address_info.country_code", "place_id", "phone", "url", "domain", "logo", "main_image", "total_photos", "snippet", "latitude", "longitude", "is_claimed", "rating.rating_type", "rating.value", "rating.votes_count", "rating.rating_max", "rating_distribution.1", "rating_distribution.2", "rating_distribution.3", "rating_distribution.4", "rating_distribution.5", "work_time.work_hours.current_status", "check_url", "last_updated_time"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if self.category is None and "category" in self.model_fields_set:
            _dict['category'] = None

        # set to None if category_ids (nullable) is None
        # and model_fields_set contains the field
        if self.category_ids is None and "category_ids" in self.model_fields_set:
            _dict['category_ids'] = None

        # set to None if additional_categories (nullable) is None
        # and model_fields_set contains the field
        if self.additional_categories is None and "additional_categories" in self.model_fields_set:
            _dict['additional_categories'] = None

        # set to None if cid (nullable) is None
        # and model_fields_set contains the field
        if self.cid is None and "cid" in self.model_fields_set:
            _dict['cid'] = None

        # set to None if feature_id (nullable) is None
        # and model_fields_set contains the field
        if self.feature_id is None and "feature_id" in self.model_fields_set:
            _dict['feature_id'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if address_info_borough (nullable) is None
        # and model_fields_set contains the field
        if self.address_info_borough is None and "address_info_borough" in self.model_fields_set:
            _dict['address_info.borough'] = None

        # set to None if address_info_address (nullable) is None
        # and model_fields_set contains the field
        if self.address_info_address is None and "address_info_address" in self.model_fields_set:
            _dict['address_info.address'] = None

        # set to None if address_info_city (nullable) is None
        # and model_fields_set contains the field
        if self.address_info_city is None and "address_info_city" in self.model_fields_set:
            _dict['address_info.city'] = None

        # set to None if address_info_zip (nullable) is None
        # and model_fields_set contains the field
        if self.address_info_zip is None and "address_info_zip" in self.model_fields_set:
            _dict['address_info.zip'] = None

        # set to None if address_info_region (nullable) is None
        # and model_fields_set contains the field
        if self.address_info_region is None and "address_info_region" in self.model_fields_set:
            _dict['address_info.region'] = None

        # set to None if address_info_country_code (nullable) is None
        # and model_fields_set contains the field
        if self.address_info_country_code is None and "address_info_country_code" in self.model_fields_set:
            _dict['address_info.country_code'] = None

        # set to None if place_id (nullable) is None
        # and model_fields_set contains the field
        if self.place_id is None and "place_id" in self.model_fields_set:
            _dict['place_id'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if logo (nullable) is None
        # and model_fields_set contains the field
        if self.logo is None and "logo" in self.model_fields_set:
            _dict['logo'] = None

        # set to None if main_image (nullable) is None
        # and model_fields_set contains the field
        if self.main_image is None and "main_image" in self.model_fields_set:
            _dict['main_image'] = None

        # set to None if total_photos (nullable) is None
        # and model_fields_set contains the field
        if self.total_photos is None and "total_photos" in self.model_fields_set:
            _dict['total_photos'] = None

        # set to None if snippet (nullable) is None
        # and model_fields_set contains the field
        if self.snippet is None and "snippet" in self.model_fields_set:
            _dict['snippet'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if is_claimed (nullable) is None
        # and model_fields_set contains the field
        if self.is_claimed is None and "is_claimed" in self.model_fields_set:
            _dict['is_claimed'] = None

        # set to None if rating_rating_type (nullable) is None
        # and model_fields_set contains the field
        if self.rating_rating_type is None and "rating_rating_type" in self.model_fields_set:
            _dict['rating.rating_type'] = None

        # set to None if rating_value (nullable) is None
        # and model_fields_set contains the field
        if self.rating_value is None and "rating_value" in self.model_fields_set:
            _dict['rating.value'] = None

        # set to None if rating_votes_count (nullable) is None
        # and model_fields_set contains the field
        if self.rating_votes_count is None and "rating_votes_count" in self.model_fields_set:
            _dict['rating.votes_count'] = None

        # set to None if rating_rating_max (nullable) is None
        # and model_fields_set contains the field
        if self.rating_rating_max is None and "rating_rating_max" in self.model_fields_set:
            _dict['rating.rating_max'] = None

        # set to None if rating_distribution_1 (nullable) is None
        # and model_fields_set contains the field
        if self.rating_distribution_1 is None and "rating_distribution_1" in self.model_fields_set:
            _dict['rating_distribution.1'] = None

        # set to None if rating_distribution_2 (nullable) is None
        # and model_fields_set contains the field
        if self.rating_distribution_2 is None and "rating_distribution_2" in self.model_fields_set:
            _dict['rating_distribution.2'] = None

        # set to None if rating_distribution_3 (nullable) is None
        # and model_fields_set contains the field
        if self.rating_distribution_3 is None and "rating_distribution_3" in self.model_fields_set:
            _dict['rating_distribution.3'] = None

        # set to None if rating_distribution_4 (nullable) is None
        # and model_fields_set contains the field
        if self.rating_distribution_4 is None and "rating_distribution_4" in self.model_fields_set:
            _dict['rating_distribution.4'] = None

        # set to None if rating_distribution_5 (nullable) is None
        # and model_fields_set contains the field
        if self.rating_distribution_5 is None and "rating_distribution_5" in self.model_fields_set:
            _dict['rating_distribution.5'] = None

        # set to None if work_time_work_hours_current_status (nullable) is None
        # and model_fields_set contains the field
        if self.work_time_work_hours_current_status is None and "work_time_work_hours_current_status" in self.model_fields_set:
            _dict['work_time.work_hours.current_status'] = None

        # set to None if check_url (nullable) is None
        # and model_fields_set contains the field
        if self.check_url is None and "check_url" in self.model_fields_set:
            _dict['check_url'] = None

        # set to None if last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated_time is None and "last_updated_time" in self.model_fields_set:
            _dict['last_updated_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "category": obj.get("category"),
            "category_ids": obj.get("category_ids"),
            "additional_categories": obj.get("additional_categories"),
            "cid": obj.get("cid"),
            "feature_id": obj.get("feature_id"),
            "address": obj.get("address"),
            "address_info.borough": obj.get("address_info.borough"),
            "address_info.address": obj.get("address_info.address"),
            "address_info.city": obj.get("address_info.city"),
            "address_info.zip": obj.get("address_info.zip"),
            "address_info.region": obj.get("address_info.region"),
            "address_info.country_code": obj.get("address_info.country_code"),
            "place_id": obj.get("place_id"),
            "phone": obj.get("phone"),
            "url": obj.get("url"),
            "domain": obj.get("domain"),
            "logo": obj.get("logo"),
            "main_image": obj.get("main_image"),
            "total_photos": obj.get("total_photos"),
            "snippet": obj.get("snippet"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "is_claimed": obj.get("is_claimed"),
            "rating.rating_type": obj.get("rating.rating_type"),
            "rating.value": obj.get("rating.value"),
            "rating.votes_count": obj.get("rating.votes_count"),
            "rating.rating_max": obj.get("rating.rating_max"),
            "rating_distribution.1": obj.get("rating_distribution.1"),
            "rating_distribution.2": obj.get("rating_distribution.2"),
            "rating_distribution.3": obj.get("rating_distribution.3"),
            "rating_distribution.4": obj.get("rating_distribution.4"),
            "rating_distribution.5": obj.get("rating_distribution.5"),
            "work_time.work_hours.current_status": obj.get("work_time.work_hours.current_status"),
            "check_url": obj.get("check_url"),
            "last_updated_time": obj.get("last_updated_time")
        })
        return _obj


