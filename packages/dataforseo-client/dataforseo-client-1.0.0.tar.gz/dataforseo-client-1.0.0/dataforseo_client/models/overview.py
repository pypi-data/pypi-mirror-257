# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Overview(BaseModel):
    """
    Overview
    """ # noqa: E501
    domain: Optional[StrictStr] = None
    created_datetime: Optional[StrictStr] = None
    changed_datetime: Optional[StrictStr] = None
    expiration_datetime: Optional[StrictStr] = None
    updated_datetime: Optional[StrictStr] = None
    first_seen: Optional[StrictStr] = None
    epp_status_codes: Optional[StrictStr] = None
    tld: Optional[StrictStr] = None
    registered: Optional[StrictStr] = None
    registrar: Optional[StrictStr] = None
    metrics_paid_pos_1: Optional[StrictStr] = Field(default=None, alias="metrics.paid.pos_1")
    metrics_paid_pos_2_3: Optional[StrictStr] = Field(default=None, alias="metrics.paid.pos_2_3")
    metrics_paid_pos_4_10: Optional[StrictStr] = Field(default=None, alias="metrics.paid.pos_4_10")
    metrics_paid_pos_11_20: Optional[StrictStr] = Field(default=None, alias="metrics.paid.pos_11_20")
    metrics_paid_pos_21_30: Optional[StrictStr] = Field(default=None, alias="metrics.paid.pos_21_30")
    metrics_paid_pos_31_40: Optional[StrictStr] = Field(default=None, alias="metrics.paid.pos_31_40")
    metrics_paid_pos_41_50: Optional[StrictStr] = Field(default=None, alias="metrics.paid.pos_41_50")
    metrics_paid_pos_51_60: Optional[StrictStr] = Field(default=None, alias="metrics.paid.pos_51_60")
    metrics_paid_pos_61_70: Optional[StrictStr] = Field(default=None, alias="metrics.paid.pos_61_70")
    metrics_paid_pos_71_80: Optional[StrictStr] = Field(default=None, alias="metrics.paid.pos_71_80")
    metrics_paid_pos_81_90: Optional[StrictStr] = Field(default=None, alias="metrics.paid.pos_81_90")
    metrics_paid_pos_91_100: Optional[StrictStr] = Field(default=None, alias="metrics.paid.pos_91_100")
    metrics_paid_etv: Optional[StrictStr] = Field(default=None, alias="metrics.paid.etv")
    metrics_paid_impressions_etv: Optional[StrictStr] = Field(default=None, alias="metrics.paid.impressions_etv")
    metrics_paid_count: Optional[StrictStr] = Field(default=None, alias="metrics.paid.count")
    metrics_paid_estimated_paid_traffic_cost: Optional[StrictStr] = Field(default=None, alias="metrics.paid.estimated_paid_traffic_cost")
    metrics_organic_pos_1: Optional[StrictStr] = Field(default=None, alias="metrics.organic.pos_1")
    metrics_organic_pos_2_3: Optional[StrictStr] = Field(default=None, alias="metrics.organic.pos_2_3")
    metrics_organic_pos_4_10: Optional[StrictStr] = Field(default=None, alias="metrics.organic.pos_4_10")
    metrics_organic_pos_11_20: Optional[StrictStr] = Field(default=None, alias="metrics.organic.pos_11_20")
    metrics_organic_pos_21_30: Optional[StrictStr] = Field(default=None, alias="metrics.organic.pos_21_30")
    metrics_organic_pos_31_40: Optional[StrictStr] = Field(default=None, alias="metrics.organic.pos_31_40")
    metrics_organic_pos_41_50: Optional[StrictStr] = Field(default=None, alias="metrics.organic.pos_41_50")
    metrics_organic_pos_51_60: Optional[StrictStr] = Field(default=None, alias="metrics.organic.pos_51_60")
    metrics_organic_pos_61_70: Optional[StrictStr] = Field(default=None, alias="metrics.organic.pos_61_70")
    metrics_organic_pos_71_80: Optional[StrictStr] = Field(default=None, alias="metrics.organic.pos_71_80")
    metrics_organic_pos_81_90: Optional[StrictStr] = Field(default=None, alias="metrics.organic.pos_81_90")
    metrics_organic_pos_91_100: Optional[StrictStr] = Field(default=None, alias="metrics.organic.pos_91_100")
    metrics_organic_etv: Optional[StrictStr] = Field(default=None, alias="metrics.organic.etv")
    metrics_organic_impressions_etv: Optional[StrictStr] = Field(default=None, alias="metrics.organic.impressions_etv")
    metrics_organic_count: Optional[StrictStr] = Field(default=None, alias="metrics.organic.count")
    metrics_organic_estimated_paid_traffic_cost: Optional[StrictStr] = Field(default=None, alias="metrics.organic.estimated_paid_traffic_cost")
    backlinks_info_referring_domains: Optional[StrictStr] = Field(default=None, alias="backlinks_info.referring_domains")
    backlinks_info_referring_main_domains: Optional[StrictStr] = Field(default=None, alias="backlinks_info.referring_main_domains")
    backlinks_info_referring_pages: Optional[StrictStr] = Field(default=None, alias="backlinks_info.referring_pages")
    backlinks_info_dofollow: Optional[StrictStr] = Field(default=None, alias="backlinks_info.dofollow")
    backlinks_info_backlinks: Optional[StrictStr] = Field(default=None, alias="backlinks_info.backlinks")
    backlinks_info_time_update: Optional[StrictStr] = Field(default=None, alias="backlinks_info.time_update")
    __properties: ClassVar[List[str]] = ["domain", "created_datetime", "changed_datetime", "expiration_datetime", "updated_datetime", "first_seen", "epp_status_codes", "tld", "registered", "registrar", "metrics.paid.pos_1", "metrics.paid.pos_2_3", "metrics.paid.pos_4_10", "metrics.paid.pos_11_20", "metrics.paid.pos_21_30", "metrics.paid.pos_31_40", "metrics.paid.pos_41_50", "metrics.paid.pos_51_60", "metrics.paid.pos_61_70", "metrics.paid.pos_71_80", "metrics.paid.pos_81_90", "metrics.paid.pos_91_100", "metrics.paid.etv", "metrics.paid.impressions_etv", "metrics.paid.count", "metrics.paid.estimated_paid_traffic_cost", "metrics.organic.pos_1", "metrics.organic.pos_2_3", "metrics.organic.pos_4_10", "metrics.organic.pos_11_20", "metrics.organic.pos_21_30", "metrics.organic.pos_31_40", "metrics.organic.pos_41_50", "metrics.organic.pos_51_60", "metrics.organic.pos_61_70", "metrics.organic.pos_71_80", "metrics.organic.pos_81_90", "metrics.organic.pos_91_100", "metrics.organic.etv", "metrics.organic.impressions_etv", "metrics.organic.count", "metrics.organic.estimated_paid_traffic_cost", "backlinks_info.referring_domains", "backlinks_info.referring_main_domains", "backlinks_info.referring_pages", "backlinks_info.dofollow", "backlinks_info.backlinks", "backlinks_info.time_update"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Overview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if created_datetime (nullable) is None
        # and model_fields_set contains the field
        if self.created_datetime is None and "created_datetime" in self.model_fields_set:
            _dict['created_datetime'] = None

        # set to None if changed_datetime (nullable) is None
        # and model_fields_set contains the field
        if self.changed_datetime is None and "changed_datetime" in self.model_fields_set:
            _dict['changed_datetime'] = None

        # set to None if expiration_datetime (nullable) is None
        # and model_fields_set contains the field
        if self.expiration_datetime is None and "expiration_datetime" in self.model_fields_set:
            _dict['expiration_datetime'] = None

        # set to None if updated_datetime (nullable) is None
        # and model_fields_set contains the field
        if self.updated_datetime is None and "updated_datetime" in self.model_fields_set:
            _dict['updated_datetime'] = None

        # set to None if first_seen (nullable) is None
        # and model_fields_set contains the field
        if self.first_seen is None and "first_seen" in self.model_fields_set:
            _dict['first_seen'] = None

        # set to None if epp_status_codes (nullable) is None
        # and model_fields_set contains the field
        if self.epp_status_codes is None and "epp_status_codes" in self.model_fields_set:
            _dict['epp_status_codes'] = None

        # set to None if tld (nullable) is None
        # and model_fields_set contains the field
        if self.tld is None and "tld" in self.model_fields_set:
            _dict['tld'] = None

        # set to None if registered (nullable) is None
        # and model_fields_set contains the field
        if self.registered is None and "registered" in self.model_fields_set:
            _dict['registered'] = None

        # set to None if registrar (nullable) is None
        # and model_fields_set contains the field
        if self.registrar is None and "registrar" in self.model_fields_set:
            _dict['registrar'] = None

        # set to None if metrics_paid_pos_1 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_pos_1 is None and "metrics_paid_pos_1" in self.model_fields_set:
            _dict['metrics.paid.pos_1'] = None

        # set to None if metrics_paid_pos_2_3 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_pos_2_3 is None and "metrics_paid_pos_2_3" in self.model_fields_set:
            _dict['metrics.paid.pos_2_3'] = None

        # set to None if metrics_paid_pos_4_10 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_pos_4_10 is None and "metrics_paid_pos_4_10" in self.model_fields_set:
            _dict['metrics.paid.pos_4_10'] = None

        # set to None if metrics_paid_pos_11_20 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_pos_11_20 is None and "metrics_paid_pos_11_20" in self.model_fields_set:
            _dict['metrics.paid.pos_11_20'] = None

        # set to None if metrics_paid_pos_21_30 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_pos_21_30 is None and "metrics_paid_pos_21_30" in self.model_fields_set:
            _dict['metrics.paid.pos_21_30'] = None

        # set to None if metrics_paid_pos_31_40 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_pos_31_40 is None and "metrics_paid_pos_31_40" in self.model_fields_set:
            _dict['metrics.paid.pos_31_40'] = None

        # set to None if metrics_paid_pos_41_50 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_pos_41_50 is None and "metrics_paid_pos_41_50" in self.model_fields_set:
            _dict['metrics.paid.pos_41_50'] = None

        # set to None if metrics_paid_pos_51_60 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_pos_51_60 is None and "metrics_paid_pos_51_60" in self.model_fields_set:
            _dict['metrics.paid.pos_51_60'] = None

        # set to None if metrics_paid_pos_61_70 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_pos_61_70 is None and "metrics_paid_pos_61_70" in self.model_fields_set:
            _dict['metrics.paid.pos_61_70'] = None

        # set to None if metrics_paid_pos_71_80 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_pos_71_80 is None and "metrics_paid_pos_71_80" in self.model_fields_set:
            _dict['metrics.paid.pos_71_80'] = None

        # set to None if metrics_paid_pos_81_90 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_pos_81_90 is None and "metrics_paid_pos_81_90" in self.model_fields_set:
            _dict['metrics.paid.pos_81_90'] = None

        # set to None if metrics_paid_pos_91_100 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_pos_91_100 is None and "metrics_paid_pos_91_100" in self.model_fields_set:
            _dict['metrics.paid.pos_91_100'] = None

        # set to None if metrics_paid_etv (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_etv is None and "metrics_paid_etv" in self.model_fields_set:
            _dict['metrics.paid.etv'] = None

        # set to None if metrics_paid_impressions_etv (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_impressions_etv is None and "metrics_paid_impressions_etv" in self.model_fields_set:
            _dict['metrics.paid.impressions_etv'] = None

        # set to None if metrics_paid_count (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_count is None and "metrics_paid_count" in self.model_fields_set:
            _dict['metrics.paid.count'] = None

        # set to None if metrics_paid_estimated_paid_traffic_cost (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_paid_estimated_paid_traffic_cost is None and "metrics_paid_estimated_paid_traffic_cost" in self.model_fields_set:
            _dict['metrics.paid.estimated_paid_traffic_cost'] = None

        # set to None if metrics_organic_pos_1 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_pos_1 is None and "metrics_organic_pos_1" in self.model_fields_set:
            _dict['metrics.organic.pos_1'] = None

        # set to None if metrics_organic_pos_2_3 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_pos_2_3 is None and "metrics_organic_pos_2_3" in self.model_fields_set:
            _dict['metrics.organic.pos_2_3'] = None

        # set to None if metrics_organic_pos_4_10 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_pos_4_10 is None and "metrics_organic_pos_4_10" in self.model_fields_set:
            _dict['metrics.organic.pos_4_10'] = None

        # set to None if metrics_organic_pos_11_20 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_pos_11_20 is None and "metrics_organic_pos_11_20" in self.model_fields_set:
            _dict['metrics.organic.pos_11_20'] = None

        # set to None if metrics_organic_pos_21_30 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_pos_21_30 is None and "metrics_organic_pos_21_30" in self.model_fields_set:
            _dict['metrics.organic.pos_21_30'] = None

        # set to None if metrics_organic_pos_31_40 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_pos_31_40 is None and "metrics_organic_pos_31_40" in self.model_fields_set:
            _dict['metrics.organic.pos_31_40'] = None

        # set to None if metrics_organic_pos_41_50 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_pos_41_50 is None and "metrics_organic_pos_41_50" in self.model_fields_set:
            _dict['metrics.organic.pos_41_50'] = None

        # set to None if metrics_organic_pos_51_60 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_pos_51_60 is None and "metrics_organic_pos_51_60" in self.model_fields_set:
            _dict['metrics.organic.pos_51_60'] = None

        # set to None if metrics_organic_pos_61_70 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_pos_61_70 is None and "metrics_organic_pos_61_70" in self.model_fields_set:
            _dict['metrics.organic.pos_61_70'] = None

        # set to None if metrics_organic_pos_71_80 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_pos_71_80 is None and "metrics_organic_pos_71_80" in self.model_fields_set:
            _dict['metrics.organic.pos_71_80'] = None

        # set to None if metrics_organic_pos_81_90 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_pos_81_90 is None and "metrics_organic_pos_81_90" in self.model_fields_set:
            _dict['metrics.organic.pos_81_90'] = None

        # set to None if metrics_organic_pos_91_100 (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_pos_91_100 is None and "metrics_organic_pos_91_100" in self.model_fields_set:
            _dict['metrics.organic.pos_91_100'] = None

        # set to None if metrics_organic_etv (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_etv is None and "metrics_organic_etv" in self.model_fields_set:
            _dict['metrics.organic.etv'] = None

        # set to None if metrics_organic_impressions_etv (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_impressions_etv is None and "metrics_organic_impressions_etv" in self.model_fields_set:
            _dict['metrics.organic.impressions_etv'] = None

        # set to None if metrics_organic_count (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_count is None and "metrics_organic_count" in self.model_fields_set:
            _dict['metrics.organic.count'] = None

        # set to None if metrics_organic_estimated_paid_traffic_cost (nullable) is None
        # and model_fields_set contains the field
        if self.metrics_organic_estimated_paid_traffic_cost is None and "metrics_organic_estimated_paid_traffic_cost" in self.model_fields_set:
            _dict['metrics.organic.estimated_paid_traffic_cost'] = None

        # set to None if backlinks_info_referring_domains (nullable) is None
        # and model_fields_set contains the field
        if self.backlinks_info_referring_domains is None and "backlinks_info_referring_domains" in self.model_fields_set:
            _dict['backlinks_info.referring_domains'] = None

        # set to None if backlinks_info_referring_main_domains (nullable) is None
        # and model_fields_set contains the field
        if self.backlinks_info_referring_main_domains is None and "backlinks_info_referring_main_domains" in self.model_fields_set:
            _dict['backlinks_info.referring_main_domains'] = None

        # set to None if backlinks_info_referring_pages (nullable) is None
        # and model_fields_set contains the field
        if self.backlinks_info_referring_pages is None and "backlinks_info_referring_pages" in self.model_fields_set:
            _dict['backlinks_info.referring_pages'] = None

        # set to None if backlinks_info_dofollow (nullable) is None
        # and model_fields_set contains the field
        if self.backlinks_info_dofollow is None and "backlinks_info_dofollow" in self.model_fields_set:
            _dict['backlinks_info.dofollow'] = None

        # set to None if backlinks_info_backlinks (nullable) is None
        # and model_fields_set contains the field
        if self.backlinks_info_backlinks is None and "backlinks_info_backlinks" in self.model_fields_set:
            _dict['backlinks_info.backlinks'] = None

        # set to None if backlinks_info_time_update (nullable) is None
        # and model_fields_set contains the field
        if self.backlinks_info_time_update is None and "backlinks_info_time_update" in self.model_fields_set:
            _dict['backlinks_info.time_update'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Overview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain": obj.get("domain"),
            "created_datetime": obj.get("created_datetime"),
            "changed_datetime": obj.get("changed_datetime"),
            "expiration_datetime": obj.get("expiration_datetime"),
            "updated_datetime": obj.get("updated_datetime"),
            "first_seen": obj.get("first_seen"),
            "epp_status_codes": obj.get("epp_status_codes"),
            "tld": obj.get("tld"),
            "registered": obj.get("registered"),
            "registrar": obj.get("registrar"),
            "metrics.paid.pos_1": obj.get("metrics.paid.pos_1"),
            "metrics.paid.pos_2_3": obj.get("metrics.paid.pos_2_3"),
            "metrics.paid.pos_4_10": obj.get("metrics.paid.pos_4_10"),
            "metrics.paid.pos_11_20": obj.get("metrics.paid.pos_11_20"),
            "metrics.paid.pos_21_30": obj.get("metrics.paid.pos_21_30"),
            "metrics.paid.pos_31_40": obj.get("metrics.paid.pos_31_40"),
            "metrics.paid.pos_41_50": obj.get("metrics.paid.pos_41_50"),
            "metrics.paid.pos_51_60": obj.get("metrics.paid.pos_51_60"),
            "metrics.paid.pos_61_70": obj.get("metrics.paid.pos_61_70"),
            "metrics.paid.pos_71_80": obj.get("metrics.paid.pos_71_80"),
            "metrics.paid.pos_81_90": obj.get("metrics.paid.pos_81_90"),
            "metrics.paid.pos_91_100": obj.get("metrics.paid.pos_91_100"),
            "metrics.paid.etv": obj.get("metrics.paid.etv"),
            "metrics.paid.impressions_etv": obj.get("metrics.paid.impressions_etv"),
            "metrics.paid.count": obj.get("metrics.paid.count"),
            "metrics.paid.estimated_paid_traffic_cost": obj.get("metrics.paid.estimated_paid_traffic_cost"),
            "metrics.organic.pos_1": obj.get("metrics.organic.pos_1"),
            "metrics.organic.pos_2_3": obj.get("metrics.organic.pos_2_3"),
            "metrics.organic.pos_4_10": obj.get("metrics.organic.pos_4_10"),
            "metrics.organic.pos_11_20": obj.get("metrics.organic.pos_11_20"),
            "metrics.organic.pos_21_30": obj.get("metrics.organic.pos_21_30"),
            "metrics.organic.pos_31_40": obj.get("metrics.organic.pos_31_40"),
            "metrics.organic.pos_41_50": obj.get("metrics.organic.pos_41_50"),
            "metrics.organic.pos_51_60": obj.get("metrics.organic.pos_51_60"),
            "metrics.organic.pos_61_70": obj.get("metrics.organic.pos_61_70"),
            "metrics.organic.pos_71_80": obj.get("metrics.organic.pos_71_80"),
            "metrics.organic.pos_81_90": obj.get("metrics.organic.pos_81_90"),
            "metrics.organic.pos_91_100": obj.get("metrics.organic.pos_91_100"),
            "metrics.organic.etv": obj.get("metrics.organic.etv"),
            "metrics.organic.impressions_etv": obj.get("metrics.organic.impressions_etv"),
            "metrics.organic.count": obj.get("metrics.organic.count"),
            "metrics.organic.estimated_paid_traffic_cost": obj.get("metrics.organic.estimated_paid_traffic_cost"),
            "backlinks_info.referring_domains": obj.get("backlinks_info.referring_domains"),
            "backlinks_info.referring_main_domains": obj.get("backlinks_info.referring_main_domains"),
            "backlinks_info.referring_pages": obj.get("backlinks_info.referring_pages"),
            "backlinks_info.dofollow": obj.get("backlinks_info.dofollow"),
            "backlinks_info.backlinks": obj.get("backlinks_info.backlinks"),
            "backlinks_info.time_update": obj.get("backlinks_info.time_update")
        })
        return _obj


