# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AvailableAttributes(BaseModel):
    """
    AvailableAttributes
    """ # noqa: E501
    service_options: Optional[List[Optional[StrictStr]]] = None
    accessibility: Optional[List[Optional[StrictStr]]] = None
    offerings: Optional[List[Optional[StrictStr]]] = None
    dining_options: Optional[List[Optional[StrictStr]]] = None
    amenities: Optional[List[Optional[StrictStr]]] = None
    atmosphere: Optional[List[Optional[StrictStr]]] = None
    crowd: Optional[List[Optional[StrictStr]]] = None
    planning: Optional[List[Optional[StrictStr]]] = None
    payments: Optional[List[Optional[StrictStr]]] = None
    children: Optional[List[Optional[StrictStr]]] = None
    __properties: ClassVar[List[str]] = ["service_options", "accessibility", "offerings", "dining_options", "amenities", "atmosphere", "crowd", "planning", "payments", "children"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AvailableAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if service_options (nullable) is None
        # and model_fields_set contains the field
        if self.service_options is None and "service_options" in self.model_fields_set:
            _dict['service_options'] = None

        # set to None if accessibility (nullable) is None
        # and model_fields_set contains the field
        if self.accessibility is None and "accessibility" in self.model_fields_set:
            _dict['accessibility'] = None

        # set to None if offerings (nullable) is None
        # and model_fields_set contains the field
        if self.offerings is None and "offerings" in self.model_fields_set:
            _dict['offerings'] = None

        # set to None if dining_options (nullable) is None
        # and model_fields_set contains the field
        if self.dining_options is None and "dining_options" in self.model_fields_set:
            _dict['dining_options'] = None

        # set to None if amenities (nullable) is None
        # and model_fields_set contains the field
        if self.amenities is None and "amenities" in self.model_fields_set:
            _dict['amenities'] = None

        # set to None if atmosphere (nullable) is None
        # and model_fields_set contains the field
        if self.atmosphere is None and "atmosphere" in self.model_fields_set:
            _dict['atmosphere'] = None

        # set to None if crowd (nullable) is None
        # and model_fields_set contains the field
        if self.crowd is None and "crowd" in self.model_fields_set:
            _dict['crowd'] = None

        # set to None if planning (nullable) is None
        # and model_fields_set contains the field
        if self.planning is None and "planning" in self.model_fields_set:
            _dict['planning'] = None

        # set to None if payments (nullable) is None
        # and model_fields_set contains the field
        if self.payments is None and "payments" in self.model_fields_set:
            _dict['payments'] = None

        # set to None if children (nullable) is None
        # and model_fields_set contains the field
        if self.children is None and "children" in self.model_fields_set:
            _dict['children'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AvailableAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "service_options": obj.get("service_options"),
            "accessibility": obj.get("accessibility"),
            "offerings": obj.get("offerings"),
            "dining_options": obj.get("dining_options"),
            "amenities": obj.get("amenities"),
            "atmosphere": obj.get("atmosphere"),
            "crowd": obj.get("crowd"),
            "planning": obj.get("planning"),
            "payments": obj.get("payments"),
            "children": obj.get("children")
        })
        return _obj


