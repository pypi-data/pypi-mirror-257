# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel
from typing import Any, ClassVar, Dict, List, Optional
from dataforseo_client.models.appendix_priority_tasks_ready_keywords_data_price_data_info import AppendixPriorityTasksReadyKeywordsDataPriceDataInfo
from dataforseo_client.models.appendix_tasks_ready_keywords_data_price_data import AppendixTasksReadyKeywordsDataPriceData
from typing import Optional, Set
from typing_extensions import Self

class AppendixKeywordsDataPriceData(BaseModel):
    """
    AppendixKeywordsDataPriceData
    """ # noqa: E501
    tasks_ready: Optional[AppendixTasksReadyKeywordsDataPriceData] = None
    ad_traffic_by_keywords: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    bing: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    categories: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    errors: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    google_ads: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    keyword_performance: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    keywords_for_keywords: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    keywords_for_site: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    languages: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    locations: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    search_volume_history: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    search_volume: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    explore: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    __properties: ClassVar[List[str]] = ["tasks_ready", "ad_traffic_by_keywords", "bing", "categories", "errors", "google_ads", "keyword_performance", "keywords_for_keywords", "keywords_for_site", "languages", "locations", "search_volume_history", "search_volume", "explore"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppendixKeywordsDataPriceData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tasks_ready
        if self.tasks_ready:
            _dict['tasks_ready'] = self.tasks_ready.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in ad_traffic_by_keywords (dict)
        _field_dict = {}
        if self.ad_traffic_by_keywords:
            for _key in self.ad_traffic_by_keywords:
                if self.ad_traffic_by_keywords[_key]:
                    _field_dict[_key] = self.ad_traffic_by_keywords[_key].to_dict()
            _dict['ad_traffic_by_keywords'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in bing (dict)
        _field_dict = {}
        if self.bing:
            for _key in self.bing:
                if self.bing[_key]:
                    _field_dict[_key] = self.bing[_key].to_dict()
            _dict['bing'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in categories (dict)
        _field_dict = {}
        if self.categories:
            for _key in self.categories:
                if self.categories[_key]:
                    _field_dict[_key] = self.categories[_key].to_dict()
            _dict['categories'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in errors (dict)
        _field_dict = {}
        if self.errors:
            for _key in self.errors:
                if self.errors[_key]:
                    _field_dict[_key] = self.errors[_key].to_dict()
            _dict['errors'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in google_ads (dict)
        _field_dict = {}
        if self.google_ads:
            for _key in self.google_ads:
                if self.google_ads[_key]:
                    _field_dict[_key] = self.google_ads[_key].to_dict()
            _dict['google_ads'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in keyword_performance (dict)
        _field_dict = {}
        if self.keyword_performance:
            for _key in self.keyword_performance:
                if self.keyword_performance[_key]:
                    _field_dict[_key] = self.keyword_performance[_key].to_dict()
            _dict['keyword_performance'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in keywords_for_keywords (dict)
        _field_dict = {}
        if self.keywords_for_keywords:
            for _key in self.keywords_for_keywords:
                if self.keywords_for_keywords[_key]:
                    _field_dict[_key] = self.keywords_for_keywords[_key].to_dict()
            _dict['keywords_for_keywords'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in keywords_for_site (dict)
        _field_dict = {}
        if self.keywords_for_site:
            for _key in self.keywords_for_site:
                if self.keywords_for_site[_key]:
                    _field_dict[_key] = self.keywords_for_site[_key].to_dict()
            _dict['keywords_for_site'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in languages (dict)
        _field_dict = {}
        if self.languages:
            for _key in self.languages:
                if self.languages[_key]:
                    _field_dict[_key] = self.languages[_key].to_dict()
            _dict['languages'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in locations (dict)
        _field_dict = {}
        if self.locations:
            for _key in self.locations:
                if self.locations[_key]:
                    _field_dict[_key] = self.locations[_key].to_dict()
            _dict['locations'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in search_volume_history (dict)
        _field_dict = {}
        if self.search_volume_history:
            for _key in self.search_volume_history:
                if self.search_volume_history[_key]:
                    _field_dict[_key] = self.search_volume_history[_key].to_dict()
            _dict['search_volume_history'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in search_volume (dict)
        _field_dict = {}
        if self.search_volume:
            for _key in self.search_volume:
                if self.search_volume[_key]:
                    _field_dict[_key] = self.search_volume[_key].to_dict()
            _dict['search_volume'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in explore (dict)
        _field_dict = {}
        if self.explore:
            for _key in self.explore:
                if self.explore[_key]:
                    _field_dict[_key] = self.explore[_key].to_dict()
            _dict['explore'] = _field_dict
        # set to None if ad_traffic_by_keywords (nullable) is None
        # and model_fields_set contains the field
        if self.ad_traffic_by_keywords is None and "ad_traffic_by_keywords" in self.model_fields_set:
            _dict['ad_traffic_by_keywords'] = None

        # set to None if bing (nullable) is None
        # and model_fields_set contains the field
        if self.bing is None and "bing" in self.model_fields_set:
            _dict['bing'] = None

        # set to None if categories (nullable) is None
        # and model_fields_set contains the field
        if self.categories is None and "categories" in self.model_fields_set:
            _dict['categories'] = None

        # set to None if errors (nullable) is None
        # and model_fields_set contains the field
        if self.errors is None and "errors" in self.model_fields_set:
            _dict['errors'] = None

        # set to None if google_ads (nullable) is None
        # and model_fields_set contains the field
        if self.google_ads is None and "google_ads" in self.model_fields_set:
            _dict['google_ads'] = None

        # set to None if keyword_performance (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_performance is None and "keyword_performance" in self.model_fields_set:
            _dict['keyword_performance'] = None

        # set to None if keywords_for_keywords (nullable) is None
        # and model_fields_set contains the field
        if self.keywords_for_keywords is None and "keywords_for_keywords" in self.model_fields_set:
            _dict['keywords_for_keywords'] = None

        # set to None if keywords_for_site (nullable) is None
        # and model_fields_set contains the field
        if self.keywords_for_site is None and "keywords_for_site" in self.model_fields_set:
            _dict['keywords_for_site'] = None

        # set to None if languages (nullable) is None
        # and model_fields_set contains the field
        if self.languages is None and "languages" in self.model_fields_set:
            _dict['languages'] = None

        # set to None if locations (nullable) is None
        # and model_fields_set contains the field
        if self.locations is None and "locations" in self.model_fields_set:
            _dict['locations'] = None

        # set to None if search_volume_history (nullable) is None
        # and model_fields_set contains the field
        if self.search_volume_history is None and "search_volume_history" in self.model_fields_set:
            _dict['search_volume_history'] = None

        # set to None if search_volume (nullable) is None
        # and model_fields_set contains the field
        if self.search_volume is None and "search_volume" in self.model_fields_set:
            _dict['search_volume'] = None

        # set to None if explore (nullable) is None
        # and model_fields_set contains the field
        if self.explore is None and "explore" in self.model_fields_set:
            _dict['explore'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppendixKeywordsDataPriceData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tasks_ready": AppendixTasksReadyKeywordsDataPriceData.from_dict(obj["tasks_ready"]) if obj.get("tasks_ready") is not None else None,
            "ad_traffic_by_keywords": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["ad_traffic_by_keywords"].items()
            )
            if obj.get("ad_traffic_by_keywords") is not None
            else None,
            "bing": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["bing"].items()
            )
            if obj.get("bing") is not None
            else None,
            "categories": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["categories"].items()
            )
            if obj.get("categories") is not None
            else None,
            "errors": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["errors"].items()
            )
            if obj.get("errors") is not None
            else None,
            "google_ads": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["google_ads"].items()
            )
            if obj.get("google_ads") is not None
            else None,
            "keyword_performance": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["keyword_performance"].items()
            )
            if obj.get("keyword_performance") is not None
            else None,
            "keywords_for_keywords": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["keywords_for_keywords"].items()
            )
            if obj.get("keywords_for_keywords") is not None
            else None,
            "keywords_for_site": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["keywords_for_site"].items()
            )
            if obj.get("keywords_for_site") is not None
            else None,
            "languages": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["languages"].items()
            )
            if obj.get("languages") is not None
            else None,
            "locations": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["locations"].items()
            )
            if obj.get("locations") is not None
            else None,
            "search_volume_history": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["search_volume_history"].items()
            )
            if obj.get("search_volume_history") is not None
            else None,
            "search_volume": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["search_volume"].items()
            )
            if obj.get("search_volume") is not None
            else None,
            "explore": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["explore"].items()
            )
            if obj.get("explore") is not None
            else None
        })
        return _obj


