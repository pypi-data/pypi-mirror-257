# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Htags(BaseModel):
    """
    Htags
    """ # noqa: E501
    h4: Optional[List[Optional[StrictStr]]] = None
    h1: Optional[List[Optional[StrictStr]]] = None
    h2: Optional[List[Optional[StrictStr]]] = None
    h3: Optional[List[Optional[StrictStr]]] = None
    h5: Optional[List[Optional[StrictStr]]] = None
    __properties: ClassVar[List[str]] = ["h4", "h1", "h2", "h3", "h5"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Htags from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if h4 (nullable) is None
        # and model_fields_set contains the field
        if self.h4 is None and "h4" in self.model_fields_set:
            _dict['h4'] = None

        # set to None if h1 (nullable) is None
        # and model_fields_set contains the field
        if self.h1 is None and "h1" in self.model_fields_set:
            _dict['h1'] = None

        # set to None if h2 (nullable) is None
        # and model_fields_set contains the field
        if self.h2 is None and "h2" in self.model_fields_set:
            _dict['h2'] = None

        # set to None if h3 (nullable) is None
        # and model_fields_set contains the field
        if self.h3 is None and "h3" in self.model_fields_set:
            _dict['h3'] = None

        # set to None if h5 (nullable) is None
        # and model_fields_set contains the field
        if self.h5 is None and "h5" in self.model_fields_set:
            _dict['h5'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Htags from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "h4": obj.get("h4"),
            "h1": obj.get("h1"),
            "h2": obj.get("h2"),
            "h3": obj.get("h3"),
            "h5": obj.get("h5")
        })
        return _obj


