# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel
from typing import Any, ClassVar, Dict, List, Optional
from dataforseo_client.models.appendix_keywords_data_price_data import AppendixKeywordsDataPriceData
from dataforseo_client.models.appendix_priority_tasks_ready_keywords_data_price_data_info import AppendixPriorityTasksReadyKeywordsDataPriceDataInfo
from typing import Optional, Set
from typing_extensions import Self

class AppendixPriceData(BaseModel):
    """
    AppendixPriceData
    """ # noqa: E501
    keywords_data: Optional[AppendixKeywordsDataPriceData] = None
    merchant: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    serp: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    appendix: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    app_data: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    backlinks: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    business_data: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    content_analysis: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    content_generation: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    dataforseo_labs: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    domain_analytics: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    on_page: Optional[Dict[str, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo]] = None
    __properties: ClassVar[List[str]] = ["keywords_data", "merchant", "serp", "appendix", "app_data", "backlinks", "business_data", "content_analysis", "content_generation", "dataforseo_labs", "domain_analytics", "on_page"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppendixPriceData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of keywords_data
        if self.keywords_data:
            _dict['keywords_data'] = self.keywords_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in merchant (dict)
        _field_dict = {}
        if self.merchant:
            for _key in self.merchant:
                if self.merchant[_key]:
                    _field_dict[_key] = self.merchant[_key].to_dict()
            _dict['merchant'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in serp (dict)
        _field_dict = {}
        if self.serp:
            for _key in self.serp:
                if self.serp[_key]:
                    _field_dict[_key] = self.serp[_key].to_dict()
            _dict['serp'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in appendix (dict)
        _field_dict = {}
        if self.appendix:
            for _key in self.appendix:
                if self.appendix[_key]:
                    _field_dict[_key] = self.appendix[_key].to_dict()
            _dict['appendix'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in app_data (dict)
        _field_dict = {}
        if self.app_data:
            for _key in self.app_data:
                if self.app_data[_key]:
                    _field_dict[_key] = self.app_data[_key].to_dict()
            _dict['app_data'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in backlinks (dict)
        _field_dict = {}
        if self.backlinks:
            for _key in self.backlinks:
                if self.backlinks[_key]:
                    _field_dict[_key] = self.backlinks[_key].to_dict()
            _dict['backlinks'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in business_data (dict)
        _field_dict = {}
        if self.business_data:
            for _key in self.business_data:
                if self.business_data[_key]:
                    _field_dict[_key] = self.business_data[_key].to_dict()
            _dict['business_data'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in content_analysis (dict)
        _field_dict = {}
        if self.content_analysis:
            for _key in self.content_analysis:
                if self.content_analysis[_key]:
                    _field_dict[_key] = self.content_analysis[_key].to_dict()
            _dict['content_analysis'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in content_generation (dict)
        _field_dict = {}
        if self.content_generation:
            for _key in self.content_generation:
                if self.content_generation[_key]:
                    _field_dict[_key] = self.content_generation[_key].to_dict()
            _dict['content_generation'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in dataforseo_labs (dict)
        _field_dict = {}
        if self.dataforseo_labs:
            for _key in self.dataforseo_labs:
                if self.dataforseo_labs[_key]:
                    _field_dict[_key] = self.dataforseo_labs[_key].to_dict()
            _dict['dataforseo_labs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in domain_analytics (dict)
        _field_dict = {}
        if self.domain_analytics:
            for _key in self.domain_analytics:
                if self.domain_analytics[_key]:
                    _field_dict[_key] = self.domain_analytics[_key].to_dict()
            _dict['domain_analytics'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in on_page (dict)
        _field_dict = {}
        if self.on_page:
            for _key in self.on_page:
                if self.on_page[_key]:
                    _field_dict[_key] = self.on_page[_key].to_dict()
            _dict['on_page'] = _field_dict
        # set to None if merchant (nullable) is None
        # and model_fields_set contains the field
        if self.merchant is None and "merchant" in self.model_fields_set:
            _dict['merchant'] = None

        # set to None if serp (nullable) is None
        # and model_fields_set contains the field
        if self.serp is None and "serp" in self.model_fields_set:
            _dict['serp'] = None

        # set to None if appendix (nullable) is None
        # and model_fields_set contains the field
        if self.appendix is None and "appendix" in self.model_fields_set:
            _dict['appendix'] = None

        # set to None if app_data (nullable) is None
        # and model_fields_set contains the field
        if self.app_data is None and "app_data" in self.model_fields_set:
            _dict['app_data'] = None

        # set to None if backlinks (nullable) is None
        # and model_fields_set contains the field
        if self.backlinks is None and "backlinks" in self.model_fields_set:
            _dict['backlinks'] = None

        # set to None if business_data (nullable) is None
        # and model_fields_set contains the field
        if self.business_data is None and "business_data" in self.model_fields_set:
            _dict['business_data'] = None

        # set to None if content_analysis (nullable) is None
        # and model_fields_set contains the field
        if self.content_analysis is None and "content_analysis" in self.model_fields_set:
            _dict['content_analysis'] = None

        # set to None if content_generation (nullable) is None
        # and model_fields_set contains the field
        if self.content_generation is None and "content_generation" in self.model_fields_set:
            _dict['content_generation'] = None

        # set to None if dataforseo_labs (nullable) is None
        # and model_fields_set contains the field
        if self.dataforseo_labs is None and "dataforseo_labs" in self.model_fields_set:
            _dict['dataforseo_labs'] = None

        # set to None if domain_analytics (nullable) is None
        # and model_fields_set contains the field
        if self.domain_analytics is None and "domain_analytics" in self.model_fields_set:
            _dict['domain_analytics'] = None

        # set to None if on_page (nullable) is None
        # and model_fields_set contains the field
        if self.on_page is None and "on_page" in self.model_fields_set:
            _dict['on_page'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppendixPriceData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "keywords_data": AppendixKeywordsDataPriceData.from_dict(obj["keywords_data"]) if obj.get("keywords_data") is not None else None,
            "merchant": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["merchant"].items()
            )
            if obj.get("merchant") is not None
            else None,
            "serp": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["serp"].items()
            )
            if obj.get("serp") is not None
            else None,
            "appendix": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["appendix"].items()
            )
            if obj.get("appendix") is not None
            else None,
            "app_data": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["app_data"].items()
            )
            if obj.get("app_data") is not None
            else None,
            "backlinks": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["backlinks"].items()
            )
            if obj.get("backlinks") is not None
            else None,
            "business_data": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["business_data"].items()
            )
            if obj.get("business_data") is not None
            else None,
            "content_analysis": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["content_analysis"].items()
            )
            if obj.get("content_analysis") is not None
            else None,
            "content_generation": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["content_generation"].items()
            )
            if obj.get("content_generation") is not None
            else None,
            "dataforseo_labs": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["dataforseo_labs"].items()
            )
            if obj.get("dataforseo_labs") is not None
            else None,
            "domain_analytics": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["domain_analytics"].items()
            )
            if obj.get("domain_analytics") is not None
            else None,
            "on_page": dict(
                (_k, AppendixPriorityTasksReadyKeywordsDataPriceDataInfo.from_dict(_v))
                for _k, _v in obj["on_page"].items()
            )
            if obj.get("on_page") is not None
            else None
        })
        return _obj


