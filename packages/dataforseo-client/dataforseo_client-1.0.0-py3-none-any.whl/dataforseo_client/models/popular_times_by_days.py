# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.busy_working_time_info import BusyWorkingTimeInfo
from typing import Optional, Set
from typing_extensions import Self

class PopularTimesByDays(BaseModel):
    """
    PopularTimesByDays
    """ # noqa: E501
    sunday: Optional[List[BusyWorkingTimeInfo]] = None
    monday: Optional[List[BusyWorkingTimeInfo]] = None
    tuesday: Optional[List[BusyWorkingTimeInfo]] = None
    wednesday: Optional[List[BusyWorkingTimeInfo]] = None
    thursday: Optional[List[BusyWorkingTimeInfo]] = None
    friday: Optional[List[BusyWorkingTimeInfo]] = None
    saturday: Optional[List[BusyWorkingTimeInfo]] = None
    __properties: ClassVar[List[str]] = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PopularTimesByDays from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sunday (list)
        _items = []
        if self.sunday:
            for _item in self.sunday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sunday'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in monday (list)
        _items = []
        if self.monday:
            for _item in self.monday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['monday'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tuesday (list)
        _items = []
        if self.tuesday:
            for _item in self.tuesday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tuesday'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in wednesday (list)
        _items = []
        if self.wednesday:
            for _item in self.wednesday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['wednesday'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in thursday (list)
        _items = []
        if self.thursday:
            for _item in self.thursday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['thursday'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in friday (list)
        _items = []
        if self.friday:
            for _item in self.friday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['friday'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in saturday (list)
        _items = []
        if self.saturday:
            for _item in self.saturday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['saturday'] = _items
        # set to None if sunday (nullable) is None
        # and model_fields_set contains the field
        if self.sunday is None and "sunday" in self.model_fields_set:
            _dict['sunday'] = None

        # set to None if monday (nullable) is None
        # and model_fields_set contains the field
        if self.monday is None and "monday" in self.model_fields_set:
            _dict['monday'] = None

        # set to None if tuesday (nullable) is None
        # and model_fields_set contains the field
        if self.tuesday is None and "tuesday" in self.model_fields_set:
            _dict['tuesday'] = None

        # set to None if wednesday (nullable) is None
        # and model_fields_set contains the field
        if self.wednesday is None and "wednesday" in self.model_fields_set:
            _dict['wednesday'] = None

        # set to None if thursday (nullable) is None
        # and model_fields_set contains the field
        if self.thursday is None and "thursday" in self.model_fields_set:
            _dict['thursday'] = None

        # set to None if friday (nullable) is None
        # and model_fields_set contains the field
        if self.friday is None and "friday" in self.model_fields_set:
            _dict['friday'] = None

        # set to None if saturday (nullable) is None
        # and model_fields_set contains the field
        if self.saturday is None and "saturday" in self.model_fields_set:
            _dict['saturday'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PopularTimesByDays from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sunday": [BusyWorkingTimeInfo.from_dict(_item) for _item in obj["sunday"]] if obj.get("sunday") is not None else None,
            "monday": [BusyWorkingTimeInfo.from_dict(_item) for _item in obj["monday"]] if obj.get("monday") is not None else None,
            "tuesday": [BusyWorkingTimeInfo.from_dict(_item) for _item in obj["tuesday"]] if obj.get("tuesday") is not None else None,
            "wednesday": [BusyWorkingTimeInfo.from_dict(_item) for _item in obj["wednesday"]] if obj.get("wednesday") is not None else None,
            "thursday": [BusyWorkingTimeInfo.from_dict(_item) for _item in obj["thursday"]] if obj.get("thursday") is not None else None,
            "friday": [BusyWorkingTimeInfo.from_dict(_item) for _item in obj["friday"]] if obj.get("friday") is not None else None,
            "saturday": [BusyWorkingTimeInfo.from_dict(_item) for _item in obj["saturday"]] if obj.get("saturday") is not None else None
        })
        return _obj


