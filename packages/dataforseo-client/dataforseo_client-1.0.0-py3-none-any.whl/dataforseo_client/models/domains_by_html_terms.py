# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DomainsByHtmlTerms(BaseModel):
    """
    DomainsByHtmlTerms
    """ # noqa: E501
    domain_rank: Optional[StrictStr] = Field(default=None, description="backlink rank of the domain the following operators are supported: <, <=, >, >=, =, <>, in, not_in example: \"filters\": [\"domain_rank\",\"in\",[100,500]]")
    domain: Optional[StrictStr] = Field(default=None, description="domain name note: this filter is supported in the Domains by HTML Terms endpoint only the following operators are supported: =, <>, like, not_like you can use the % operator with like and not_like to match any string of zero or more characters example: [\"domain\",\"like\",\"%seo%\"]")
    last_visited: Optional[StrictStr] = Field(default=None, description="most recent date when our crawler visited the domain the following operators are supported: <, > note: last_visited should be specified in the format: “yyyy-mm-dd hh-mm-ss +00:00” example: \"filters\": [\"last_visited\",\">\",\"2022-09-29 15:02:37 +00:00\"]")
    country_iso_code: Optional[StrictStr] = Field(default=None, description="domain ISO code the following operators are supported: =, <>, like, not_like example: \"filters\": [\"country_iso_code\",\"=\",\"US\"]")
    language_code: Optional[StrictStr] = Field(default=None, description="domain language the following operators are supported: =, <>, like, not_like example: \"filters\": [\"language_code\",\"=\",\"en\"]")
    content_language_code: Optional[StrictStr] = Field(default=None, description="content language the following operators are supported: =, <>, like, not_like example: \"filters\": [\"content_language_code\",\"<>\",\"en\"]")
    __properties: ClassVar[List[str]] = ["domain_rank", "domain", "last_visited", "country_iso_code", "language_code", "content_language_code"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainsByHtmlTerms from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if domain_rank (nullable) is None
        # and model_fields_set contains the field
        if self.domain_rank is None and "domain_rank" in self.model_fields_set:
            _dict['domain_rank'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if last_visited (nullable) is None
        # and model_fields_set contains the field
        if self.last_visited is None and "last_visited" in self.model_fields_set:
            _dict['last_visited'] = None

        # set to None if country_iso_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_iso_code is None and "country_iso_code" in self.model_fields_set:
            _dict['country_iso_code'] = None

        # set to None if language_code (nullable) is None
        # and model_fields_set contains the field
        if self.language_code is None and "language_code" in self.model_fields_set:
            _dict['language_code'] = None

        # set to None if content_language_code (nullable) is None
        # and model_fields_set contains the field
        if self.content_language_code is None and "content_language_code" in self.model_fields_set:
            _dict['content_language_code'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainsByHtmlTerms from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain_rank": obj.get("domain_rank"),
            "domain": obj.get("domain"),
            "last_visited": obj.get("last_visited"),
            "country_iso_code": obj.get("country_iso_code"),
            "language_code": obj.get("language_code"),
            "content_language_code": obj.get("content_language_code")
        })
        return _obj


