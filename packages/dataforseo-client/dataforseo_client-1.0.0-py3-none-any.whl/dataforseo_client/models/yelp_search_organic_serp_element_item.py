# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.base_serp_element_item import BaseSerpElementItem
from openapi_client.models.business_address_location_info import BusinessAddressLocationInfo
from openapi_client.models.rating_info import RatingInfo
from openapi_client.models.service_offerings_element import ServiceOfferingsElement
from typing import Optional, Set
from typing_extensions import Self

class YelpSearchOrganicSerpElementItem(BaseSerpElementItem):
    """
    YelpSearchOrganicSerpElementItem
    """ # noqa: E501
    rank_group: Optional[StrictInt] = Field(default=None, description="position within a group of elements with identical type values positions of elements with different type values are omitted from rank_group")
    rank_absolute: Optional[StrictInt] = Field(default=None, description="absolute rank among all the listed results absolute position among all reviews on the list")
    yelp_business_id: Optional[StrictStr] = Field(default=None, description="the unique identifier of a business identity on Yelp example: 2sWZ17vpEF2vuM_7ic721w")
    business_url: Optional[StrictStr] = Field(default=None, description="link to the Yelp profile of the business entity ")
    alias: Optional[StrictStr] = Field(default=None, description="Yelp business identifier displayed only if the request contained the corresponding field")
    name: Optional[StrictStr] = Field(default=None, description="name of the business entity ")
    description: Optional[StrictStr] = Field(default=None, description="description containing the featured review ")
    location: Optional[BusinessAddressLocationInfo] = None
    price_range: Optional[StrictInt] = Field(default=None, description="price range of the business entity indicates the number of currency signs next to the business listing corresponding to its price score")
    phone: Optional[StrictStr] = Field(default=None, description="contact phone number example: (804) 342-1981")
    is_guaranteed: Optional[StrictBool] = Field(default=None, description="Yelp guaranteed label ")
    rating: Optional[RatingInfo] = None
    categories: Optional[List[Optional[StrictStr]]] = None
    photos: Optional[List[Optional[StrictStr]]] = None
    tags: Optional[List[Optional[StrictStr]]] = None
    business_highlights: Optional[List[Optional[StrictStr]]] = None
    service_offerings: Optional[List[ServiceOfferingsElement]] = None
    __properties: ClassVar[List[str]] = ["se_type", "type", "rank_group", "rank_absolute", "yelp_business_id", "business_url", "alias", "name", "description", "location", "price_range", "phone", "is_guaranteed", "rating", "categories", "photos", "tags", "business_highlights", "service_offerings"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of YelpSearchOrganicSerpElementItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_offerings (list)
        _items = []
        if self.service_offerings:
            for _item in self.service_offerings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['service_offerings'] = _items
        # set to None if rank_group (nullable) is None
        # and model_fields_set contains the field
        if self.rank_group is None and "rank_group" in self.model_fields_set:
            _dict['rank_group'] = None

        # set to None if rank_absolute (nullable) is None
        # and model_fields_set contains the field
        if self.rank_absolute is None and "rank_absolute" in self.model_fields_set:
            _dict['rank_absolute'] = None

        # set to None if yelp_business_id (nullable) is None
        # and model_fields_set contains the field
        if self.yelp_business_id is None and "yelp_business_id" in self.model_fields_set:
            _dict['yelp_business_id'] = None

        # set to None if business_url (nullable) is None
        # and model_fields_set contains the field
        if self.business_url is None and "business_url" in self.model_fields_set:
            _dict['business_url'] = None

        # set to None if alias (nullable) is None
        # and model_fields_set contains the field
        if self.alias is None and "alias" in self.model_fields_set:
            _dict['alias'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if price_range (nullable) is None
        # and model_fields_set contains the field
        if self.price_range is None and "price_range" in self.model_fields_set:
            _dict['price_range'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if is_guaranteed (nullable) is None
        # and model_fields_set contains the field
        if self.is_guaranteed is None and "is_guaranteed" in self.model_fields_set:
            _dict['is_guaranteed'] = None

        # set to None if categories (nullable) is None
        # and model_fields_set contains the field
        if self.categories is None and "categories" in self.model_fields_set:
            _dict['categories'] = None

        # set to None if photos (nullable) is None
        # and model_fields_set contains the field
        if self.photos is None and "photos" in self.model_fields_set:
            _dict['photos'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if business_highlights (nullable) is None
        # and model_fields_set contains the field
        if self.business_highlights is None and "business_highlights" in self.model_fields_set:
            _dict['business_highlights'] = None

        # set to None if service_offerings (nullable) is None
        # and model_fields_set contains the field
        if self.service_offerings is None and "service_offerings" in self.model_fields_set:
            _dict['service_offerings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of YelpSearchOrganicSerpElementItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "se_type": obj.get("se_type"),
            "type": obj.get("type"),
            "rank_group": obj.get("rank_group"),
            "rank_absolute": obj.get("rank_absolute"),
            "yelp_business_id": obj.get("yelp_business_id"),
            "business_url": obj.get("business_url"),
            "alias": obj.get("alias"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "location": BusinessAddressLocationInfo.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "price_range": obj.get("price_range"),
            "phone": obj.get("phone"),
            "is_guaranteed": obj.get("is_guaranteed"),
            "rating": RatingInfo.from_dict(obj["rating"]) if obj.get("rating") is not None else None,
            "categories": obj.get("categories"),
            "photos": obj.get("photos"),
            "tags": obj.get("tags"),
            "business_highlights": obj.get("business_highlights"),
            "service_offerings": [ServiceOfferingsElement.from_dict(_item) for _item in obj["service_offerings"]] if obj.get("service_offerings") is not None else None
        })
        return _obj


