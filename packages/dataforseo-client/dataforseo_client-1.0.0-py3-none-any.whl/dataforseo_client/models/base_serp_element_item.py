# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class BaseSerpElementItem(BaseModel):
    """
    BaseSerpElementItem
    """ # noqa: E501
    se_type: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["se_type", "type"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'answer_box': 'QAnswerBoxSerpElementItem','app': 'DataAppSerpElementItem','buy_on_google': 'BuyOnGoogleSerpElementItem','carousel': 'CarouselSerpElementItem','commercial_units': 'CommercialUnitsSerpElementItem','currency_box': 'CurrencyBoxSerpElementItem','dataset': 'DatasetSerpElementItem','dictionary': 'DictionarySerpElementItem','discussions_and_forums': 'DiscussionsAndForumsSerpElementItem','event_item': 'EventItemSerpElementItem','events': 'EventsSerpElementItem','explore_brands': 'ExploreBrandsSerpElementItem','featured_snippet': 'FeaturedSnippetSerpElementItem','find_results_on': 'FindResultsOnSerpElementItem','found_on_web': 'FoundOnWebSerpElementItem','google_business_info': 'GoogleBusinessInfoSerpElementItem','google_business_post': 'GoogleBusinessPostSerpElementItem','google_flights': 'GoogleFlightsSerpElementItem','google_hotels': 'GoogleHotelsSerpElementItem','google_jobs_item': 'GoogleJobsItemSerpElementItem','google_posts': 'GooglePostsSerpElementItem','google_reviews': 'GoogleReviewsSerpElementItem','google_reviews_search': 'GoogleReviewsSearchSerpElementItem','google_shopping_paid': 'GoogleShoppingPaidSerpElementItem','google_shopping_serp': 'GoogleShoppingSerpSerpElementItem','google_shopping_sponsored_carousel': 'GoogleShoppingSponsoredCarouselSerpElementItem','hotels_pack': 'HotelsPackSerpElementItem','images': 'ImagesSerpElementItem','images_search': 'ImagesSearchSerpElementItem','jobs': 'JobsSerpElementItem','knowledge_graph': 'KnowledgeGraphSerpElementItem','knowledge_graph_carousel_item': 'KnowledgeGraphCarouselItemSerpElementItem','knowledge_graph_description_item': 'KnowledgeGraphDescriptionItemSerpElementItem','knowledge_graph_expanded_item': 'KnowledgeGraphExpandedItemSerpElementItem','knowledge_graph_hotels_booking_item': 'KnowledgeGraphHotelsBookingItemSerpElementItem','knowledge_graph_images_item': 'KnowledgeGraphImagesItemSerpElementItem','knowledge_graph_list_item': 'KnowledgeGraphListItemSerpElementItem','knowledge_graph_part_item': 'KnowledgeGraphPartItemSerpElementItem','knowledge_graph_row_item': 'KnowledgeGraphRowItemSerpElementItem','knowledge_graph_shopping_item': 'KnowledgeGraphShoppingItemSerpElementItem','local_pack': 'LocalPackSerpElementItem','local_services': 'LocalServicesSerpElementItem','map': 'MapSerpElementItem','maps_paid_item': 'MapsPaidItemSerpElementItem','maps_search': 'MapsSearchSerpElementItem','math_solver': 'MathSolverSerpElementItem','mention_carousel': 'MentionCarouselSerpElementItem','multi_carousel': 'MultiCarouselSerpElementItem','news_search': 'NewsSearchSerpElementItem','organic': 'OrganicSerpElementItem','paid': 'PaidSerpElementItem','people_also_ask': 'PeopleAlsoAskSerpElementItem','people_also_search': 'PeopleAlsoSearchSerpElementItem','perspectives': 'PerspectivesSerpElementItem','podcasts': 'PodcastsSerpElementItem','popular_products': 'PopularProductsSerpElementItem','product_considerations': 'ProductConsiderationsSerpElementItem','product_info_element': 'ProductInfoElementSerpElementItem','questions_and_answers': 'QuestionsAndAnswersSerpElementItem','recipes': 'RecipesSerpElementItem','refine_products': 'RefineProductsSerpElementItem','related_searches': 'RelatedSearchesSerpElementItem','scholarly_articles': 'ScholarlyArticlesSerpElementItem','shopping': 'ShoppingSerpElementItem','shopping_specification': 'ShoppingSpecificationSerpElementItem','shops_list': 'ShopsListSerpElementItem','short_videos': 'ShortVideosSerpElementItem','stocks_box': 'StocksBoxSerpElementItem','top_sights': 'TopSightsSerpElementItem','top_stories': 'TopStoriesSerpElementItem','tripadvisor_review_search': 'TripadvisorReviewSearchSerpElementItem','tripadvisor_search_organic': 'TripadvisorSearchOrganicSerpElementItem','trustpilot_review_search': 'TrustpilotReviewSearchSerpElementItem','trustpilot_search_organic': 'TrustpilotSearchOrganicSerpElementItem','twitter': 'TwitterSerpElementItem','video': 'VideoSerpElementItem','visual_stories': 'VisualStoriesSerpElementItem','yelp_reviews_search': 'YelpReviewsSearchSerpElementItem','yelp_search_organic': 'YelpSearchOrganicSerpElementItem','yelp_search_paid': 'YelpSearchPaidSerpElementItem','youtube_comment': 'YoutubeCommentSerpElementItem','youtube_subtitles': 'YoutubeSubtitlesSerpElementItem','youtube_video_info': 'YoutubeVideoInfoSerpElementItem'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]]:
        """Create an instance of BaseSerpElementItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]]:
        """Create an instance of BaseSerpElementItem from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("BaseSerpElementItem failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.buy_on_google_serp_element_item import BuyOnGoogleSerpElementItem
from openapi_client.models.carousel_serp_element_item import CarouselSerpElementItem
from openapi_client.models.commercial_units_serp_element_item import CommercialUnitsSerpElementItem
from openapi_client.models.currency_box_serp_element_item import CurrencyBoxSerpElementItem
from openapi_client.models.data_app_serp_element_item import DataAppSerpElementItem
from openapi_client.models.dataset_serp_element_item import DatasetSerpElementItem
from openapi_client.models.dictionary_serp_element_item import DictionarySerpElementItem
from openapi_client.models.discussions_and_forums_serp_element_item import DiscussionsAndForumsSerpElementItem
from openapi_client.models.event_item_serp_element_item import EventItemSerpElementItem
from openapi_client.models.events_serp_element_item import EventsSerpElementItem
from openapi_client.models.explore_brands_serp_element_item import ExploreBrandsSerpElementItem
from openapi_client.models.featured_snippet_serp_element_item import FeaturedSnippetSerpElementItem
from openapi_client.models.find_results_on_serp_element_item import FindResultsOnSerpElementItem
from openapi_client.models.found_on_web_serp_element_item import FoundOnWebSerpElementItem
from openapi_client.models.google_business_info_serp_element_item import GoogleBusinessInfoSerpElementItem
from openapi_client.models.google_business_post_serp_element_item import GoogleBusinessPostSerpElementItem
from openapi_client.models.google_flights_serp_element_item import GoogleFlightsSerpElementItem
from openapi_client.models.google_hotels_serp_element_item import GoogleHotelsSerpElementItem
from openapi_client.models.google_jobs_item_serp_element_item import GoogleJobsItemSerpElementItem
from openapi_client.models.google_posts_serp_element_item import GooglePostsSerpElementItem
from openapi_client.models.google_reviews_search_serp_element_item import GoogleReviewsSearchSerpElementItem
from openapi_client.models.google_reviews_serp_element_item import GoogleReviewsSerpElementItem
from openapi_client.models.google_shopping_paid_serp_element_item import GoogleShoppingPaidSerpElementItem
from openapi_client.models.google_shopping_serp_serp_element_item import GoogleShoppingSerpSerpElementItem
from openapi_client.models.google_shopping_sponsored_carousel_serp_element_item import GoogleShoppingSponsoredCarouselSerpElementItem
from openapi_client.models.hotels_pack_serp_element_item import HotelsPackSerpElementItem
from openapi_client.models.images_search_serp_element_item import ImagesSearchSerpElementItem
from openapi_client.models.images_serp_element_item import ImagesSerpElementItem
from openapi_client.models.jobs_serp_element_item import JobsSerpElementItem
from openapi_client.models.knowledge_graph_carousel_item_serp_element_item import KnowledgeGraphCarouselItemSerpElementItem
from openapi_client.models.knowledge_graph_description_item_serp_element_item import KnowledgeGraphDescriptionItemSerpElementItem
from openapi_client.models.knowledge_graph_expanded_item_serp_element_item import KnowledgeGraphExpandedItemSerpElementItem
from openapi_client.models.knowledge_graph_hotels_booking_item_serp_element_item import KnowledgeGraphHotelsBookingItemSerpElementItem
from openapi_client.models.knowledge_graph_images_item_serp_element_item import KnowledgeGraphImagesItemSerpElementItem
from openapi_client.models.knowledge_graph_list_item_serp_element_item import KnowledgeGraphListItemSerpElementItem
from openapi_client.models.knowledge_graph_part_item_serp_element_item import KnowledgeGraphPartItemSerpElementItem
from openapi_client.models.knowledge_graph_row_item_serp_element_item import KnowledgeGraphRowItemSerpElementItem
from openapi_client.models.knowledge_graph_serp_element_item import KnowledgeGraphSerpElementItem
from openapi_client.models.knowledge_graph_shopping_item_serp_element_item import KnowledgeGraphShoppingItemSerpElementItem
from openapi_client.models.local_pack_serp_element_item import LocalPackSerpElementItem
from openapi_client.models.local_services_serp_element_item import LocalServicesSerpElementItem
from openapi_client.models.map_serp_element_item import MapSerpElementItem
from openapi_client.models.maps_paid_item_serp_element_item import MapsPaidItemSerpElementItem
from openapi_client.models.maps_search_serp_element_item import MapsSearchSerpElementItem
from openapi_client.models.math_solver_serp_element_item import MathSolverSerpElementItem
from openapi_client.models.mention_carousel_serp_element_item import MentionCarouselSerpElementItem
from openapi_client.models.multi_carousel_serp_element_item import MultiCarouselSerpElementItem
from openapi_client.models.news_search_serp_element_item import NewsSearchSerpElementItem
from openapi_client.models.organic_serp_element_item import OrganicSerpElementItem
from openapi_client.models.paid_serp_element_item import PaidSerpElementItem
from openapi_client.models.people_also_ask_serp_element_item import PeopleAlsoAskSerpElementItem
from openapi_client.models.people_also_search_serp_element_item import PeopleAlsoSearchSerpElementItem
from openapi_client.models.perspectives_serp_element_item import PerspectivesSerpElementItem
from openapi_client.models.podcasts_serp_element_item import PodcastsSerpElementItem
from openapi_client.models.popular_products_serp_element_item import PopularProductsSerpElementItem
from openapi_client.models.product_considerations_serp_element_item import ProductConsiderationsSerpElementItem
from openapi_client.models.product_info_element_serp_element_item import ProductInfoElementSerpElementItem
from openapi_client.models.q_answer_box_serp_element_item import QAnswerBoxSerpElementItem
from openapi_client.models.questions_and_answers_serp_element_item import QuestionsAndAnswersSerpElementItem
from openapi_client.models.recipes_serp_element_item import RecipesSerpElementItem
from openapi_client.models.refine_products_serp_element_item import RefineProductsSerpElementItem
from openapi_client.models.related_searches_serp_element_item import RelatedSearchesSerpElementItem
from openapi_client.models.scholarly_articles_serp_element_item import ScholarlyArticlesSerpElementItem
from openapi_client.models.shopping_serp_element_item import ShoppingSerpElementItem
from openapi_client.models.shopping_specification_serp_element_item import ShoppingSpecificationSerpElementItem
from openapi_client.models.shops_list_serp_element_item import ShopsListSerpElementItem
from openapi_client.models.short_videos_serp_element_item import ShortVideosSerpElementItem
from openapi_client.models.stocks_box_serp_element_item import StocksBoxSerpElementItem
from openapi_client.models.top_sights_serp_element_item import TopSightsSerpElementItem
from openapi_client.models.top_stories_serp_element_item import TopStoriesSerpElementItem
from openapi_client.models.tripadvisor_review_search_serp_element_item import TripadvisorReviewSearchSerpElementItem
from openapi_client.models.tripadvisor_search_organic_serp_element_item import TripadvisorSearchOrganicSerpElementItem
from openapi_client.models.trustpilot_review_search_serp_element_item import TrustpilotReviewSearchSerpElementItem
from openapi_client.models.trustpilot_search_organic_serp_element_item import TrustpilotSearchOrganicSerpElementItem
from openapi_client.models.twitter_serp_element_item import TwitterSerpElementItem
from openapi_client.models.video_serp_element_item import VideoSerpElementItem
from openapi_client.models.visual_stories_serp_element_item import VisualStoriesSerpElementItem
from openapi_client.models.yelp_reviews_search_serp_element_item import YelpReviewsSearchSerpElementItem
from openapi_client.models.yelp_search_organic_serp_element_item import YelpSearchOrganicSerpElementItem
from openapi_client.models.yelp_search_paid_serp_element_item import YelpSearchPaidSerpElementItem
from openapi_client.models.youtube_comment_serp_element_item import YoutubeCommentSerpElementItem
from openapi_client.models.youtube_subtitles_serp_element_item import YoutubeSubtitlesSerpElementItem
from openapi_client.models.youtube_video_info_serp_element_item import YoutubeVideoInfoSerpElementItem
# TODO: Rewrite to not use raise_errors
BaseSerpElementItem.model_rebuild(raise_errors=False)

