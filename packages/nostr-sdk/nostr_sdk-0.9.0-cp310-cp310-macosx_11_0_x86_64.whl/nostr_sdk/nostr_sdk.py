

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import typing
import platform
from .nostr import ClientMessage
from .nostr import Event
from .nostr import EventBuilder
from .nostr import EventId
from .nostr import FileMetadata
from .nostr import Filter
from .nostr import Keys
from .nostr import Metadata
from .nostr import Nip44Version
from .nostr import NostrConnectMetadata
from .nostr import NostrConnectUri
from .nostr import NostrWalletConnectUri
from .nostr import PublicKey
from .nostr import RelayInformationDocument
from .nostr import RelayMessage
from .nostr import Timestamp
from .nostr import UnsignedEvent
from .nostr import ZapType
from .nostr import _UniffiConverterTypeClientMessage
from .nostr import _UniffiConverterTypeEvent
from .nostr import _UniffiConverterTypeEventBuilder
from .nostr import _UniffiConverterTypeEventId
from .nostr import _UniffiConverterTypeFileMetadata
from .nostr import _UniffiConverterTypeFilter
from .nostr import _UniffiConverterTypeKeys
from .nostr import _UniffiConverterTypeMetadata
from .nostr import _UniffiConverterTypeNip44Version
from .nostr import _UniffiConverterTypeNostrConnectMetadata
from .nostr import _UniffiConverterTypeNostrConnectURI
from .nostr import _UniffiConverterTypeNostrWalletConnectURI
from .nostr import _UniffiConverterTypePublicKey
from .nostr import _UniffiConverterTypeRelayInformationDocument
from .nostr import _UniffiConverterTypeRelayMessage
from .nostr import _UniffiConverterTypeTimestamp
from .nostr import _UniffiConverterTypeUnsignedEvent
from .nostr import _UniffiConverterTypeZapType
from .nostr import _UniffiRustBuffer as _UniffiRustBufferClientMessage
from .nostr import _UniffiRustBuffer as _UniffiRustBufferEvent
from .nostr import _UniffiRustBuffer as _UniffiRustBufferEventBuilder
from .nostr import _UniffiRustBuffer as _UniffiRustBufferEventId
from .nostr import _UniffiRustBuffer as _UniffiRustBufferFileMetadata
from .nostr import _UniffiRustBuffer as _UniffiRustBufferFilter
from .nostr import _UniffiRustBuffer as _UniffiRustBufferKeys
from .nostr import _UniffiRustBuffer as _UniffiRustBufferMetadata
from .nostr import _UniffiRustBuffer as _UniffiRustBufferNip44Version
from .nostr import _UniffiRustBuffer as _UniffiRustBufferNostrConnectMetadata
from .nostr import _UniffiRustBuffer as _UniffiRustBufferNostrConnectURI
from .nostr import _UniffiRustBuffer as _UniffiRustBufferNostrWalletConnectURI
from .nostr import _UniffiRustBuffer as _UniffiRustBufferPublicKey
from .nostr import _UniffiRustBuffer as _UniffiRustBufferRelayInformationDocument
from .nostr import _UniffiRustBuffer as _UniffiRustBufferRelayMessage
from .nostr import _UniffiRustBuffer as _UniffiRustBufferTimestamp
from .nostr import _UniffiRustBuffer as _UniffiRustBufferUnsignedEvent
from .nostr import _UniffiRustBuffer as _UniffiRustBufferZapType

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

    def read_c_size_t(self):
        return self._unpack_from(ctypes.sizeof(ctypes.c_size_t) , "@N")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_PANIC:
            return "_UniffiRustCallStatus(CALL_PANIC)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: _UniffiRustBuffer, buf_ptr: *mut _UniffiRustBuffer) -> int`
_UNIFFI_FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, ctypes.POINTER(ctypes.c_char), ctypes.c_int, ctypes.POINTER(_UniffiRustBuffer))

# UniFFI future continuation
_UNIFFI_FUTURE_CONTINUATION_T = ctypes.CFUNCTYPE(None, ctypes.c_size_t, ctypes.c_int8)

class _UniffiPointerManagerCPython:
    """
    Manage giving out pointers to Python objects on CPython

    This class is used to generate opaque pointers that reference Python objects to pass to Rust.
    It assumes a CPython platform.  See _UniffiPointerManagerGeneral for the alternative.
    """

    def new_pointer(self, obj):
        """
        Get a pointer for an object as a ctypes.c_size_t instance

        Each call to new_pointer() must be balanced with exactly one call to release_pointer()

        This returns a ctypes.c_size_t.  This is always the same size as a pointer and can be
        interchanged with pointers for FFI function arguments and return values.
        """
        # IncRef the object since we're going to pass a pointer to Rust
        ctypes.pythonapi.Py_IncRef(ctypes.py_object(obj))
        # id() is the object address on CPython
        # (https://docs.python.org/3/library/functions.html#id)
        return id(obj)

    def release_pointer(self, address):
        py_obj = ctypes.cast(address, ctypes.py_object)
        obj = py_obj.value
        ctypes.pythonapi.Py_DecRef(py_obj)
        return obj

    def lookup(self, address):
        return ctypes.cast(address, ctypes.py_object).value

class _UniffiPointerManagerGeneral:
    """
    Manage giving out pointers to Python objects on non-CPython platforms

    This has the same API as _UniffiPointerManagerCPython, but doesn't assume we're running on
    CPython and is slightly slower.

    Instead of using real pointers, it maps integer values to objects and returns the keys as
    c_size_t values.
    """

    def __init__(self):
        self._map = {}
        self._lock = threading.Lock()
        self._current_handle = 0

    def new_pointer(self, obj):
        with self._lock:
            handle = self._current_handle
            self._current_handle += 1
            self._map[handle] = obj
        return handle

    def release_pointer(self, handle):
        with self._lock:
            return self._map.pop(handle)

    def lookup(self, handle):
        with self._lock:
            return self._map[handle]

# Pick an pointer manager implementation based on the platform
if platform.python_implementation() == 'CPython':
    _UniffiPointerManager = _UniffiPointerManagerCPython # type: ignore
else:
    _UniffiPointerManager = _UniffiPointerManagerGeneral # type: ignore
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value
 
    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
ctypes type for the foreign executor callback.  This is a built-in interface for scheduling
tasks

Args:
  executor: opaque c_size_t value representing the eventloop
  delay: delay in ms
  task: function pointer to the task callback
  task_data: void pointer to the task callback data

Normally we should call task(task_data) after the detail.
However, when task is NULL this indicates that Rust has dropped the ForeignExecutor and we should
decrease the EventLoop refcount.
"""
_UNIFFI_FOREIGN_EXECUTOR_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int8, ctypes.c_size_t, ctypes.c_uint32, ctypes.c_void_p, ctypes.c_void_p)

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_size_t, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("nostr_sdk_ffi")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 25
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_nostr_sdk_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_nostr_sdk_ffi_checksum_func_init_logger() != 44192:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_activesubscription_filters() != 8367:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_activesubscription_id() != 99:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relay() != 57027:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relays() != 27754:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_connect() != 931:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay() != 12024:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_database() != 35613:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect() != 38433:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay() != 18020:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_file_metadata() != 58872:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_from() != 49941:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_of() != 23606:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap() != 4181:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_handle_notifications() != 27417:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_reconcile() != 3186:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_relay() != 41238:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_relays() != 59335:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay() != 42775:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_req_events_of() != 46817:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_direct_msg() != 32469:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event() != 47519:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder() != 39572:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder_to() != 22137:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to() != 6479:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg() != 58092:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to() != 42632:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_sealed_msg() != 6050:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata() != 54186:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_shutdown() != 18928:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_sign_event_builder() != 7645:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_signer() != 28106:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_start() != 10767:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_stop() != 46184:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe() != 40441:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe() != 26478:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_update_difficulty() != 12432:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_zap() != 1111:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build() != 20078:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database() != 12209:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts() != 13520:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer() != 41863:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_zapper() != 3815:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_direction() != 5632:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_initial_timeout() != 62157:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_nostr_connect_uri() != 19908:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_relay_url() != 34734:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_signer_public_key() != 15386:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count() != 29275:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id() != 58471:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_seen_on_relays() != 50082:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_profile() != 40742:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query() != 20917:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event() != 2944:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe() != 31282:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_decrypt() != 32567:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_encrypt() != 379:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_decrypt() != 36349:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_encrypt() != 7786:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_public_key() != 31667:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event() != 25384:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event_builder() != 61711:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_connection_timeout() != 57490:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_difficulty() != 36158:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_min_pow() != 15641:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_req_filters_chunk_size() != 53892:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_send_timeout() != 53894:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_skip_disconnected_relays() != 19868:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_timeout() != 43772:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_send() != 40688:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_subscription() != 1585:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_profile_metadata() != 15986:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_profile_name() != 10929:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_profile_public_key() != 64123:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_connect() != 8946:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_document() != 25236:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_get_events_of() != 43008:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected() != 21940:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_proxy() != 17424:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_queue() != 4051:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_req_events_of() != 17597:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg() != 63498:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_stats() != 51498:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_status() != 26346:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_stop() != 54326:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe() != 5468:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions() != 677:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_terminate() != 51591:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe() != 16471:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_url() != 41822:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_attempts() != 17386:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_received() != 13245:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_sent() != 19587:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_connected_at() != 25899:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_latency() != 14031:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success() != 3056:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_uptime() != 18216:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_disconnected() != 37015:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_send_confirmation() != 45105:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_timeout() != 51782:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_zapdetails_message() != 63214:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_client_new() != 53564:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_client_with_opts() != 37424:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new() != 53242:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_negentropyoptions_new() != 50372:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nip46signer_new() != 18981:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_sqlite() != 12427:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_keys() != 57992:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_nip46() != 49500:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrzapper_nwc() != 49293:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_options_new() != 47978:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_profile_new() != 10444:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relaysendoptions_new() != 12601:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_zapdetails_new() != 7558:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_event() != 10586:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_public_key() != 19196:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_msg() != 60004:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle() != 7650:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_activesubscription.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_activesubscription.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_activesubscription.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_activesubscription.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_activesubscription_filters.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_activesubscription_filters.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_activesubscription_id.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_activesubscription_id.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_client.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_client.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_client.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_client.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_with_opts.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_with_opts.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relay.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relays.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relays.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_relay.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_database.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_database.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_file_metadata.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_file_metadata.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_from.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_from.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_of.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_of.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reconcile.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reconcile.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relay.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relays.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relays.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_remove_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_remove_relay.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_req_events_of.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_req_events_of.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_direct_msg.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_direct_msg.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder_to.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_to.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBufferClientMessage,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBufferClientMessage,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_sealed_msg.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_sealed_msg.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_set_metadata.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_set_metadata.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_shutdown.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_shutdown.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_signer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_signer.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_start.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_start.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_stop.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_stop.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_difficulty.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_difficulty.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_zap.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_zap.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_clientbuilder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_clientbuilder.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_clientbuilder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_clientbuilder.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_zapper.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_zapper.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_negentropyoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_negentropyoptions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_negentropyoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_negentropyoptions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_negentropyoptions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_negentropyoptions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_direction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_direction.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_initial_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_initial_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nip46signer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nip46signer.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nip46signer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nip46signer.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nip46signer_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nip46signer_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_nostr_connect_uri.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_nostr_connect_uri.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_relay_url.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_relay_url.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_signer_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_signer_public_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrdatabase.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrdatabase.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_sqlite.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_sqlite.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_seen_on_relays.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_seen_on_relays.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_profile.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_profile.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrsigner.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrsigner.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrsigner.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrsigner.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_nip46.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_nip46.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBufferNip44Version,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_public_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event_builder.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event_builder.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrzapper.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrzapper.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrzapper.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrzapper.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrzapper_nwc.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrzapper_nwc.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_options.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_options.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_options.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_options.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_options_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_options_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_connection_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_connection_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_difficulty.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_difficulty.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_min_pow.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_min_pow.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_req_filters_chunk_size.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_req_filters_chunk_size.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_send_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_send_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_skip_disconnected_relays.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_skip_disconnected_relays.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_send.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_send.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_subscription.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_subscription.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_profile.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_profile.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_profile.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_profile.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_profile_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_profile_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_metadata.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_metadata.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_name.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_name.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_public_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relay.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relay.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relay.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relay.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_connect.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_connect.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_document.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_document.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_get_events_of.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_get_events_of.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_is_connected.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_is_connected.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_proxy.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_proxy.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_queue.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_queue.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_req_events_of.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_req_events_of.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_msg.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBufferClientMessage,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_msg.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stats.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stats.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_status.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_status.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stop.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stop.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_terminate.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_terminate.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_url.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_url.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_received.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_received.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_at.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_at.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_uptime.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_uptime.restype = ctypes.c_double
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaysendoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaysendoptions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaysendoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaysendoptions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaysendoptions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaysendoptions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_disconnected.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_disconnected.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_send_confirmation.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_send_confirmation.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapdetails.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapdetails.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapdetails.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapdetails.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapdetails_new.argtypes = (
    _UniffiRustBufferZapType,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapdetails_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_message.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_message.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapentity.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapentity.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapentity.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapentity.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_event.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_event.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_public_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_handlenotification.argtypes = (
    _UNIFFI_FOREIGN_CALLBACK_T,
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_handlenotification.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_func_init_logger.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_func_init_logger.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_free.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u8.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u16.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i16.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u32.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i32.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u64.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i64.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_f32.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_f32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_f32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_f64.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_f64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_f64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_void.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_func_init_logger.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_func_init_logger.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_activesubscription_filters.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_activesubscription_filters.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_activesubscription_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_activesubscription_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_database.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_database.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_file_metadata.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_file_metadata.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_from.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_from.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_of.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_of.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_handle_notifications.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_handle_notifications.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_reconcile.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_reconcile.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_req_events_of.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_req_events_of.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_direct_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_direct_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_sealed_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_sealed_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_shutdown.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_shutdown.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_sign_event_builder.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_sign_event_builder.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_signer.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_signer.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_start.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_start.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_stop.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_stop.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_update_difficulty.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_update_difficulty.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_zap.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_zap.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_zapper.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_zapper.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_direction.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_direction.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_initial_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_initial_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_nostr_connect_uri.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_nostr_connect_uri.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_relay_url.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_relay_url.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_signer_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_signer_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_seen_on_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_seen_on_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_profile.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_profile.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_decrypt.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_decrypt.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_encrypt.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_encrypt.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_decrypt.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_decrypt.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_encrypt.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_encrypt.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event_builder.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event_builder.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_connection_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_connection_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_difficulty.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_difficulty.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_min_pow.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_min_pow.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_req_filters_chunk_size.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_req_filters_chunk_size.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_send_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_send_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_skip_disconnected_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_skip_disconnected_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_send.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_send.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_subscription.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_subscription.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_metadata.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_metadata.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_name.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_name.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_connect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_connect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_document.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_document.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_get_events_of.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_get_events_of.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_proxy.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_proxy.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_queue.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_queue.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_req_events_of.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_req_events_of.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_stats.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_stats.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_status.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_status.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_stop.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_stop.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_terminate.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_terminate.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_url.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_url.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_attempts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_attempts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_received.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_received.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_sent.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_sent.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_connected_at.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_connected_at.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_latency.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_latency.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_uptime.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_uptime.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_disconnected.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_disconnected.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_send_confirmation.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_send_confirmation.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_zapdetails_message.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_zapdetails_message.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_client_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_client_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_client_with_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_client_with_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_negentropyoptions_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_negentropyoptions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nip46signer_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nip46signer_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_sqlite.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_sqlite.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_keys.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_keys.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_nip46.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_nip46.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrzapper_nwc.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrzapper_nwc.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_options_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_options_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_profile_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_profile_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaysendoptions_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaysendoptions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapdetails_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapdetails_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle.restype = ctypes.c_uint16
_UniffiLib.ffi_nostr_sdk_ffi_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_nostr_sdk_ffi_uniffi_contract_version.restype = ctypes.c_uint32
_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Async support

# Public interface members begin here.


class _UniffiConverterUInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.read_u8()

    @staticmethod
    def write(value, buf):
        buf.write_u8(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterDouble(_UniffiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.read_double()

    @staticmethod
    def write(value, buf):
        buf.write_double(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

# The Duration type.
Duration = datetime.timedelta

# There is a loss of precision when converting from Rust durations,
# which are accurate to the nanosecond,
# to Python durations, which are only accurate to the microsecond.
class _UniffiConverterDuration(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        seconds = buf.read_u64()
        microseconds = buf.read_u32() / 1.0e3
        return datetime.timedelta(seconds=seconds, microseconds=microseconds)

    @staticmethod
    def check_lower(value):
        seconds = value.seconds + value.days * 24 * 3600
        if seconds < 0:
            raise ValueError("Invalid duration, must be non-negative")

    @staticmethod
    def write(value, buf):
        seconds = value.seconds + value.days * 24 * 3600
        nanoseconds = value.microseconds * 1000
        buf.write_i64(seconds)
        buf.write_u32(nanoseconds)



class ActiveSubscriptionProtocol(typing.Protocol):
    def filters(self, ):
        raise NotImplementedError
    def id(self, ):
        raise NotImplementedError

class ActiveSubscription:

    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_activesubscription, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_activesubscription, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def filters(self, ) -> "typing.List[Filter]":
        return _UniffiConverterSequenceTypeFilter.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_activesubscription_filters,self._uniffi_clone_pointer(),)
        )






    def id(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_activesubscription_id,self._uniffi_clone_pointer(),)
        )





class _UniffiConverterTypeActiveSubscription:

    @staticmethod
    def lift(value: int):
        return ActiveSubscription._make_instance_(value)

    @staticmethod
    def check_lower(value: ActiveSubscription):
        if not isinstance(value, ActiveSubscription):
            raise TypeError("Expected ActiveSubscription instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ActiveSubscriptionProtocol):
        if not isinstance(value, ActiveSubscription):
            raise TypeError("Expected ActiveSubscription instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ActiveSubscriptionProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ClientProtocol(typing.Protocol):
    def add_relay(self, url: "str"):
        raise NotImplementedError
    def add_relays(self, relays: "typing.List[str]"):
        raise NotImplementedError
    def connect(self, ):
        raise NotImplementedError
    def connect_relay(self, url: "str"):
        raise NotImplementedError
    def database(self, ):
        raise NotImplementedError
    def disconnect(self, ):
        raise NotImplementedError
    def disconnect_relay(self, url: "str"):
        raise NotImplementedError
    def file_metadata(self, description: "str",metadata: "FileMetadata"):
        raise NotImplementedError
    def get_events_from(self, urls: "typing.List[str]",filters: "typing.List[Filter]",timeout: "typing.Optional[Duration]"):
        """
        Get events of filters from specific relays

        Get events both from **local database** and **relays**

        If no relay is specified, will be queried only the database.
        """

        raise NotImplementedError
    def get_events_of(self, filters: "typing.List[Filter]",timeout: "typing.Optional[Duration]"):
        raise NotImplementedError
    def gift_wrap(self, receiver: "PublicKey",rumor: "EventBuilder"):
        """
        Gift Wrap

        <https://github.com/nostr-protocol/nips/blob/master/59.md>
        """

        raise NotImplementedError
    def handle_notifications(self, handler: "HandleNotification"):
        raise NotImplementedError
    def reconcile(self, filter: "Filter",opts: "NegentropyOptions"):
        raise NotImplementedError
    def relay(self, url: "str"):
        raise NotImplementedError
    def relays(self, ):
        raise NotImplementedError
    def remove_relay(self, url: "str"):
        raise NotImplementedError
    def req_events_of(self, filters: "typing.List[Filter]",timeout: "typing.Optional[Duration]"):
        raise NotImplementedError
    def send_direct_msg(self, receiver: "PublicKey",msg: "str",reply: "typing.Optional[EventId]"):
        raise NotImplementedError
    def send_event(self, event: "Event"):
        raise NotImplementedError
    def send_event_builder(self, builder: "EventBuilder"):
        """
        Take an [`EventBuilder`], sign it by using the [`NostrSigner`] and broadcast to all relays.

        Rise an error if the [`NostrSigner`] is not set.
        """

        raise NotImplementedError
    def send_event_builder_to(self, urls: "typing.List[str]",builder: "EventBuilder"):
        """
        Take an [`EventBuilder`], sign it by using the [`NostrSigner`] and broadcast to specific relays.

        Rise an error if the [`NostrSigner`] is not set.
        """

        raise NotImplementedError
    def send_event_to(self, urls: "typing.List[str]",event: "Event"):
        raise NotImplementedError
    def send_msg(self, msg: "ClientMessage"):
        raise NotImplementedError
    def send_msg_to(self, urls: "typing.List[str]",msg: "ClientMessage"):
        raise NotImplementedError
    def send_sealed_msg(self, receiver: "PublicKey",message: "str"):
        """Send GiftWrapper Sealed Direct message"""

        raise NotImplementedError
    def set_metadata(self, metadata: "Metadata"):
        raise NotImplementedError
    def shutdown(self, ):
        raise NotImplementedError
    def sign_event_builder(self, builder: "EventBuilder"):
        """Signs the `EventBuilder` into an `Event` using the `NostrSigner`"""

        raise NotImplementedError
    def signer(self, ):
        raise NotImplementedError
    def start(self, ):
        raise NotImplementedError
    def stop(self, ):
        raise NotImplementedError
    def subscribe(self, filters: "typing.List[Filter]"):
        raise NotImplementedError
    def unsubscribe(self, ):
        raise NotImplementedError
    def update_difficulty(self, difficulty: "int"):
        raise NotImplementedError
    def zap(self, to: "ZapEntity",satoshi: "int",details: "typing.Optional[ZapDetails]"):
        """
        Send a Zap!

        This method automatically create a split zap to support Rust Nostr development.
        """

        raise NotImplementedError

class Client:

    _pointer: ctypes.c_void_p
    def __init__(self, signer: "typing.Optional[NostrSigner]"):
        _UniffiConverterOptionalTypeNostrSigner.check_lower(signer)
        
        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_new,
        _UniffiConverterOptionalTypeNostrSigner.lower(signer))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_client, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_client, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def with_opts(cls, signer: "typing.Optional[NostrSigner]",opts: "Options"):
        _UniffiConverterOptionalTypeNostrSigner.check_lower(signer)
        
        _UniffiConverterTypeOptions.check_lower(opts)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_with_opts,
        _UniffiConverterOptionalTypeNostrSigner.lower(signer),
        _UniffiConverterTypeOptions.lower(opts))
        return cls._make_instance_(pointer)



    def add_relay(self, url: "str") -> "bool":
        _UniffiConverterString.check_lower(url)
        
        return _UniffiConverterBool.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relay,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url))
        )






    def add_relays(self, relays: "typing.List[str]"):
        _UniffiConverterSequenceString.check_lower(relays)
        
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relays,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(relays))







    def connect(self, ):
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect,self._uniffi_clone_pointer(),)







    def connect_relay(self, url: "str"):
        _UniffiConverterString.check_lower(url)
        
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_relay,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url))







    def database(self, ) -> "NostrDatabase":
        return _UniffiConverterTypeNostrDatabase.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_database,self._uniffi_clone_pointer(),)
        )






    def disconnect(self, ):
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect,self._uniffi_clone_pointer(),)







    def disconnect_relay(self, url: "str"):
        _UniffiConverterString.check_lower(url)
        
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url))







    def file_metadata(self, description: "str",metadata: "FileMetadata") -> "EventId":
        _UniffiConverterString.check_lower(description)
        
        _UniffiConverterTypeFileMetadata.check_lower(metadata)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_file_metadata,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(description),
        _UniffiConverterTypeFileMetadata.lower(metadata))
        )






    def get_events_from(self, urls: "typing.List[str]",filters: "typing.List[Filter]",timeout: "typing.Optional[Duration]") -> "typing.List[Event]":
        """
        Get events of filters from specific relays

        Get events both from **local database** and **relays**

        If no relay is specified, will be queried only the database.
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        return _UniffiConverterSequenceTypeEvent.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_from,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterOptionalDuration.lower(timeout))
        )






    def get_events_of(self, filters: "typing.List[Filter]",timeout: "typing.Optional[Duration]") -> "typing.List[Event]":
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        return _UniffiConverterSequenceTypeEvent.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_of,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterOptionalDuration.lower(timeout))
        )






    def gift_wrap(self, receiver: "PublicKey",rumor: "EventBuilder"):
        """
        Gift Wrap

        <https://github.com/nostr-protocol/nips/blob/master/59.md>
        """

        _UniffiConverterTypePublicKey.check_lower(receiver)
        
        _UniffiConverterTypeEventBuilder.check_lower(rumor)
        
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(receiver),
        _UniffiConverterTypeEventBuilder.lower(rumor))







    def handle_notifications(self, handler: "HandleNotification"):
        _UniffiConverterCallbackInterfaceHandleNotification.check_lower(handler)
        
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceHandleNotification.lower(handler))







    def reconcile(self, filter: "Filter",opts: "NegentropyOptions"):
        _UniffiConverterTypeFilter.check_lower(filter)
        
        _UniffiConverterTypeNegentropyOptions.check_lower(opts)
        
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reconcile,self._uniffi_clone_pointer(),
        _UniffiConverterTypeFilter.lower(filter),
        _UniffiConverterTypeNegentropyOptions.lower(opts))







    def relay(self, url: "str") -> "Relay":
        _UniffiConverterString.check_lower(url)
        
        return _UniffiConverterTypeRelay.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relay,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url))
        )






    def relays(self, ) -> "dict":
        return _UniffiConverterMapStringTypeRelay.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relays,self._uniffi_clone_pointer(),)
        )






    def remove_relay(self, url: "str"):
        _UniffiConverterString.check_lower(url)
        
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_remove_relay,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url))







    def req_events_of(self, filters: "typing.List[Filter]",timeout: "typing.Optional[Duration]"):
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_req_events_of,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterOptionalDuration.lower(timeout))







    def send_direct_msg(self, receiver: "PublicKey",msg: "str",reply: "typing.Optional[EventId]") -> "EventId":
        _UniffiConverterTypePublicKey.check_lower(receiver)
        
        _UniffiConverterString.check_lower(msg)
        
        _UniffiConverterOptionalTypeEventId.check_lower(reply)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_direct_msg,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(receiver),
        _UniffiConverterString.lower(msg),
        _UniffiConverterOptionalTypeEventId.lower(reply))
        )






    def send_event(self, event: "Event") -> "EventId":
        _UniffiConverterTypeEvent.check_lower(event)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEvent.lower(event))
        )






    def send_event_builder(self, builder: "EventBuilder") -> "EventId":
        """
        Take an [`EventBuilder`], sign it by using the [`NostrSigner`] and broadcast to all relays.

        Rise an error if the [`NostrSigner`] is not set.
        """

        _UniffiConverterTypeEventBuilder.check_lower(builder)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEventBuilder.lower(builder))
        )






    def send_event_builder_to(self, urls: "typing.List[str]",builder: "EventBuilder") -> "EventId":
        """
        Take an [`EventBuilder`], sign it by using the [`NostrSigner`] and broadcast to specific relays.

        Rise an error if the [`NostrSigner`] is not set.
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypeEventBuilder.check_lower(builder)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder_to,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypeEventBuilder.lower(builder))
        )






    def send_event_to(self, urls: "typing.List[str]",event: "Event") -> "EventId":
        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypeEvent.check_lower(event)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_to,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypeEvent.lower(event))
        )






    def send_msg(self, msg: "ClientMessage"):
        _UniffiConverterTypeClientMessage.check_lower(msg)
        
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg,self._uniffi_clone_pointer(),
        _UniffiConverterTypeClientMessage.lower(msg))







    def send_msg_to(self, urls: "typing.List[str]",msg: "ClientMessage"):
        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypeClientMessage.check_lower(msg)
        
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypeClientMessage.lower(msg))







    def send_sealed_msg(self, receiver: "PublicKey",message: "str"):
        """Send GiftWrapper Sealed Direct message"""

        _UniffiConverterTypePublicKey.check_lower(receiver)
        
        _UniffiConverterString.check_lower(message)
        
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_sealed_msg,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(receiver),
        _UniffiConverterString.lower(message))







    def set_metadata(self, metadata: "Metadata") -> "EventId":
        _UniffiConverterTypeMetadata.check_lower(metadata)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_set_metadata,self._uniffi_clone_pointer(),
        _UniffiConverterTypeMetadata.lower(metadata))
        )






    def shutdown(self, ):
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_shutdown,self._uniffi_clone_pointer(),)







    def sign_event_builder(self, builder: "EventBuilder") -> "Event":
        """Signs the `EventBuilder` into an `Event` using the `NostrSigner`"""

        _UniffiConverterTypeEventBuilder.check_lower(builder)
        
        return _UniffiConverterTypeEvent.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEventBuilder.lower(builder))
        )






    def signer(self, ) -> "NostrSigner":
        return _UniffiConverterTypeNostrSigner.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_signer,self._uniffi_clone_pointer(),)
        )






    def start(self, ):
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_start,self._uniffi_clone_pointer(),)







    def stop(self, ):
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_stop,self._uniffi_clone_pointer(),)







    def subscribe(self, filters: "typing.List[Filter]"):
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters))







    def unsubscribe(self, ):
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe,self._uniffi_clone_pointer(),)







    def update_difficulty(self, difficulty: "int"):
        _UniffiConverterUInt8.check_lower(difficulty)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_difficulty,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))







    def zap(self, to: "ZapEntity",satoshi: "int",details: "typing.Optional[ZapDetails]"):
        """
        Send a Zap!

        This method automatically create a split zap to support Rust Nostr development.
        """

        _UniffiConverterTypeZapEntity.check_lower(to)
        
        _UniffiConverterUInt64.check_lower(satoshi)
        
        _UniffiConverterOptionalTypeZapDetails.check_lower(details)
        
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_zap,self._uniffi_clone_pointer(),
        _UniffiConverterTypeZapEntity.lower(to),
        _UniffiConverterUInt64.lower(satoshi),
        _UniffiConverterOptionalTypeZapDetails.lower(details))






class _UniffiConverterTypeClient:

    @staticmethod
    def lift(value: int):
        return Client._make_instance_(value)

    @staticmethod
    def check_lower(value: Client):
        if not isinstance(value, Client):
            raise TypeError("Expected Client instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ClientProtocol):
        if not isinstance(value, Client):
            raise TypeError("Expected Client instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ClientProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ClientBuilderProtocol(typing.Protocol):
    def build(self, ):
        """Build [`Client`]"""

        raise NotImplementedError
    def database(self, database: "NostrDatabase"):
        raise NotImplementedError
    def opts(self, opts: "Options"):
        """Set opts"""

        raise NotImplementedError
    def signer(self, signer: "NostrSigner"):
        raise NotImplementedError
    def zapper(self, zapper: "NostrZapper"):
        raise NotImplementedError

class ClientBuilder:

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """New client builder"""

        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_clientbuilder, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_clientbuilder, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def build(self, ) -> "Client":
        """Build [`Client`]"""

        return _UniffiConverterTypeClient.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build,self._uniffi_clone_pointer(),)
        )






    def database(self, database: "NostrDatabase") -> "ClientBuilder":
        _UniffiConverterTypeNostrDatabase.check_lower(database)
        
        return _UniffiConverterTypeClientBuilder.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database,self._uniffi_clone_pointer(),
        _UniffiConverterTypeNostrDatabase.lower(database))
        )






    def opts(self, opts: "Options") -> "ClientBuilder":
        """Set opts"""

        _UniffiConverterTypeOptions.check_lower(opts)
        
        return _UniffiConverterTypeClientBuilder.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts,self._uniffi_clone_pointer(),
        _UniffiConverterTypeOptions.lower(opts))
        )






    def signer(self, signer: "NostrSigner") -> "ClientBuilder":
        _UniffiConverterTypeNostrSigner.check_lower(signer)
        
        return _UniffiConverterTypeClientBuilder.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer,self._uniffi_clone_pointer(),
        _UniffiConverterTypeNostrSigner.lower(signer))
        )






    def zapper(self, zapper: "NostrZapper") -> "ClientBuilder":
        _UniffiConverterTypeNostrZapper.check_lower(zapper)
        
        return _UniffiConverterTypeClientBuilder.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_zapper,self._uniffi_clone_pointer(),
        _UniffiConverterTypeNostrZapper.lower(zapper))
        )





class _UniffiConverterTypeClientBuilder:

    @staticmethod
    def lift(value: int):
        return ClientBuilder._make_instance_(value)

    @staticmethod
    def check_lower(value: ClientBuilder):
        if not isinstance(value, ClientBuilder):
            raise TypeError("Expected ClientBuilder instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ClientBuilderProtocol):
        if not isinstance(value, ClientBuilder):
            raise TypeError("Expected ClientBuilder instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ClientBuilderProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NegentropyOptionsProtocol(typing.Protocol):
    def direction(self, direction: "NegentropyDirection"):
        """Negentropy Sync direction (default: down)"""

        raise NotImplementedError
    def initial_timeout(self, timeout: "Duration"):
        """Timeout to check if negentropy it's supported (default: 10 secs)"""

        raise NotImplementedError

class NegentropyOptions:

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """New default options"""

        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_negentropyoptions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_negentropyoptions, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_negentropyoptions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def direction(self, direction: "NegentropyDirection") -> "NegentropyOptions":
        """Negentropy Sync direction (default: down)"""

        _UniffiConverterTypeNegentropyDirection.check_lower(direction)
        
        return _UniffiConverterTypeNegentropyOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_direction,self._uniffi_clone_pointer(),
        _UniffiConverterTypeNegentropyDirection.lower(direction))
        )






    def initial_timeout(self, timeout: "Duration") -> "NegentropyOptions":
        """Timeout to check if negentropy it's supported (default: 10 secs)"""

        _UniffiConverterDuration.check_lower(timeout)
        
        return _UniffiConverterTypeNegentropyOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_initial_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterDuration.lower(timeout))
        )





class _UniffiConverterTypeNegentropyOptions:

    @staticmethod
    def lift(value: int):
        return NegentropyOptions._make_instance_(value)

    @staticmethod
    def check_lower(value: NegentropyOptions):
        if not isinstance(value, NegentropyOptions):
            raise TypeError("Expected NegentropyOptions instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NegentropyOptionsProtocol):
        if not isinstance(value, NegentropyOptions):
            raise TypeError("Expected NegentropyOptions instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NegentropyOptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class Nip46SignerProtocol(typing.Protocol):
    def nostr_connect_uri(self, metadata: "NostrConnectMetadata"):
        raise NotImplementedError
    def relay_url(self, ):
        """Get signer relay [`Url`]"""

        raise NotImplementedError
    def signer_public_key(self, ):
        """Get signer public key"""

        raise NotImplementedError

class Nip46Signer:

    _pointer: ctypes.c_void_p
    def __init__(self, relay_url: "str",app_keys: "Keys",signer_public_key: "typing.Optional[PublicKey]",timeout: "Duration"):
        """New NIP46 remote signer"""

        _UniffiConverterString.check_lower(relay_url)
        
        _UniffiConverterTypeKeys.check_lower(app_keys)
        
        _UniffiConverterOptionalTypePublicKey.check_lower(signer_public_key)
        
        _UniffiConverterDuration.check_lower(timeout)
        
        self._pointer = _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nip46signer_new,
        _UniffiConverterString.lower(relay_url),
        _UniffiConverterTypeKeys.lower(app_keys),
        _UniffiConverterOptionalTypePublicKey.lower(signer_public_key),
        _UniffiConverterDuration.lower(timeout))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nip46signer, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nip46signer, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def nostr_connect_uri(self, metadata: "NostrConnectMetadata") -> "NostrConnectUri":
        _UniffiConverterTypeNostrConnectMetadata.check_lower(metadata)
        
        return _UniffiConverterTypeNostrConnectURI.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_nostr_connect_uri,self._uniffi_clone_pointer(),
        _UniffiConverterTypeNostrConnectMetadata.lower(metadata))
        )






    def relay_url(self, ) -> "str":
        """Get signer relay [`Url`]"""

        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_relay_url,self._uniffi_clone_pointer(),)
        )






    def signer_public_key(self, ) -> "PublicKey":
        """Get signer public key"""

        return _UniffiConverterTypePublicKey.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_signer_public_key,self._uniffi_clone_pointer(),)
        )





class _UniffiConverterTypeNip46Signer:

    @staticmethod
    def lift(value: int):
        return Nip46Signer._make_instance_(value)

    @staticmethod
    def check_lower(value: Nip46Signer):
        if not isinstance(value, Nip46Signer):
            raise TypeError("Expected Nip46Signer instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: Nip46SignerProtocol):
        if not isinstance(value, Nip46Signer):
            raise TypeError("Expected Nip46Signer instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: Nip46SignerProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NostrDatabaseProtocol(typing.Protocol):
    def count(self, filters: "typing.List[Filter]"):
        raise NotImplementedError
    def event_by_id(self, event_id: "EventId"):
        """Get [`Event`] by [`EventId`]"""

        raise NotImplementedError
    def event_seen_on_relays(self, event_id: "EventId"):
        """Get list of relays that have seen the [`EventId`]"""

        raise NotImplementedError
    def profile(self, public_key: "PublicKey"):
        raise NotImplementedError
    def query(self, filters: "typing.List[Filter]"):
        raise NotImplementedError
    def save_event(self, event: "Event"):
        """
        Save [`Event`] into store

        Return `true` if event was successfully saved into database.
        """

        raise NotImplementedError
    def wipe(self, ):
        """Wipe all data"""

        raise NotImplementedError

class NostrDatabase:

    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrdatabase, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def sqlite(cls, path: "str"):
        _UniffiConverterString.check_lower(path)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_sqlite,
        _UniffiConverterString.lower(path))
        return cls._make_instance_(pointer)



    def count(self, filters: "typing.List[Filter]") -> "int":
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        return _UniffiConverterUInt64.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters))
        )






    def event_by_id(self, event_id: "EventId") -> "Event":
        """Get [`Event`] by [`EventId`]"""

        _UniffiConverterTypeEventId.check_lower(event_id)
        
        return _UniffiConverterTypeEvent.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEventId.lower(event_id))
        )






    def event_seen_on_relays(self, event_id: "EventId") -> "typing.Optional[typing.List[str]]":
        """Get list of relays that have seen the [`EventId`]"""

        _UniffiConverterTypeEventId.check_lower(event_id)
        
        return _UniffiConverterOptionalSequenceString.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_seen_on_relays,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEventId.lower(event_id))
        )






    def profile(self, public_key: "PublicKey") -> "Profile":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        return _UniffiConverterTypeProfile.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_profile,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(public_key))
        )






    def query(self, filters: "typing.List[Filter]") -> "typing.List[Event]":
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        return _UniffiConverterSequenceTypeEvent.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters))
        )






    def save_event(self, event: "Event") -> "bool":
        """
        Save [`Event`] into store

        Return `true` if event was successfully saved into database.
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        return _UniffiConverterBool.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEvent.lower(event))
        )






    def wipe(self, ):
        """Wipe all data"""

        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe,self._uniffi_clone_pointer(),)






class _UniffiConverterTypeNostrDatabase:

    @staticmethod
    def lift(value: int):
        return NostrDatabase._make_instance_(value)

    @staticmethod
    def check_lower(value: NostrDatabase):
        if not isinstance(value, NostrDatabase):
            raise TypeError("Expected NostrDatabase instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NostrDatabaseProtocol):
        if not isinstance(value, NostrDatabase):
            raise TypeError("Expected NostrDatabase instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NostrDatabaseProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NostrSignerProtocol(typing.Protocol):
    def nip04_decrypt(self, public_key: "PublicKey",encrypted_content: "str"):
        raise NotImplementedError
    def nip04_encrypt(self, public_key: "PublicKey",content: "str"):
        raise NotImplementedError
    def nip44_decrypt(self, public_key: "PublicKey",content: "str"):
        raise NotImplementedError
    def nip44_encrypt(self, public_key: "PublicKey",content: "str",version: "Nip44Version"):
        raise NotImplementedError
    def public_key(self, ):
        """Get signer public key"""

        raise NotImplementedError
    def sign_event(self, unsigned_event: "UnsignedEvent"):
        raise NotImplementedError
    def sign_event_builder(self, builder: "EventBuilder"):
        raise NotImplementedError

class NostrSigner:

    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrsigner, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrsigner, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def keys(cls, keys: "Keys"):
        _UniffiConverterTypeKeys.check_lower(keys)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys,
        _UniffiConverterTypeKeys.lower(keys))
        return cls._make_instance_(pointer)


    @classmethod
    def nip46(cls, nip46: "Nip46Signer"):
        _UniffiConverterTypeNip46Signer.check_lower(nip46)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_nip46,
        _UniffiConverterTypeNip46Signer.lower(nip46))
        return cls._make_instance_(pointer)



    def nip04_decrypt(self, public_key: "PublicKey",encrypted_content: "str") -> "str":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterString.check_lower(encrypted_content)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterString.lower(encrypted_content))
        )






    def nip04_encrypt(self, public_key: "PublicKey",content: "str") -> "str":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterString.check_lower(content)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterString.lower(content))
        )






    def nip44_decrypt(self, public_key: "PublicKey",content: "str") -> "str":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterString.check_lower(content)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterString.lower(content))
        )






    def nip44_encrypt(self, public_key: "PublicKey",content: "str",version: "Nip44Version") -> "str":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterString.check_lower(content)
        
        _UniffiConverterTypeNip44Version.check_lower(version)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterString.lower(content),
        _UniffiConverterTypeNip44Version.lower(version))
        )






    def public_key(self, ) -> "PublicKey":
        """Get signer public key"""

        return _UniffiConverterTypePublicKey.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_public_key,self._uniffi_clone_pointer(),)
        )






    def sign_event(self, unsigned_event: "UnsignedEvent") -> "Event":
        _UniffiConverterTypeUnsignedEvent.check_lower(unsigned_event)
        
        return _UniffiConverterTypeEvent.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event,self._uniffi_clone_pointer(),
        _UniffiConverterTypeUnsignedEvent.lower(unsigned_event))
        )






    def sign_event_builder(self, builder: "EventBuilder") -> "Event":
        _UniffiConverterTypeEventBuilder.check_lower(builder)
        
        return _UniffiConverterTypeEvent.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event_builder,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEventBuilder.lower(builder))
        )





class _UniffiConverterTypeNostrSigner:

    @staticmethod
    def lift(value: int):
        return NostrSigner._make_instance_(value)

    @staticmethod
    def check_lower(value: NostrSigner):
        if not isinstance(value, NostrSigner):
            raise TypeError("Expected NostrSigner instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NostrSignerProtocol):
        if not isinstance(value, NostrSigner):
            raise TypeError("Expected NostrSigner instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NostrSignerProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NostrZapperProtocol(typing.Protocol):
    """Nostr Zapper"""

    pass

class NostrZapper:
    """Nostr Zapper"""


    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrzapper, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrzapper, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def nwc(cls, uri: "NostrWalletConnectUri"):
        _UniffiConverterTypeNostrWalletConnectURI.check_lower(uri)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrzapper_nwc,
        _UniffiConverterTypeNostrWalletConnectURI.lower(uri))
        return cls._make_instance_(pointer)


class _UniffiConverterTypeNostrZapper:

    @staticmethod
    def lift(value: int):
        return NostrZapper._make_instance_(value)

    @staticmethod
    def check_lower(value: NostrZapper):
        if not isinstance(value, NostrZapper):
            raise TypeError("Expected NostrZapper instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NostrZapperProtocol):
        if not isinstance(value, NostrZapper):
            raise TypeError("Expected NostrZapper instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NostrZapperProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class OptionsProtocol(typing.Protocol):
    def connection_timeout(self, timeout: "typing.Optional[Duration]"):
        """
        Connection timeout (default: None)

        If set to `None`, the client will try to connect to the relays without waiting.
        """

        raise NotImplementedError
    def difficulty(self, difficulty: "int"):
        raise NotImplementedError
    def min_pow(self, difficulty: "int"):
        """Minimum POW difficulty for received events"""

        raise NotImplementedError
    def req_filters_chunk_size(self, req_filters_chunk_size: "int"):
        raise NotImplementedError
    def send_timeout(self, send_timeout: "typing.Optional[Duration]"):
        raise NotImplementedError
    def skip_disconnected_relays(self, skip: "bool"):
        raise NotImplementedError
    def timeout(self, timeout: "Duration"):
        raise NotImplementedError
    def wait_for_send(self, wait: "bool"):
        raise NotImplementedError
    def wait_for_subscription(self, wait: "bool"):
        raise NotImplementedError

class Options:

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_options_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_options, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_options, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def connection_timeout(self, timeout: "typing.Optional[Duration]") -> "Options":
        """
        Connection timeout (default: None)

        If set to `None`, the client will try to connect to the relays without waiting.
        """

        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_connection_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(timeout))
        )






    def difficulty(self, difficulty: "int") -> "Options":
        _UniffiConverterUInt8.check_lower(difficulty)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_difficulty,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))
        )






    def min_pow(self, difficulty: "int") -> "Options":
        """Minimum POW difficulty for received events"""

        _UniffiConverterUInt8.check_lower(difficulty)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_min_pow,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))
        )






    def req_filters_chunk_size(self, req_filters_chunk_size: "int") -> "Options":
        _UniffiConverterUInt8.check_lower(req_filters_chunk_size)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_req_filters_chunk_size,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(req_filters_chunk_size))
        )






    def send_timeout(self, send_timeout: "typing.Optional[Duration]") -> "Options":
        _UniffiConverterOptionalDuration.check_lower(send_timeout)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_send_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(send_timeout))
        )






    def skip_disconnected_relays(self, skip: "bool") -> "Options":
        _UniffiConverterBool.check_lower(skip)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_skip_disconnected_relays,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(skip))
        )






    def timeout(self, timeout: "Duration") -> "Options":
        _UniffiConverterDuration.check_lower(timeout)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterDuration.lower(timeout))
        )






    def wait_for_send(self, wait: "bool") -> "Options":
        _UniffiConverterBool.check_lower(wait)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_send,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(wait))
        )






    def wait_for_subscription(self, wait: "bool") -> "Options":
        _UniffiConverterBool.check_lower(wait)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_subscription,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(wait))
        )





class _UniffiConverterTypeOptions:

    @staticmethod
    def lift(value: int):
        return Options._make_instance_(value)

    @staticmethod
    def check_lower(value: Options):
        if not isinstance(value, Options):
            raise TypeError("Expected Options instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: OptionsProtocol):
        if not isinstance(value, Options):
            raise TypeError("Expected Options instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: OptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ProfileProtocol(typing.Protocol):
    def metadata(self, ):
        """Get profile metadata"""

        raise NotImplementedError
    def name(self, ):
        """
        Get profile name

        Steps (go to next step if field is `None` or `empty`):
        * Check `display_name` field
        * Check `name` field
        * Return cutted public key (ex. `00000000:00000002`)
        """

        raise NotImplementedError
    def public_key(self, ):
        """Get profile public key"""

        raise NotImplementedError

class Profile:

    _pointer: ctypes.c_void_p
    def __init__(self, public_key: "PublicKey",metadata: "Metadata"):
        """Compose new profile"""

        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterTypeMetadata.check_lower(metadata)
        
        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_profile_new,
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterTypeMetadata.lower(metadata))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_profile, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_profile, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def metadata(self, ) -> "Metadata":
        """Get profile metadata"""

        return _UniffiConverterTypeMetadata.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_metadata,self._uniffi_clone_pointer(),)
        )






    def name(self, ) -> "str":
        """
        Get profile name

        Steps (go to next step if field is `None` or `empty`):
        * Check `display_name` field
        * Check `name` field
        * Return cutted public key (ex. `00000000:00000002`)
        """

        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_name,self._uniffi_clone_pointer(),)
        )






    def public_key(self, ) -> "PublicKey":
        """Get profile public key"""

        return _UniffiConverterTypePublicKey.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_public_key,self._uniffi_clone_pointer(),)
        )





class _UniffiConverterTypeProfile:

    @staticmethod
    def lift(value: int):
        return Profile._make_instance_(value)

    @staticmethod
    def check_lower(value: Profile):
        if not isinstance(value, Profile):
            raise TypeError("Expected Profile instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ProfileProtocol):
        if not isinstance(value, Profile):
            raise TypeError("Expected Profile instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ProfileProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelayProtocol(typing.Protocol):
    def connect(self, connection_timeout: "typing.Optional[Duration]"):
        raise NotImplementedError
    def document(self, ):
        raise NotImplementedError
    def get_events_of(self, filters: "typing.List[Filter]",timeout: "Duration"):
        raise NotImplementedError
    def is_connected(self, ):
        raise NotImplementedError
    def proxy(self, ):
        raise NotImplementedError
    def queue(self, ):
        raise NotImplementedError
    def req_events_of(self, filters: "typing.List[Filter]",timeout: "Duration"):
        raise NotImplementedError
    def send_msg(self, msg: "ClientMessage",opts: "RelaySendOptions"):
        raise NotImplementedError
    def stats(self, ):
        raise NotImplementedError
    def status(self, ):
        raise NotImplementedError
    def stop(self, ):
        raise NotImplementedError
    def subscribe(self, filters: "typing.List[Filter]",opts: "RelaySendOptions"):
        raise NotImplementedError
    def subscriptions(self, ):
        raise NotImplementedError
    def terminate(self, ):
        raise NotImplementedError
    def unsubscribe(self, opts: "RelaySendOptions"):
        raise NotImplementedError
    def url(self, ):
        raise NotImplementedError

class Relay:

    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relay, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relay, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def connect(self, connection_timeout: "typing.Optional[Duration]"):
        _UniffiConverterOptionalDuration.check_lower(connection_timeout)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_connect,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(connection_timeout))







    def document(self, ) -> "RelayInformationDocument":
        return _UniffiConverterTypeRelayInformationDocument.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_document,self._uniffi_clone_pointer(),)
        )






    def get_events_of(self, filters: "typing.List[Filter]",timeout: "Duration") -> "typing.List[Event]":
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterDuration.check_lower(timeout)
        
        return _UniffiConverterSequenceTypeEvent.lift(
            _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_get_events_of,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterDuration.lower(timeout))
        )






    def is_connected(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_is_connected,self._uniffi_clone_pointer(),)
        )






    def proxy(self, ) -> "typing.Optional[str]":
        return _UniffiConverterOptionalString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_proxy,self._uniffi_clone_pointer(),)
        )






    def queue(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_queue,self._uniffi_clone_pointer(),)
        )






    def req_events_of(self, filters: "typing.List[Filter]",timeout: "Duration"):
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterDuration.check_lower(timeout)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_req_events_of,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterDuration.lower(timeout))







    def send_msg(self, msg: "ClientMessage",opts: "RelaySendOptions"):
        _UniffiConverterTypeClientMessage.check_lower(msg)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_msg,self._uniffi_clone_pointer(),
        _UniffiConverterTypeClientMessage.lower(msg),
        _UniffiConverterTypeRelaySendOptions.lower(opts))







    def stats(self, ) -> "RelayConnectionStats":
        return _UniffiConverterTypeRelayConnectionStats.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stats,self._uniffi_clone_pointer(),)
        )






    def status(self, ) -> "RelayStatus":
        return _UniffiConverterTypeRelayStatus.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_status,self._uniffi_clone_pointer(),)
        )






    def stop(self, ):
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stop,self._uniffi_clone_pointer(),)







    def subscribe(self, filters: "typing.List[Filter]",opts: "RelaySendOptions"):
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterTypeRelaySendOptions.lower(opts))







    def subscriptions(self, ) -> "dict":
        return _UniffiConverterMapStringTypeActiveSubscription.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions,self._uniffi_clone_pointer(),)
        )






    def terminate(self, ):
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_terminate,self._uniffi_clone_pointer(),)







    def unsubscribe(self, opts: "RelaySendOptions"):
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call_with_error(
    _UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelaySendOptions.lower(opts))







    def url(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_url,self._uniffi_clone_pointer(),)
        )





class _UniffiConverterTypeRelay:

    @staticmethod
    def lift(value: int):
        return Relay._make_instance_(value)

    @staticmethod
    def check_lower(value: Relay):
        if not isinstance(value, Relay):
            raise TypeError("Expected Relay instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelayProtocol):
        if not isinstance(value, Relay):
            raise TypeError("Expected Relay instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelayProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelayConnectionStatsProtocol(typing.Protocol):
    def attempts(self, ):
        raise NotImplementedError
    def bytes_received(self, ):
        raise NotImplementedError
    def bytes_sent(self, ):
        raise NotImplementedError
    def connected_at(self, ):
        raise NotImplementedError
    def latency(self, ):
        raise NotImplementedError
    def success(self, ):
        raise NotImplementedError
    def uptime(self, ):
        raise NotImplementedError

class RelayConnectionStats:

    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def attempts(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts,self._uniffi_clone_pointer(),)
        )






    def bytes_received(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_received,self._uniffi_clone_pointer(),)
        )






    def bytes_sent(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent,self._uniffi_clone_pointer(),)
        )






    def connected_at(self, ) -> "Timestamp":
        return _UniffiConverterTypeTimestamp.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_at,self._uniffi_clone_pointer(),)
        )






    def latency(self, ) -> "typing.Optional[Duration]":
        return _UniffiConverterOptionalDuration.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency,self._uniffi_clone_pointer(),)
        )






    def success(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success,self._uniffi_clone_pointer(),)
        )






    def uptime(self, ) -> "float":
        return _UniffiConverterDouble.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_uptime,self._uniffi_clone_pointer(),)
        )





class _UniffiConverterTypeRelayConnectionStats:

    @staticmethod
    def lift(value: int):
        return RelayConnectionStats._make_instance_(value)

    @staticmethod
    def check_lower(value: RelayConnectionStats):
        if not isinstance(value, RelayConnectionStats):
            raise TypeError("Expected RelayConnectionStats instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelayConnectionStatsProtocol):
        if not isinstance(value, RelayConnectionStats):
            raise TypeError("Expected RelayConnectionStats instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelayConnectionStatsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelaySendOptionsProtocol(typing.Protocol):
    def skip_disconnected(self, value: "bool"):
        """Skip wait for disconnected relay (default: true)"""

        raise NotImplementedError
    def skip_send_confirmation(self, value: "bool"):
        """Skip wait for confirmation that message is sent (default: false)"""

        raise NotImplementedError
    def timeout(self, timeout: "typing.Optional[Duration]"):
        """
        Timeout for sending event (default: 10 secs)

        If `None`, the default timeout will be used
        """

        raise NotImplementedError

class RelaySendOptions:

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """New default `RelaySendOptions`"""

        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaysendoptions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaysendoptions, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaysendoptions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def skip_disconnected(self, value: "bool") -> "RelaySendOptions":
        """Skip wait for disconnected relay (default: true)"""

        _UniffiConverterBool.check_lower(value)
        
        return _UniffiConverterTypeRelaySendOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_disconnected,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(value))
        )






    def skip_send_confirmation(self, value: "bool") -> "RelaySendOptions":
        """Skip wait for confirmation that message is sent (default: false)"""

        _UniffiConverterBool.check_lower(value)
        
        return _UniffiConverterTypeRelaySendOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_send_confirmation,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(value))
        )






    def timeout(self, timeout: "typing.Optional[Duration]") -> "RelaySendOptions":
        """
        Timeout for sending event (default: 10 secs)

        If `None`, the default timeout will be used
        """

        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        return _UniffiConverterTypeRelaySendOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(timeout))
        )





class _UniffiConverterTypeRelaySendOptions:

    @staticmethod
    def lift(value: int):
        return RelaySendOptions._make_instance_(value)

    @staticmethod
    def check_lower(value: RelaySendOptions):
        if not isinstance(value, RelaySendOptions):
            raise TypeError("Expected RelaySendOptions instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelaySendOptionsProtocol):
        if not isinstance(value, RelaySendOptions):
            raise TypeError("Expected RelaySendOptions instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelaySendOptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ZapDetailsProtocol(typing.Protocol):
    """Zap Details"""

    def message(self, message: "str"):
        """Add message"""

        raise NotImplementedError

class ZapDetails:
    """Zap Details"""


    _pointer: ctypes.c_void_p
    def __init__(self, zap_type: "ZapType"):
        """
        Create new Zap Details

        **Note: `private` zaps are not currently supported here!**
        """

        _UniffiConverterTypeZapType.check_lower(zap_type)
        
        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapdetails_new,
        _UniffiConverterTypeZapType.lower(zap_type))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapdetails, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapdetails, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def message(self, message: "str") -> "ZapDetails":
        """Add message"""

        _UniffiConverterString.check_lower(message)
        
        return _UniffiConverterTypeZapDetails.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_message,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(message))
        )





class _UniffiConverterTypeZapDetails:

    @staticmethod
    def lift(value: int):
        return ZapDetails._make_instance_(value)

    @staticmethod
    def check_lower(value: ZapDetails):
        if not isinstance(value, ZapDetails):
            raise TypeError("Expected ZapDetails instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ZapDetailsProtocol):
        if not isinstance(value, ZapDetails):
            raise TypeError("Expected ZapDetails instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ZapDetailsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ZapEntityProtocol(typing.Protocol):
    """Zap entity"""

    pass

class ZapEntity:
    """Zap entity"""


    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapentity, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapentity, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def event(cls, event_id: "EventId"):
        _UniffiConverterTypeEventId.check_lower(event_id)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_event,
        _UniffiConverterTypeEventId.lower(event_id))
        return cls._make_instance_(pointer)


    @classmethod
    def public_key(cls, public_key: "PublicKey"):
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_public_key,
        _UniffiConverterTypePublicKey.lower(public_key))
        return cls._make_instance_(pointer)


class _UniffiConverterTypeZapEntity:

    @staticmethod
    def lift(value: int):
        return ZapEntity._make_instance_(value)

    @staticmethod
    def check_lower(value: ZapEntity):
        if not isinstance(value, ZapEntity):
            raise TypeError("Expected ZapEntity instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ZapEntityProtocol):
        if not isinstance(value, ZapEntity):
            raise TypeError("Expected ZapEntity instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ZapEntityProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))





class LogLevel(enum.Enum):
    ERROR = 1
    
    WARN = 2
    
    INFO = 3
    
    DEBUG = 4
    
    TRACE = 5
    


class _UniffiConverterTypeLogLevel(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return LogLevel.ERROR
        if variant == 2:
            return LogLevel.WARN
        if variant == 3:
            return LogLevel.INFO
        if variant == 4:
            return LogLevel.DEBUG
        if variant == 5:
            return LogLevel.TRACE
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == LogLevel.ERROR:
            return
        if value == LogLevel.WARN:
            return
        if value == LogLevel.INFO:
            return
        if value == LogLevel.DEBUG:
            return
        if value == LogLevel.TRACE:
            return

    @staticmethod
    def write(value, buf):
        if value == LogLevel.ERROR:
            buf.write_i32(1)
        if value == LogLevel.WARN:
            buf.write_i32(2)
        if value == LogLevel.INFO:
            buf.write_i32(3)
        if value == LogLevel.DEBUG:
            buf.write_i32(4)
        if value == LogLevel.TRACE:
            buf.write_i32(5)







class NegentropyDirection(enum.Enum):
    UP = 1
    
    DOWN = 2
    
    BOTH = 3
    


class _UniffiConverterTypeNegentropyDirection(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return NegentropyDirection.UP
        if variant == 2:
            return NegentropyDirection.DOWN
        if variant == 3:
            return NegentropyDirection.BOTH
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == NegentropyDirection.UP:
            return
        if value == NegentropyDirection.DOWN:
            return
        if value == NegentropyDirection.BOTH:
            return

    @staticmethod
    def write(value, buf):
        if value == NegentropyDirection.UP:
            buf.write_i32(1)
        if value == NegentropyDirection.DOWN:
            buf.write_i32(2)
        if value == NegentropyDirection.BOTH:
            buf.write_i32(3)




# NostrSdkError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class NostrSdkError(Exception):
    pass

_UniffiTempNostrSdkError = NostrSdkError

class NostrSdkError:  # type: ignore
    class Generic(_UniffiTempNostrSdkError):

        def __repr__(self):
            return "NostrSdkError.Generic({})".format(repr(str(self)))
    _UniffiTempNostrSdkError.Generic = Generic # type: ignore

NostrSdkError = _UniffiTempNostrSdkError # type: ignore
del _UniffiTempNostrSdkError


class _UniffiConverterTypeNostrSdkError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return NostrSdkError.Generic(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, NostrSdkError.Generic):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, NostrSdkError.Generic):
            buf.write_i32(1)





class RelayStatus(enum.Enum):
    INITIALIZED = 1
    """Relay initialized"""

    
    PENDING = 2
    """Pending"""

    
    CONNECTING = 3
    """Connecting"""

    
    CONNECTED = 4
    """Relay connected"""

    
    DISCONNECTED = 5
    """Relay disconnected, will retry to connect again"""

    
    STOPPED = 6
    """Stop"""

    
    TERMINATED = 7
    """Relay completely disconnected"""

    


class _UniffiConverterTypeRelayStatus(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return RelayStatus.INITIALIZED
        if variant == 2:
            return RelayStatus.PENDING
        if variant == 3:
            return RelayStatus.CONNECTING
        if variant == 4:
            return RelayStatus.CONNECTED
        if variant == 5:
            return RelayStatus.DISCONNECTED
        if variant == 6:
            return RelayStatus.STOPPED
        if variant == 7:
            return RelayStatus.TERMINATED
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == RelayStatus.INITIALIZED:
            return
        if value == RelayStatus.PENDING:
            return
        if value == RelayStatus.CONNECTING:
            return
        if value == RelayStatus.CONNECTED:
            return
        if value == RelayStatus.DISCONNECTED:
            return
        if value == RelayStatus.STOPPED:
            return
        if value == RelayStatus.TERMINATED:
            return

    @staticmethod
    def write(value, buf):
        if value == RelayStatus.INITIALIZED:
            buf.write_i32(1)
        if value == RelayStatus.PENDING:
            buf.write_i32(2)
        if value == RelayStatus.CONNECTING:
            buf.write_i32(3)
        if value == RelayStatus.CONNECTED:
            buf.write_i32(4)
        if value == RelayStatus.DISCONNECTED:
            buf.write_i32(5)
        if value == RelayStatus.STOPPED:
            buf.write_i32(6)
        if value == RelayStatus.TERMINATED:
            buf.write_i32(7)





class HandleNotification(typing.Protocol):
    def handle_msg(self, relay_url: "str",msg: "RelayMessage"):
        raise NotImplementedError
    def handle(self, relay_url: "str",event: "Event"):
        raise NotImplementedError
import threading

class ConcurrentHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._left_map = {}  # type: Dict[Handle, Any]

        self._lock = threading.Lock()
        self._current_handle = 0
        self._stride = 1

    def insert(self, obj):
        with self._lock:
            handle = self._current_handle
            self._current_handle += self._stride
            self._left_map[handle] = obj
            return handle

    def get(self, handle):
        with self._lock:
            obj = self._left_map.get(handle)
        if not obj:
            raise InternalError("No callback in handlemap; this is a uniffi bug")
        return obj

    def remove(self, handle):
        with self._lock:
            if handle in self._left_map:
                obj = self._left_map.pop(handle)
                return obj

# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class UniffiCallbackInterfaceFfiConverter:
    _handle_map = ConcurrentHandleMap()

    @classmethod
    def lift(cls, handle):
        return cls._handle_map.get(handle)

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def check_lower(cls, cb):
        pass

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

# Declaration and _UniffiConverters for HandleNotification Callback Interface

def UniffiCallbackInterfaceHandleNotification(handle, method, args_data, args_len, buf_ptr):
    
    def invoke_handle_msg(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.handle_msg(
                _UniffiConverterString.read(args_stream), 
                _UniffiConverterTypeRelayMessage.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return _UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_handle(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.handle(
                _UniffiConverterString.read(args_stream), 
                _UniffiConverterTypeEvent.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return _UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    

    cb = _UniffiConverterCallbackInterfaceHandleNotification._handle_map.get(handle)

    if method == IDX_CALLBACK_FREE:
        _UniffiConverterCallbackInterfaceHandleNotification._handle_map.remove(handle)

        # Successfull return
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return _UNIFFI_CALLBACK_SUCCESS

    if method == 1:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_handle_msg(cb, _UniffiRustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = _UniffiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return _UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 2:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_handle(cb, _UniffiRustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = _UniffiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return _UNIFFI_CALLBACK_UNEXPECTED_ERROR
    

    # This should never happen, because an out of bounds method index won't
    # ever be used. Once we can catch errors, we should return an InternalException.
    # https://github.com/mozilla/uniffi-rs/issues/351

    # An unexpected error happened.
    # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
    return _UNIFFI_CALLBACK_UNEXPECTED_ERROR

# We need to keep this function reference alive:
# if they get GC'd while in use then UniFFI internals could attempt to call a function
# that is in freed memory.
# That would be...uh...bad. Yeah, that's the word. Bad.
uniffiCallbackInterfaceHandleNotification = _UNIFFI_FOREIGN_CALLBACK_T(UniffiCallbackInterfaceHandleNotification)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_handlenotification(uniffiCallbackInterfaceHandleNotification)

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceHandleNotification = UniffiCallbackInterfaceFfiConverter()



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalDuration(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterDuration.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterDuration.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterDuration.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeNostrSigner(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeNostrSigner.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeNostrSigner.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeNostrSigner.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZapDetails(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeZapDetails.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZapDetails.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZapDetails.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeEventId(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeEventId.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeEventId.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeEventId.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypePublicKey(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypePublicKey.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypePublicKey.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypePublicKey.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterString.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterString.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeEvent(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeEvent.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeEvent.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeEvent.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeFilter(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeFilter.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeFilter.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeFilter.read(buf) for i in range(count)
        ]



class _UniffiConverterMapStringTypeActiveSubscription(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterTypeActiveSubscription.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterTypeActiveSubscription.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterTypeActiveSubscription.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringTypeRelay(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterTypeRelay.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterTypeRelay.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterTypeRelay.read(buf)
            d[key] = val
        return d

# External type ClientMessage is in namespace "nostr", crate nostr_ffi




# External type Event is in namespace "nostr", crate nostr_ffi




# External type EventBuilder is in namespace "nostr", crate nostr_ffi




# External type EventId is in namespace "nostr", crate nostr_ffi




# External type FileMetadata is in namespace "nostr", crate nostr_ffi




# External type Filter is in namespace "nostr", crate nostr_ffi




# External type Keys is in namespace "nostr", crate nostr_ffi




# External type Metadata is in namespace "nostr", crate nostr_ffi




# External type Nip44Version is in namespace "nostr", crate nostr_ffi




# External type NostrConnectMetadata is in namespace "nostr", crate nostr_ffi




# External type NostrConnectURI is in namespace "nostr", crate nostr_ffi




# External type NostrWalletConnectURI is in namespace "nostr", crate nostr_ffi




# External type PublicKey is in namespace "nostr", crate nostr_ffi




# External type RelayInformationDocument is in namespace "nostr", crate nostr_ffi




# External type RelayMessage is in namespace "nostr", crate nostr_ffi




# External type Timestamp is in namespace "nostr", crate nostr_ffi




# External type UnsignedEvent is in namespace "nostr", crate nostr_ffi




# External type ZapType is in namespace "nostr", crate nostr_ffi




def init_logger(level: "LogLevel"):
    _UniffiConverterTypeLogLevel.check_lower(level)
    
    _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_func_init_logger,
        _UniffiConverterTypeLogLevel.lower(level))


__all__ = [
    "InternalError",
    "LogLevel",
    "NegentropyDirection",
    "NostrSdkError",
    "RelayStatus",
    "init_logger",
    "ActiveSubscription",
    "Client",
    "ClientBuilder",
    "NegentropyOptions",
    "Nip46Signer",
    "NostrDatabase",
    "NostrSigner",
    "NostrZapper",
    "Options",
    "Profile",
    "Relay",
    "RelayConnectionStats",
    "RelaySendOptions",
    "ZapDetails",
    "ZapEntity",
    "HandleNotification",
]

