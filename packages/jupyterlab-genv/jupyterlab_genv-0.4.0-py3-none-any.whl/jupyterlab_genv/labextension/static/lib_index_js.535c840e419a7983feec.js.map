{"version":3,"file":"lib_index_js.535c840e419a7983feec.js","mappings":";;;;;;;;;;;;;;;;;AAAoF;AAC1D;AACnB;AACP;AACA;AACA,gBAAgB,SAAS,QAAQ,gEAAU;AAC3C;AACA;AACA;AACA,gBAAgB,qEAAmB,GAAG,gBAAgB;AACtD,gBAAgB,mEAAiB,GAAG,sCAAsC;AAC1E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,SAAS,QAAQ,gEAAU;AAC3C;AACA,kBAAkB,oEAAkB,CAAC,0DAAmB,CAAC,uDAAc;AACvE;AACA,gBAAgB,0DAAmB;AACnC;AACA,gBAAgB,0DAAmB;AACnC,gBAAgB,0DAAmB;AACnC,gBAAgB,0DAAmB;AACnC;AACA,gBAAgB,qEAAmB,GAAG,gBAAgB;AACtD,gBAAgB,mEAAiB,GAAG,sCAAsC;AAC1E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU,GAAG,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,QAAQ,qEAAmB;AACjD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS,QAAQ,gEAAU;AAC3C;AACA,kBAAkB,oEAAkB,CAAC,0DAAmB,CAAC,uDAAc;AACvE;AACA,gBAAgB,0DAAmB;AACnC,gBAAgB,0DAAmB;AACnC,gBAAgB,0DAAmB;AACnC;AACA;AACA,gBAAgB,0DAAmB;AACnC;AACA,gBAAgB,0DAAmB;AACnC,gBAAgB,0DAAmB;AACnC;AACA,gBAAgB,0DAAmB;AACnC;AACA,gBAAgB,0DAAmB;AACnC,gBAAgB,0DAAmB;AACnC,gBAAgB,0DAAmB;AACnC;AACA;AACA,gBAAgB,qEAAmB,GAAG,gBAAgB;AACtD,gBAAgB,iEAAe,GAAG,0BAA0B;AAC5D;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC,0BAA0B;;;;;;;;;;;;;;;;;;;ACnFoB;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA;AACA,CAAC,0BAA0B;;;;;;;;;;;;;;;;;;;;;;;;AC5D2D;AAC9B;AACf;AACL;AACA;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,cAAc;AACjF;AACA,0CAA0C,sBAAsB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,IAAI;AAC9C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kDAAY;AACxC;AACA,mCAAmC,kDAAY;AAC/C,4BAA4B,sDAAgB;AAC5C;AACA,0BAA0B,sDAAgB;AAC1C;AACA;AACA;AACA,0BAA0B,uDAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA,sBAAsB,gEAA0B;AAChD;AACA;AACA;AACA;AACA;AACA,kBAAkB,sDAAgB;AAClC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6BAA6B,+DAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAM;AAClC;AACA,8BAA8B,qDAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,MAAM,wBAAwB,WAAW;AAChF;AACA;AACA,uCAAuC,MAAM;AAC7C;AACA;AACA;AACA;AACA;AACA,yBAAyB,mDAAM;AAC/B;AACA,2BAA2B,kDAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,SAAS,EAAE,SAAS;AACnD;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe;AAC9B;AACA;AACA;AACA,kCAAkC,gEAAc,GAAG,yBAAyB;AAC5E;AACA;AACA;AACA,2DAA2D,+DAAa;AACxE,kBAAkB,kEAAW;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,2CAA2C;AACrE;AACA,+BAA+B,gEAAc,GAAG,sBAAsB;AACtE;AACA;AACA;AACA,wDAAwD,+DAAa;AACrE,kBAAkB,kEAAW;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,wCAAwC;AAClE;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyterlab_genv/./lib/dialogs.js","webpack://jupyterlab_genv/./lib/handler.js","webpack://jupyterlab_genv/./lib/index.js"],"sourcesContent":["import { Dialog, InputDialog, showDialog, ReactWidget } from '@jupyterlab/apputils';\nimport React from 'react';\nexport var Dialogs;\n(function (Dialogs) {\n    async function noKernel() {\n        const { button } = await showDialog({\n            title: 'No Kernel',\n            body: 'You need a kernel in order to run in a GPU environment.',\n            buttons: [\n                Dialog.cancelButton({ label: 'Later' }),\n                Dialog.warnButton({ label: 'Select kernel', accept: true })\n            ]\n        });\n        return button.accept;\n    }\n    Dialogs.noKernel = noKernel;\n    async function notSupportedKernel() {\n        const { button } = await showDialog({\n            title: 'Not a genv Kernel',\n            body: ReactWidget.create(React.createElement(React.Fragment, null,\n                \"Please select a genv kernel.\",\n                React.createElement(\"br\", null),\n                \"If you don't have any, run the following command:\",\n                React.createElement(\"br\", null),\n                React.createElement(\"br\", null),\n                React.createElement(\"code\", null, \"python -m jupyterlab_genv install\"))),\n            buttons: [\n                Dialog.cancelButton({ label: 'Later' }),\n                Dialog.warnButton({ label: 'Select kernel', accept: true })\n            ]\n        });\n        return button.accept;\n    }\n    Dialogs.notSupportedKernel = notSupportedKernel;\n    async function activate(envs, kernel_id) {\n        const placeholder = 'Create a new environment';\n        function desc(env) {\n            return env.name ? `${env.name} (${env.eid})` : env.eid;\n        }\n        const values = new Map([\n            [placeholder, kernel_id],\n            ...envs.map(env => [desc(env), env.eid])\n        ]);\n        let { value } = await InputDialog.getItem({\n            title: 'Activate GPU Environment',\n            items: [...values.keys()],\n            okLabel: 'Next'\n        });\n        if (value) {\n            value = values.get(value) || value;\n        }\n        return value;\n    }\n    Dialogs.activate = activate;\n    async function configure(eid) {\n        const { button } = await showDialog({\n            title: 'Configure GPU Environment',\n            body: ReactWidget.create(React.createElement(React.Fragment, null,\n                \"Open a terminal and run the following command:\",\n                React.createElement(\"br\", null),\n                React.createElement(\"br\", null),\n                React.createElement(\"code\", null,\n                    \"genv activate --id \",\n                    eid),\n                React.createElement(\"br\", null),\n                \"Then, configure the environment with normal genv commands.\",\n                React.createElement(\"br\", null),\n                React.createElement(\"br\", null),\n                \"If you are not familiar with how to configure genv environments, check out the genv reference.\",\n                React.createElement(\"br\", null),\n                \"You can find it at https://github.com/run-ai/genv.\",\n                React.createElement(\"br\", null),\n                React.createElement(\"br\", null),\n                React.createElement(\"b\", null, \"IMPORTANT\"),\n                \"You will need to restart the kernel for changes form the terminal to effect.\")),\n            buttons: [\n                Dialog.cancelButton({ label: 'Later' }),\n                Dialog.okButton({ label: 'Open a terminal' })\n            ]\n        });\n        return button.accept;\n    }\n    Dialogs.configure = configure;\n})(Dialogs || (Dialogs = {}));\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nasync function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyterlab-genv', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\nexport var Handler;\n(function (Handler) {\n    async function activate(kernel_id, eid) {\n        const body = JSON.stringify({\n            eid: eid,\n            kernel_id: kernel_id\n        });\n        await requestAPI('activate', {\n            body: body,\n            method: 'POST'\n        });\n    }\n    Handler.activate = activate;\n    async function devices() {\n        return await requestAPI('devices');\n    }\n    Handler.devices = devices;\n    async function envs() {\n        return await requestAPI('envs');\n    }\n    Handler.envs = envs;\n    async function find(kernel_id) {\n        return (await requestAPI(`find?kernel_id=${kernel_id}`)) || null;\n    }\n    Handler.find = find;\n})(Handler || (Handler = {}));\n","import { ICommandPalette, MainAreaWidget, ToolbarButton } from '@jupyterlab/apputils';\nimport { refreshIcon } from '@jupyterlab/ui-components';\nimport { Widget } from '@lumino/widgets';\nimport { Handler } from './handler';\nimport { Dialogs } from './dialogs';\nasync function openTerminal(eid, app) {\n    // NOTE(raz): the terminal is returned only when it's created in the first time.\n    //    this means that we can't send commands to the terminal if it's already running.\n    //    we should consider either creating a terminal per kernel or fixing this.\n    //    we tried opening a terminal per kernel but it seems like terminal names can't\n    //    be long enough to contain a kernel identifier.\n    //    here's a reference:\n    //    https://github.com/jupyterlab/jupyterlab/blob/v3.4.7/packages/terminal-extension/src/index.ts#L323\n    const terminal = await app.commands.execute('terminal:open', { name: 'genv' });\n    if (terminal) {\n        app.shell.add(terminal, 'main', { mode: 'split-bottom' });\n        terminal.content.session.send({\n            type: 'stdin',\n            content: [\n                [\n                    '# this is a terminal for configuring your genv environment.',\n                    '# it will be activated in your environment.',\n                    '# you can configure your environment and attach devices from here.',\n                    '# ',\n                    '# you can start with running the following command:',\n                    '# ',\n                    '#     genv attach --help',\n                    '# ',\n                    '# for more information check out the reference at https://github.com/run-ai/genv',\n                    '# ',\n                    '# IMPORTANT: you will need to restart your Jupyter kernel after configuring the environment from the terminal.',\n                    '',\n                    'eval \"$(genv init -)\"',\n                    `genv activate --id ${eid}`\n                ]\n                    .map(line => line + '\\n')\n                    .join('')\n            ]\n        });\n    }\n}\nasync function handleClick(kernel, app) {\n    if (kernel) {\n        const spec = await kernel.spec;\n        if (spec === null || spec === void 0 ? void 0 : spec.name.endsWith('-genv')) {\n            let eid = await Handler.find(kernel.id);\n            if (!eid) {\n                const envs = await Handler.envs();\n                eid = await Dialogs.activate(envs, kernel.id);\n                if (eid) {\n                    await Handler.activate(kernel.id, eid);\n                }\n            }\n            if (eid) {\n                if (await Dialogs.configure(eid)) {\n                    await openTerminal(eid, app);\n                }\n            }\n        }\n        else {\n            if (await Dialogs.notSupportedKernel()) {\n                await app.commands.execute('notebook:change-kernel');\n            }\n        }\n    }\n    else {\n        if (await Dialogs.noKernel()) {\n            await app.commands.execute('notebook:change-kernel');\n        }\n    }\n}\nexport class ButtonExtension {\n    constructor(app) {\n        this._app = app;\n    }\n    createNew(panel, _context) {\n        // Create the toolbar button\n        const mybutton = new ToolbarButton({\n            label: 'GPUs',\n            tooltip: 'Configure the GPU environment',\n            onClick: async () => {\n                var _a;\n                await handleClick((_a = panel.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel, this._app);\n            }\n        });\n        // Add the toolbar button to the notebook toolbar\n        panel.toolbar.insertItem(10, 'mybutton', mybutton);\n        // The ToolbarButton class implements `IDisposable`, so the\n        // button *is* the extension for the purposes of this method.\n        return mybutton;\n    }\n}\nclass DevicesWidget extends Widget {\n    async onUpdateRequest(_msg) {\n        const devices = await Handler.devices();\n        if (this.div) {\n            this.node.removeChild(this.div);\n        }\n        this.div = document.createElement('div');\n        this.node.appendChild(this.div);\n        for (const index in devices) {\n            const device = devices[index];\n            const div = document.createElement('div');\n            if (device.eid) {\n                div.innerText = `GPU ${index}: used by environment ${device.eid}`;\n            }\n            else {\n                div.innerText = `GPU ${index}: available`;\n            }\n            this.div.appendChild(div);\n        }\n    }\n}\nclass EnvsWidget extends Widget {\n    async onUpdateRequest(_msg) {\n        const envs = await Handler.envs();\n        if (this.div) {\n            this.node.removeChild(this.div);\n        }\n        this.div = document.createElement('div');\n        this.node.appendChild(this.div);\n        for (const env of envs) {\n            const div = document.createElement('div');\n            div.innerText = `${env.eid} ${env.user}`;\n            if (env.name) {\n                div.innerText += ` ${env.name}`;\n            }\n            this.div.appendChild(div);\n        }\n    }\n}\nconst plugin = {\n    id: 'jupyterlab_genv:plugin',\n    autoStart: true,\n    requires: [ICommandPalette],\n    activate: async (app, palette) => {\n        app.docRegistry.addWidgetExtension('Notebook', new ButtonExtension(app));\n        const devicesContent = new DevicesWidget();\n        const devicesWidget = new MainAreaWidget({ content: devicesContent });\n        devicesWidget.id = 'jupyterlab_genv.devices';\n        devicesWidget.title.label = 'GPUs: Devices';\n        devicesWidget.title.closable = true;\n        devicesWidget.toolbar.insertItem(0, 'refresh', new ToolbarButton({\n            icon: refreshIcon,\n            tooltip: 'Refresh',\n            onClick: () => {\n                devicesContent.update();\n            }\n        }));\n        const devicesCommand = 'jupyterlab_genv.devices.open';\n        app.commands.addCommand(devicesCommand, {\n            label: 'GPUs: Show Devices',\n            execute: () => {\n                if (!devicesWidget.isAttached) {\n                    app.shell.add(devicesWidget, 'main');\n                }\n                app.shell.activateById(devicesWidget.id);\n            }\n        });\n        palette.addItem({ command: devicesCommand, category: 'GPUs' });\n        const envsContent = new EnvsWidget();\n        const envsWidget = new MainAreaWidget({ content: envsContent });\n        envsWidget.id = 'jupyterlab_genv.envs';\n        envsWidget.title.label = 'GPUs: Environments';\n        envsWidget.title.closable = true;\n        envsWidget.toolbar.insertItem(0, 'refresh', new ToolbarButton({\n            icon: refreshIcon,\n            tooltip: 'Refresh',\n            onClick: () => {\n                envsContent.update();\n            }\n        }));\n        const envsCommand = 'jupyterlab_genv.envs.open';\n        app.commands.addCommand(envsCommand, {\n            label: 'GPUs: Show Environments',\n            execute: () => {\n                if (!envsWidget.isAttached) {\n                    app.shell.add(envsWidget, 'main');\n                }\n                app.shell.activateById(envsWidget.id);\n            }\n        });\n        palette.addItem({ command: envsCommand, category: 'GPUs' });\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}