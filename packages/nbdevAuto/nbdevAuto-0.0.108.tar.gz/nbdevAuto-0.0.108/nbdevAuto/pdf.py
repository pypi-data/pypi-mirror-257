# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_PDF_reader.ipynb.

# %% auto 0
__all__ = ['PDFreader']

# %% ../nbs/02_PDF_reader.ipynb 5
#|code-fold: true
class PDFreader:
    def __init__(self, path, size = (6, 4)):
        self.path = path
        self.images = self.display_pdf_slides(path)
        self.index = 0
        self.size = size        
        
    def __str__(self):
        return f'str: {self.path}","{self.index}"'

    def __repr__(self):
        return f'repr: {self.path}","{self.index}"'
    
    def __len__(self):
        return len(self.images)
    
    
    
    @property
    def length(self):
        return len(self.images)
    
    def __setattr__(self, attr, value):
        if len(str(value)) < 100:
            print(f"{self.__class__.__name__}.{attr} = {value}") 
        else:
            print(f"{self.__class__.__name__}.{attr} = {type(value)}")
        self.__dict__[attr] = value
        
    def display_pdf_slides(self, pdf_path):
        from pdf2image import convert_from_path
        # Convert PDF to a list of images
        return convert_from_path(pdf_path)
    
    
    def __call__(self, size = ''):
        if size != '':
            self.size = size
        self.slides(slice(self.index,self.index + 1))   
        self.index += 1
        

    def __getitem__(self, slide):
        if isinstance(slide, int):
            self.slides(slice(slide, slide + 1))   
        elif isinstance(slide, slice):
            self.slides(slide)  
            
    
    def slides(self, slide):
        import matplotlib.pyplot as plt

        for i, image in enumerate(self.images[slide]):
            plt.figure(figsize=self.size)
            plt.imshow(image)
            if slide.step == None:
                plt.title(f'Slide {slide.start + i}')
            else:
                plt.title(f'Slide {slide.start + slide.step}')
            plt.axis('off')
        plt.show()
        
    def size(self, size):
        self.size = size
