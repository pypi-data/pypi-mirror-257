# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vdb_pb2 as vdb__pb2


class VectorDBStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.insert = channel.unary_unary(
                '/shoreline.VectorDB/insert',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.append = channel.unary_unary(
                '/shoreline.VectorDB/append',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.insert_sparse = channel.unary_unary(
                '/shoreline.VectorDB/insert_sparse',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.append_sparse = channel.unary_unary(
                '/shoreline.VectorDB/append_sparse',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.query = channel.unary_unary(
                '/shoreline.VectorDB/query',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.Vectors.FromString,
                )
        self.query_sparse = channel.unary_unary(
                '/shoreline.VectorDB/query_sparse',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.Vectors.FromString,
                )
        self.index = channel.unary_unary(
                '/shoreline.VectorDB/index',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.delete_index = channel.unary_unary(
                '/shoreline.VectorDB/delete_index',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.build_index = channel.unary_unary(
                '/shoreline.VectorDB/build_index',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.get = channel.unary_unary(
                '/shoreline.VectorDB/get',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.Vectors.FromString,
                )
        self.upload_file = channel.unary_unary(
                '/shoreline.VectorDB/upload_file',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.request_stat = channel.unary_unary(
                '/shoreline.VectorDB/request_stat',
                request_serializer=vdb__pb2.RequestStat.SerializeToString,
                response_deserializer=vdb__pb2.StatReply.FromString,
                )
        self.cache = channel.unary_unary(
                '/shoreline.VectorDB/cache',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.train = channel.unary_stream(
                '/shoreline.VectorDB/train',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.StringReply.FromString,
                )
        self.predict = channel.unary_unary(
                '/shoreline.VectorDB/predict',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.Vectors.FromString,
                )
        self.request_port = channel.unary_unary(
                '/shoreline.VectorDB/request_port',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.Request.FromString,
                )
        self.save = channel.unary_unary(
                '/shoreline.VectorDB/save',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.embed = channel.unary_unary(
                '/shoreline.VectorDB/embed',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.Vectors.FromString,
                )
        self.insert_text = channel.unary_unary(
                '/shoreline.VectorDB/insert_text',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.append_text = channel.unary_unary(
                '/shoreline.VectorDB/append_text',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.query_text = channel.unary_unary(
                '/shoreline.VectorDB/query_text',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.Request.FromString,
                )
        self.chat = channel.unary_stream(
                '/shoreline.VectorDB/chat',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.StringReply.FromString,
                )
        self.check_alive = channel.unary_unary(
                '/shoreline.VectorDB/check_alive',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.restart_dead_server = channel.unary_unary(
                '/shoreline.VectorDB/restart_dead_server',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.offload_resource = channel.unary_unary(
                '/shoreline.VectorDB/offload_resource',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.offload_resource_with_ret = channel.unary_unary(
                '/shoreline.VectorDB/offload_resource_with_ret',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.OffloadReply.FromString,
                )
        self.maintain = channel.unary_unary(
                '/shoreline.VectorDB/maintain',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.predict_stream = channel.unary_stream(
                '/shoreline.VectorDB/predict_stream',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.Vectors.FromString,
                )
        self.add_server = channel.unary_unary(
                '/shoreline.VectorDB/add_server',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )
        self.remove_server = channel.unary_unary(
                '/shoreline.VectorDB/remove_server',
                request_serializer=vdb__pb2.Request.SerializeToString,
                response_deserializer=vdb__pb2.IntReply.FromString,
                )


class VectorDBServicer(object):
    """Missing associated documentation comment in .proto file."""

    def insert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def append(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_sparse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def append_sparse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_sparse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def index(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_index(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def build_index(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload_file(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def request_stat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def train(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def request_port(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def save(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def embed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_text(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def append_text(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_text(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def chat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_alive(self, request, context):
        """server only
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def restart_dead_server(self, request, context):
        """forwarder only
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def offload_resource(self, request, context):
        """balancer and forwarder and server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def offload_resource_with_ret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def maintain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def predict_stream(self, request, context):
        """balancer only for small message limit php client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_server(self, request, context):
        """balancer only
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove_server(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VectorDBServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'insert': grpc.unary_unary_rpc_method_handler(
                    servicer.insert,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'append': grpc.unary_unary_rpc_method_handler(
                    servicer.append,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'insert_sparse': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_sparse,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'append_sparse': grpc.unary_unary_rpc_method_handler(
                    servicer.append_sparse,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'query': grpc.unary_unary_rpc_method_handler(
                    servicer.query,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.Vectors.SerializeToString,
            ),
            'query_sparse': grpc.unary_unary_rpc_method_handler(
                    servicer.query_sparse,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.Vectors.SerializeToString,
            ),
            'index': grpc.unary_unary_rpc_method_handler(
                    servicer.index,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'delete_index': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_index,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'build_index': grpc.unary_unary_rpc_method_handler(
                    servicer.build_index,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.Vectors.SerializeToString,
            ),
            'upload_file': grpc.unary_unary_rpc_method_handler(
                    servicer.upload_file,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'request_stat': grpc.unary_unary_rpc_method_handler(
                    servicer.request_stat,
                    request_deserializer=vdb__pb2.RequestStat.FromString,
                    response_serializer=vdb__pb2.StatReply.SerializeToString,
            ),
            'cache': grpc.unary_unary_rpc_method_handler(
                    servicer.cache,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'train': grpc.unary_stream_rpc_method_handler(
                    servicer.train,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.StringReply.SerializeToString,
            ),
            'predict': grpc.unary_unary_rpc_method_handler(
                    servicer.predict,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.Vectors.SerializeToString,
            ),
            'request_port': grpc.unary_unary_rpc_method_handler(
                    servicer.request_port,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.Request.SerializeToString,
            ),
            'save': grpc.unary_unary_rpc_method_handler(
                    servicer.save,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'embed': grpc.unary_unary_rpc_method_handler(
                    servicer.embed,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.Vectors.SerializeToString,
            ),
            'insert_text': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_text,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'append_text': grpc.unary_unary_rpc_method_handler(
                    servicer.append_text,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'query_text': grpc.unary_unary_rpc_method_handler(
                    servicer.query_text,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.Request.SerializeToString,
            ),
            'chat': grpc.unary_stream_rpc_method_handler(
                    servicer.chat,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.StringReply.SerializeToString,
            ),
            'check_alive': grpc.unary_unary_rpc_method_handler(
                    servicer.check_alive,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'restart_dead_server': grpc.unary_unary_rpc_method_handler(
                    servicer.restart_dead_server,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'offload_resource': grpc.unary_unary_rpc_method_handler(
                    servicer.offload_resource,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'offload_resource_with_ret': grpc.unary_unary_rpc_method_handler(
                    servicer.offload_resource_with_ret,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.OffloadReply.SerializeToString,
            ),
            'maintain': grpc.unary_unary_rpc_method_handler(
                    servicer.maintain,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'predict_stream': grpc.unary_stream_rpc_method_handler(
                    servicer.predict_stream,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.Vectors.SerializeToString,
            ),
            'add_server': grpc.unary_unary_rpc_method_handler(
                    servicer.add_server,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
            'remove_server': grpc.unary_unary_rpc_method_handler(
                    servicer.remove_server,
                    request_deserializer=vdb__pb2.Request.FromString,
                    response_serializer=vdb__pb2.IntReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'shoreline.VectorDB', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VectorDB(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/insert',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def append(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/append',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_sparse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/insert_sparse',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def append_sparse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/append_sparse',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/query',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.Vectors.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_sparse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/query_sparse',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.Vectors.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def index(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/index',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_index(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/delete_index',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def build_index(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/build_index',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/get',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.Vectors.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload_file(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/upload_file',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def request_stat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/request_stat',
            vdb__pb2.RequestStat.SerializeToString,
            vdb__pb2.StatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/cache',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def train(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/shoreline.VectorDB/train',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.StringReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/predict',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.Vectors.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def request_port(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/request_port',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.Request.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def save(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/save',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def embed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/embed',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.Vectors.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_text(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/insert_text',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def append_text(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/append_text',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_text(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/query_text',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.Request.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/shoreline.VectorDB/chat',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.StringReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_alive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/check_alive',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def restart_dead_server(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/restart_dead_server',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def offload_resource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/offload_resource',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def offload_resource_with_ret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/offload_resource_with_ret',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.OffloadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def maintain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/maintain',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def predict_stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/shoreline.VectorDB/predict_stream',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.Vectors.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_server(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/add_server',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove_server(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shoreline.VectorDB/remove_server',
            vdb__pb2.Request.SerializeToString,
            vdb__pb2.IntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
