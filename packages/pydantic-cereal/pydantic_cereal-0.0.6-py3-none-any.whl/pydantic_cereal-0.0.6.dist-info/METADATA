Metadata-Version: 2.1
Name: pydantic-cereal
Version: 0.0.6
Summary: Advanced serialization for Pydantic models
License: MIT License
        
        Copyright (c) 2023 Anatoly Makarevich
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Keywords: pydantic,serialize,fsspec,yaml
Classifier: Programming Language :: Python :: 3
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Topic :: Software Development
Classifier: Typing :: Typed
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pydantic <3,>=2
Requires-Dist: fsspec
Requires-Dist: universal-pathlib
Provides-Extra: datatests
Requires-Dist: pandas ~=2.1.3 ; extra == 'datatests'
Requires-Dist: pyarrow ~=14.0.1 ; extra == 'datatests'
Requires-Dist: pyspark ~=3.5.0 ; extra == 'datatests'
Requires-Dist: polars ~=0.20.7 ; extra == 'datatests'
Provides-Extra: dev
Requires-Dist: setuptools >=61.0.0 ; extra == 'dev'
Requires-Dist: setuptools-scm[toml] >=6.2 ; extra == 'dev'
Requires-Dist: wheel >=0.41 ; extra == 'dev'
Requires-Dist: pre-commit ==3.6.0 ; extra == 'dev'
Requires-Dist: ruff ==0.2.1 ; extra == 'dev'
Requires-Dist: black ==23.12.1 ; extra == 'dev'
Requires-Dist: isort ==5.13.2 ; extra == 'dev'
Requires-Dist: mypy ==1.8.0 ; extra == 'dev'
Requires-Dist: pytest ==7.4.4 ; extra == 'dev'
Requires-Dist: pytest-lazy-fixture ==0.6.3 ; extra == 'dev'
Requires-Dist: pytest-cases ==3.8.2 ; extra == 'dev'
Requires-Dist: jupyter ; extra == 'dev'
Requires-Dist: ipykernel ; extra == 'dev'
Requires-Dist: pandas-stubs ; extra == 'dev'
Requires-Dist: polars ; extra == 'dev'
Requires-Dist: gcsfs ~=2023.12.2 ; extra == 'dev'
Provides-Extra: docs
Requires-Dist: mkdocs ==1.5.3 ; extra == 'docs'
Requires-Dist: mkdocs-material ==9.5.9 ; extra == 'docs'
Requires-Dist: mkdocstrings ==0.24.0 ; extra == 'docs'
Requires-Dist: mkdocstrings-python ==1.8.0 ; extra == 'docs'
Requires-Dist: mkdocs-jupyter ==0.24.6 ; extra == 'docs'
Requires-Dist: pygments ==2.17.2 ; extra == 'docs'

# `pydantic-cereal`

## Advanced serialization for Pydantic models

[Pydantic](https://docs.pydantic.dev/latest/) is the most widely used data validation library for Python.
It uses type hints/type annotations to define data models and has quite a nice "feel" to it.
Pydantic V2 was [released in June 2023](https://docs.pydantic.dev/2.0/blog/pydantic-v2-final/) and
brings many changes and improvements, including a
[new Rust-based engine for serializing and validating data](https://github.com/pydantic/pydantic-core).

This package, `pydantic-cereal`, is a small extension package that enables users to serialize Pydantic
models with "arbitrary" (non-JSON-fiendly) types to "arbitrary" file-system-like locations.
It uses [`fsspec`](https://filesystem-spec.readthedocs.io/en/latest/) to support generic file systems.
Writing a custom writer (serializer) and reader (loader) with `fsspec` URIs is quite straightforward.
You can also use [`universal-pathlib`](https://pypi.org/project/universal-pathlib/)'s
`UPath` with `pydantic-cereal`.

ðŸ“˜ See the [full documentation here](https://pydantic-cereal.readthedocs.io/). ðŸ“˜

## Usage Example

See the [minimal pure-Python example](./docs/examples/minimal.ipynb) to learn how to wrap your own type.
Below is a preview of this example.

```python
from fsspec import AbstractFileSystem
from pydantic import BaseModel, ConfigDict

from pydantic_cereal import Cereal

cereal = Cereal()  # This is a global variable


# Create and "register" a custom type

class MyType(object):
    """My custom type, which isn't a Pydantic model."""

    def __init__(self, value: str):
        self.value = str(value)

    def __repr__(self) -> str:
        return f"MyType({self.value})"


def my_reader(fs: AbstractFileSystem, path: str) -> MyType:
    """Read a MyType from an fsspec URI."""
    return MyType(value=fs.read_text(path))  # type: ignore


def my_writer(obj: MyType, fs: AbstractFileSystem, path: str) -> None:
    """Write a MyType object to an fsspec URI."""
    fs.write_text(path, obj.value)

MyWrappedType = cereal.wrap_type(MyType, reader=my_reader, writer=my_writer)


# Use type within Pydantic model

class MyModel(BaseModel):
    """My custom Pydantic model."""

    config = ConfigDict(arbitrary_types_allowed=True)  # Pydantic configuration
    fld: MyWrappedType


mdl = MyModel(fld=MyType("my_field"))

# We can save the whole model to an fsspec URI, such as this MemoryFileSystem
uri = "memory://my_model"
cereal.write_model(mdl, uri)

# And we can read it back later
obj = cereal.read_model(uri)
assert isinstance(obj, MyModel)
assert isinstance(obj.fld, MyType)
```

For wrapping 3rd-party libraries, see the [Pandas dataframe example](./docs/examples/pandas.ipynb).
