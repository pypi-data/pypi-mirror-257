Metadata-Version: 2.1
Name: harmonized
Version: 0.1.5
Summary: Fighting for more harmony through less coding resulting in increased development speed. At least that would be nice!
Project-URL: Homepage, https://github.com/superudo3000
Project-URL: Bug Tracker, https://github.com/superudo3000
Author-email: Super Udo <superudo3000@gmail.com>
License: Copyright (c) 2018 The Python Packaging Authority
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.7
Description-Content-Type: text/markdown

# Harmonized

When developing prototypes with Python conversion and casting can be time consuming and challeging. With harmonized we try to ease this process by providing ready to use helper scripts and tools.

## hexcolor

Working with colors in RGB space. Converting between hex strings like #FF4470, RGB normed floats [0.0 - 1.0] and HSV normed floats. Quickstart ...


Create color:

	from harmonized import hexcolor
	color = hexcolor.HexColor("#FF4470")

Get color values:

	# get RGB values
	print(color.r, color.g, color.b)

	# get HSV values
	print(color.h, color.s, color.v)

	# get HexColor string
	print(color)

Set via rgb or hsv floats:

	# set red via rgb
	color.set_from_hsv(0, 1, 1)

	# set red via rgb
	color.set_from_rgb(1, 0, 0)



## inout

Simplified handling of loading and writing files. Making reading from file or HTTP exchangable with local file reading. Local caching possible.

