{"version":3,"file":"dfd7f28c79bf562ec5ed.chunk.js","mappings":"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","sources":["webpack://superset/./src/explore/components/controls/AnnotationLayerControl/AnnotationTypes.js","webpack://superset/./src/explore/components/controls/AnnotationLayerControl/AnnotationLayer.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n\nfunction extractTypes(metadata) {\n  return Object.keys(metadata).reduce((prev, key) => {\n    const result = prev;\n    result[key] = key;\n    return result;\n  }, {});\n}\n\nexport const ANNOTATION_TYPES_METADATA = {\n  FORMULA: {\n    value: 'FORMULA',\n    label: t('Formula'),\n  },\n  EVENT: {\n    value: 'EVENT',\n    label: t('Event'),\n    supportNativeSource: true,\n  },\n  INTERVAL: {\n    value: 'INTERVAL',\n    label: t('Interval'),\n    supportNativeSource: true,\n  },\n  TIME_SERIES: {\n    value: 'TIME_SERIES',\n    label: t('Time series'),\n  },\n};\n\nexport const ANNOTATION_TYPES = extractTypes(ANNOTATION_TYPES_METADATA);\n\nexport const DEFAULT_ANNOTATION_TYPE = ANNOTATION_TYPES.FORMULA;\n\nexport const ANNOTATION_SOURCE_TYPES_METADATA = {\n  NATIVE: {\n    value: 'NATIVE',\n    label: 'Superset annotation',\n  },\n};\n\nexport const ANNOTATION_SOURCE_TYPES = extractTypes(\n  ANNOTATION_SOURCE_TYPES_METADATA,\n);\n\nexport function requiresQuery(annotationSourceType) {\n  return !!annotationSourceType;\n}\n\nconst NATIVE_COLUMN_NAMES = {\n  timeColumn: 'start_dttm',\n  intervalEndColumn: 'end_dttm',\n  titleColumn: 'short_descr',\n  descriptionColumns: ['long_descr'],\n};\n\nexport function applyNativeColumns(annotation) {\n  if (annotation.sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n    return { ...annotation, ...NATIVE_COLUMN_NAMES };\n  }\n  return annotation;\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport rison from 'rison';\nimport PropTypes from 'prop-types';\nimport { CompactPicker } from 'react-color';\nimport Button from 'src/components/Button';\nimport {\n  t,\n  SupersetClient,\n  getCategoricalSchemeRegistry,\n  getChartMetadataRegistry,\n  validateNonEmpty,\n  isValidExpression,\n  styled,\n  getColumnLabel,\n  withTheme,\n} from '@superset-ui/core';\nimport SelectControl from 'src/explore/components/controls/SelectControl';\nimport TextControl from 'src/explore/components/controls/TextControl';\nimport CheckboxControl from 'src/explore/components/controls/CheckboxControl';\nimport PopoverSection from 'src/components/PopoverSection';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { EmptyStateSmall } from 'src/components/EmptyState';\nimport { FILTER_OPTIONS_LIMIT } from 'src/explore/constants';\nimport {\n  ANNOTATION_SOURCE_TYPES,\n  ANNOTATION_TYPES,\n  ANNOTATION_TYPES_METADATA,\n  DEFAULT_ANNOTATION_TYPE,\n  requiresQuery,\n  ANNOTATION_SOURCE_TYPES_METADATA,\n} from './AnnotationTypes';\n\nconst AUTOMATIC_COLOR = '';\n\nconst propTypes = {\n  name: PropTypes.string,\n  annotationType: PropTypes.string,\n  sourceType: PropTypes.string,\n  color: PropTypes.string,\n  opacity: PropTypes.string,\n  style: PropTypes.string,\n  width: PropTypes.number,\n  showMarkers: PropTypes.bool,\n  hideLine: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  overrides: PropTypes.object,\n  show: PropTypes.bool,\n  showLabel: PropTypes.bool,\n  titleColumn: PropTypes.string,\n  descriptionColumns: PropTypes.arrayOf(PropTypes.string),\n  timeColumn: PropTypes.string,\n  intervalEndColumn: PropTypes.string,\n  vizType: PropTypes.string,\n\n  error: PropTypes.string,\n  colorScheme: PropTypes.string,\n\n  addAnnotationLayer: PropTypes.func,\n  removeAnnotationLayer: PropTypes.func,\n  close: PropTypes.func,\n};\n\nconst defaultProps = {\n  name: '',\n  annotationType: DEFAULT_ANNOTATION_TYPE,\n  sourceType: '',\n  color: AUTOMATIC_COLOR,\n  opacity: '',\n  style: 'solid',\n  width: 1,\n  showMarkers: false,\n  hideLine: false,\n  overrides: {},\n  colorScheme: 'd3Category10',\n  show: true,\n  showLabel: false,\n  titleColumn: '',\n  descriptionColumns: [],\n  timeColumn: '',\n  intervalEndColumn: '',\n\n  addAnnotationLayer: () => {},\n  removeAnnotationLayer: () => {},\n  close: () => {},\n};\n\nconst NotFoundContentWrapper = styled.div`\n  && > div:first-child {\n    padding-left: 0;\n    padding-right: 0;\n  }\n`;\n\nconst NotFoundContent = () => (\n  <NotFoundContentWrapper>\n    <EmptyStateSmall\n      title={t('No annotation layers')}\n      description={\n        <span>\n          {t('Add an annotation layer')}{' '}\n          <a\n            href=\"/annotationlayer/list\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {t('here')}\n          </a>\n          .\n        </span>\n      }\n      image=\"empty.svg\"\n    />\n  </NotFoundContentWrapper>\n);\n\nclass AnnotationLayer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const {\n      name,\n      annotationType,\n      sourceType,\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      value,\n      overrides,\n      show,\n      showLabel,\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      vizType,\n    } = props;\n\n    // Only allow override whole time_range\n    if ('since' in overrides || 'until' in overrides) {\n      overrides.time_range = null;\n      delete overrides.since;\n      delete overrides.until;\n    }\n\n    // Check if annotationType is supported by this chart\n    const metadata = getChartMetadataRegistry().get(vizType);\n    const supportedAnnotationTypes = metadata?.supportedAnnotationTypes || [];\n    const validAnnotationType = supportedAnnotationTypes.includes(\n      annotationType,\n    )\n      ? annotationType\n      : supportedAnnotationTypes[0];\n\n    this.state = {\n      // base\n      name,\n      annotationType: validAnnotationType,\n      sourceType,\n      value,\n      overrides,\n      show,\n      showLabel,\n      // slice\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      // display\n      color: color || AUTOMATIC_COLOR,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      // refData\n      isNew: !name,\n      isLoadingOptions: true,\n      valueOptions: [],\n    };\n    this.submitAnnotation = this.submitAnnotation.bind(this);\n    this.deleteAnnotation = this.deleteAnnotation.bind(this);\n    this.applyAnnotation = this.applyAnnotation.bind(this);\n    this.fetchOptions = this.fetchOptions.bind(this);\n    this.handleAnnotationType = this.handleAnnotationType.bind(this);\n    this.handleAnnotationSourceType =\n      this.handleAnnotationSourceType.bind(this);\n    this.handleValue = this.handleValue.bind(this);\n    this.isValidForm = this.isValidForm.bind(this);\n  }\n\n  componentDidMount() {\n    const { annotationType, sourceType, isLoadingOptions } = this.state;\n    this.fetchOptions(annotationType, sourceType, isLoadingOptions);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.sourceType !== this.state.sourceType) {\n      this.fetchOptions(this.state.annotationType, this.state.sourceType, true);\n    }\n  }\n\n  getSupportedSourceTypes(annotationType) {\n    // Get vis types that can be source.\n    const sources = getChartMetadataRegistry()\n      .entries()\n      .filter(({ value: chartMetadata }) =>\n        chartMetadata.canBeAnnotationType(annotationType),\n      )\n      .map(({ key, value: chartMetadata }) => ({\n        value: key,\n        label: chartMetadata.name,\n      }));\n    // Prepend native source if applicable\n    if (ANNOTATION_TYPES_METADATA[annotationType]?.supportNativeSource) {\n      sources.unshift(ANNOTATION_SOURCE_TYPES_METADATA.NATIVE);\n    }\n    return sources;\n  }\n\n  isValidFormulaAnnotation(expression, annotationType) {\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      return isValidExpression(expression);\n    }\n    return true;\n  }\n\n  isValidForm() {\n    const {\n      name,\n      annotationType,\n      sourceType,\n      value,\n      timeColumn,\n      intervalEndColumn,\n    } = this.state;\n    const errors = [\n      validateNonEmpty(name),\n      validateNonEmpty(annotationType),\n      validateNonEmpty(value),\n    ];\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE) {\n      if (annotationType === ANNOTATION_TYPES.EVENT) {\n        errors.push(validateNonEmpty(timeColumn));\n      }\n      if (annotationType === ANNOTATION_TYPES.INTERVAL) {\n        errors.push(validateNonEmpty(timeColumn));\n        errors.push(validateNonEmpty(intervalEndColumn));\n      }\n    }\n    errors.push(!this.isValidFormulaAnnotation(value, annotationType));\n    return !errors.filter(x => x).length;\n  }\n\n  handleAnnotationType(annotationType) {\n    this.setState({\n      annotationType,\n      sourceType: null,\n      value: null,\n    });\n  }\n\n  handleAnnotationSourceType(sourceType) {\n    const { sourceType: prevSourceType } = this.state;\n\n    if (prevSourceType !== sourceType) {\n      this.setState({ sourceType, value: null, isLoadingOptions: true });\n    }\n  }\n\n  handleValue(value) {\n    this.setState({\n      value,\n      descriptionColumns: [],\n      intervalEndColumn: null,\n      timeColumn: null,\n      titleColumn: null,\n      overrides: { time_range: null },\n    });\n  }\n\n  fetchOptions(annotationType, sourceType, isLoadingOptions) {\n    if (isLoadingOptions) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        const queryParams = rison.encode({\n          page: 0,\n          page_size: FILTER_OPTIONS_LIMIT,\n        });\n        SupersetClient.get({\n          endpoint: `/api/v1/annotation_layer/?q=${queryParams}`,\n        }).then(({ json }) => {\n          const layers = json\n            ? json.result.map(layer => ({\n                value: layer.id,\n                label: layer.name,\n              }))\n            : [];\n          this.setState({\n            isLoadingOptions: false,\n            valueOptions: layers,\n          });\n        });\n      } else if (requiresQuery(sourceType)) {\n        const queryParams = rison.encode({\n          filters: [\n            {\n              col: 'id',\n              opr: 'chart_owned_created_favored_by_me',\n              value: true,\n            },\n          ],\n          order_column: 'slice_name',\n          order_direction: 'asc',\n          page: 0,\n          page_size: FILTER_OPTIONS_LIMIT,\n        });\n        SupersetClient.get({\n          endpoint: `/api/v1/chart/?q=${queryParams}`,\n        }).then(({ json }) => {\n          const registry = getChartMetadataRegistry();\n          this.setState({\n            isLoadingOptions: false,\n            valueOptions: json.result\n              .filter(x => {\n                const metadata = registry.get(x.viz_type);\n                return metadata && metadata.canBeAnnotationType(annotationType);\n              })\n              .map(x => ({\n                value: x.id,\n                label: x.slice_name,\n                slice: {\n                  ...x,\n                  data: {\n                    ...x.form_data,\n                    groupby: x.form_data.groupby?.map(column =>\n                      getColumnLabel(column),\n                    ),\n                  },\n                },\n              })),\n          });\n        });\n      } else {\n        this.setState({\n          isLoadingOptions: false,\n          valueOptions: [],\n        });\n      }\n    }\n  }\n\n  deleteAnnotation() {\n    this.props.removeAnnotationLayer();\n    this.props.close();\n  }\n\n  applyAnnotation() {\n    if (this.isValidForm()) {\n      const annotationFields = [\n        'name',\n        'annotationType',\n        'sourceType',\n        'color',\n        'opacity',\n        'style',\n        'width',\n        'showMarkers',\n        'hideLine',\n        'value',\n        'overrides',\n        'show',\n        'showLabel',\n        'titleColumn',\n        'descriptionColumns',\n        'timeColumn',\n        'intervalEndColumn',\n      ];\n      const newAnnotation = {};\n      annotationFields.forEach(field => {\n        if (this.state[field] !== null) {\n          newAnnotation[field] = this.state[field];\n        }\n      });\n\n      if (newAnnotation.color === AUTOMATIC_COLOR) {\n        newAnnotation.color = null;\n      }\n\n      this.props.addAnnotationLayer(newAnnotation);\n      this.setState({ isNew: false });\n    }\n  }\n\n  submitAnnotation() {\n    this.applyAnnotation();\n    this.props.close();\n  }\n\n  renderOption(option) {\n    return (\n      <span\n        css={{\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n          whiteSpace: 'nowrap',\n        }}\n        title={option.label}\n      >\n        {option.label}\n      </span>\n    );\n  }\n\n  renderValueConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      valueOptions,\n      isLoadingOptions,\n    } = this.state;\n    let label = '';\n    let description = '';\n    if (requiresQuery(sourceType)) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        label = t('Annotation layer');\n        description = t('Select the Annotation Layer you would like to use.');\n      } else {\n        label = t('Chart');\n        description = t(\n          `Use another existing chart as a source for annotations and overlays.\n          Your chart must be one of these visualization types: [%s]`,\n          this.getSupportedSourceTypes(annotationType)\n            .map(x => x.label)\n            .join(', '),\n        );\n      }\n    } else if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      label = t('Formula');\n      description = t(`Expects a formula with depending time parameter 'x'\n        in milliseconds since epoch. mathjs is used to evaluate the formulas.\n        Example: '2x+5'`);\n    }\n    if (requiresQuery(sourceType)) {\n      return (\n        <SelectControl\n          ariaLabel={t('Annotation layer value')}\n          name=\"annotation-layer-value\"\n          showHeader\n          hovered\n          description={description}\n          label={label}\n          placeholder=\"\"\n          options={valueOptions}\n          isLoading={isLoadingOptions}\n          value={value}\n          onChange={this.handleValue}\n          validationErrors={!value ? ['Mandatory'] : []}\n          optionRenderer={this.renderOption}\n          notFoundContent={<NotFoundContent />}\n        />\n      );\n    }\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      return (\n        <TextControl\n          name=\"annotation-layer-value\"\n          hovered\n          showHeader\n          description={description}\n          label={label}\n          placeholder=\"\"\n          value={value}\n          onChange={this.handleValue}\n          validationErrors={\n            !this.isValidFormulaAnnotation(value, annotationType)\n              ? [t('Bad formula.')]\n              : []\n          }\n        />\n      );\n    }\n    return '';\n  }\n\n  renderSliceConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      valueOptions,\n      overrides,\n      titleColumn,\n      timeColumn,\n      intervalEndColumn,\n      descriptionColumns,\n    } = this.state;\n    const { slice } = valueOptions.find(x => x.value === value) || {};\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE && slice) {\n      const columns = (slice.data.groupby || [])\n        .concat(slice.data.all_columns || [])\n        .map(x => ({ value: x, label: x }));\n      const timeColumnOptions = slice.data.include_time\n        ? [{ value: '__timestamp', label: '__timestamp' }].concat(columns)\n        : columns;\n      return (\n        <div style={{ marginRight: '2rem' }}>\n          <PopoverSection\n            isSelected\n            title={t('Annotation Slice Configuration')}\n            info={t(`This section allows you to configure how to use the slice\n              to generate annotations.`)}\n          >\n            {(annotationType === ANNOTATION_TYPES.EVENT ||\n              annotationType === ANNOTATION_TYPES.INTERVAL) && (\n              <SelectControl\n                ariaLabel={t('Annotation layer time column')}\n                hovered\n                name=\"annotation-layer-time-column\"\n                label={\n                  annotationType === ANNOTATION_TYPES.INTERVAL\n                    ? t('Interval start column')\n                    : t('Event time column')\n                }\n                description={t(\n                  'This column must contain date/time information.',\n                )}\n                validationErrors={!timeColumn ? ['Mandatory'] : []}\n                clearable={false}\n                options={timeColumnOptions}\n                value={timeColumn}\n                onChange={v => this.setState({ timeColumn: v })}\n              />\n            )}\n            {annotationType === ANNOTATION_TYPES.INTERVAL && (\n              <SelectControl\n                ariaLabel={t('Annotation layer interval end')}\n                hovered\n                name=\"annotation-layer-intervalEnd\"\n                label={t('Interval End column')}\n                description={t(\n                  'This column must contain date/time information.',\n                )}\n                validationErrors={!intervalEndColumn ? ['Mandatory'] : []}\n                options={columns}\n                value={intervalEndColumn}\n                onChange={value => this.setState({ intervalEndColumn: value })}\n              />\n            )}\n            <SelectControl\n              ariaLabel={t('Annotation layer title column')}\n              hovered\n              name=\"annotation-layer-title\"\n              label={t('Title Column')}\n              description={t('Pick a title for you annotation.')}\n              options={[{ value: '', label: t('None') }].concat(columns)}\n              value={titleColumn}\n              onChange={value => this.setState({ titleColumn: value })}\n            />\n            {annotationType !== ANNOTATION_TYPES.TIME_SERIES && (\n              <SelectControl\n                ariaLabel={t('Annotation layer description columns')}\n                hovered\n                name=\"annotation-layer-title\"\n                label={t('Description Columns')}\n                description={t(\n                  \"Pick one or more columns that should be shown in the annotation. If you don't select a column all of them will be shown.\",\n                )}\n                multi\n                options={columns}\n                value={descriptionColumns}\n                onChange={value => this.setState({ descriptionColumns: value })}\n              />\n            )}\n            <div style={{ marginTop: '1rem' }}>\n              <CheckboxControl\n                hovered\n                name=\"annotation-override-time_range\"\n                label={t('Override time range')}\n                description={t(`This controls whether the \"time_range\" field from the current\n                  view should be passed down to the chart containing the annotation data.`)}\n                value={'time_range' in overrides}\n                onChange={v => {\n                  delete overrides.time_range;\n                  if (v) {\n                    this.setState({\n                      overrides: { ...overrides, time_range: null },\n                    });\n                  } else {\n                    this.setState({ overrides: { ...overrides } });\n                  }\n                }}\n              />\n              <CheckboxControl\n                hovered\n                name=\"annotation-override-timegrain\"\n                label={t('Override time grain')}\n                description={t(`This controls whether the time grain field from the current\n                  view should be passed down to the chart containing the annotation data.`)}\n                value={'time_grain_sqla' in overrides}\n                onChange={v => {\n                  delete overrides.time_grain_sqla;\n                  delete overrides.granularity;\n                  if (v) {\n                    this.setState({\n                      overrides: {\n                        ...overrides,\n                        time_grain_sqla: null,\n                        granularity: null,\n                      },\n                    });\n                  } else {\n                    this.setState({ overrides: { ...overrides } });\n                  }\n                }}\n              />\n              <TextControl\n                hovered\n                name=\"annotation-layer-timeshift\"\n                label={t('Time Shift')}\n                description={t(`Time delta in natural language\n                  (example:  24 hours, 7 days, 56 weeks, 365 days)`)}\n                placeholder=\"\"\n                value={overrides.time_shift}\n                onChange={v =>\n                  this.setState({ overrides: { ...overrides, time_shift: v } })\n                }\n              />\n            </div>\n          </PopoverSection>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  renderDisplayConfiguration() {\n    const {\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      annotationType,\n    } = this.state;\n    const colorScheme = getCategoricalSchemeRegistry()\n      .get(this.props.colorScheme)\n      .colors.concat();\n    if (\n      color &&\n      color !== AUTOMATIC_COLOR &&\n      !colorScheme.find(x => x.toLowerCase() === color.toLowerCase())\n    ) {\n      colorScheme.push(color);\n    }\n    return (\n      <PopoverSection\n        isSelected\n        title={t('Display configuration')}\n        info={t('Configure your how you overlay is displayed here.')}\n      >\n        <SelectControl\n          ariaLabel={t('Annotation layer stroke')}\n          name=\"annotation-layer-stroke\"\n          label={t('Style')}\n          // see '../../../visualizations/nvd3_vis.css'\n          options={[\n            { value: 'solid', label: t('Solid') },\n            { value: 'dashed', label: t('Dashed') },\n            { value: 'longDashed', label: t('Long dashed') },\n            { value: 'dotted', label: t('Dotted') },\n          ]}\n          value={style}\n          clearable={false}\n          onChange={v => this.setState({ style: v })}\n        />\n        <SelectControl\n          ariaLabel={t('Annotation layer opacity')}\n          name=\"annotation-layer-opacity\"\n          label={t('Opacity')}\n          // see '../../../visualizations/nvd3_vis.css'\n          options={[\n            { value: '', label: t('Solid') },\n            { value: 'opacityLow', label: '0.2' },\n            { value: 'opacityMedium', label: '0.5' },\n            { value: 'opacityHigh', label: '0.8' },\n          ]}\n          value={opacity}\n          onChange={value => this.setState({ opacity: value })}\n        />\n        <div>\n          <ControlHeader label={t('Color')} />\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <CompactPicker\n              color={color}\n              colors={colorScheme}\n              onChangeComplete={v => this.setState({ color: v.hex })}\n            />\n            <Button\n              style={{ marginTop: '0.5rem', marginBottom: '0.5rem' }}\n              buttonStyle={color === AUTOMATIC_COLOR ? 'success' : 'default'}\n              buttonSize=\"xsmall\"\n              onClick={() => this.setState({ color: AUTOMATIC_COLOR })}\n            >\n              {t('Automatic Color')}\n            </Button>\n          </div>\n        </div>\n        <TextControl\n          name=\"annotation-layer-stroke-width\"\n          label={t('Line width')}\n          isInt\n          value={width}\n          onChange={v => this.setState({ width: v })}\n        />\n        {annotationType === ANNOTATION_TYPES.TIME_SERIES && (\n          <CheckboxControl\n            hovered\n            name=\"annotation-layer-show-markers\"\n            label={t('Show Markers')}\n            description={t('Shows or hides markers for the time series')}\n            value={showMarkers}\n            onChange={v => this.setState({ showMarkers: v })}\n          />\n        )}\n        {annotationType === ANNOTATION_TYPES.TIME_SERIES && (\n          <CheckboxControl\n            hovered\n            name=\"annotation-layer-hide-line\"\n            label={t('Hide Line')}\n            description={t('Hides the Line for the time series')}\n            value={hideLine}\n            onChange={v => this.setState({ hideLine: v })}\n          />\n        )}\n      </PopoverSection>\n    );\n  }\n\n  render() {\n    const { isNew, name, annotationType, sourceType, show, showLabel } =\n      this.state;\n    const isValid = this.isValidForm();\n    const metadata = getChartMetadataRegistry().get(this.props.vizType);\n    const supportedAnnotationTypes = metadata\n      ? metadata.supportedAnnotationTypes.map(\n          type => ANNOTATION_TYPES_METADATA[type],\n        )\n      : [];\n    const supportedSourceTypes = this.getSupportedSourceTypes(annotationType);\n\n    return (\n      <>\n        {this.props.error && (\n          <span style={{ color: this.props.theme.colors.error.base }}>\n            ERROR: {this.props.error}\n          </span>\n        )}\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n          <div style={{ marginRight: '2rem' }}>\n            <PopoverSection\n              isSelected\n              title={t('Layer configuration')}\n              info={t('Configure the basics of your Annotation Layer.')}\n            >\n              <TextControl\n                name=\"annotation-layer-name\"\n                label={t('Name')}\n                placeholder=\"\"\n                value={name}\n                onChange={v => this.setState({ name: v })}\n                validationErrors={!name ? [t('Mandatory')] : []}\n              />\n              <CheckboxControl\n                name=\"annotation-layer-hide\"\n                label={t('Hide layer')}\n                value={!show}\n                onChange={v => this.setState({ show: !v })}\n              />\n              <CheckboxControl\n                name=\"annotation-label-show\"\n                label={t('Show label')}\n                value={showLabel}\n                hovered\n                description={t('Whether to always show the annotation label')}\n                onChange={v => this.setState({ showLabel: v })}\n              />\n              <SelectControl\n                ariaLabel={t('Annotation layer type')}\n                hovered\n                description={t('Choose the annotation layer type')}\n                label={t('Annotation layer type')}\n                name=\"annotation-layer-type\"\n                clearable={false}\n                options={supportedAnnotationTypes}\n                value={annotationType}\n                onChange={this.handleAnnotationType}\n              />\n              {supportedSourceTypes.length > 0 && (\n                <SelectControl\n                  ariaLabel={t('Annotation source type')}\n                  hovered\n                  description={t('Choose the source of your annotations')}\n                  label={t('Annotation source')}\n                  name=\"annotation-source-type\"\n                  options={supportedSourceTypes}\n                  notFoundContent={<NotFoundContent />}\n                  value={sourceType}\n                  onChange={this.handleAnnotationSourceType}\n                  validationErrors={!sourceType ? [t('Mandatory')] : []}\n                />\n              )}\n              {this.renderValueConfiguration()}\n            </PopoverSection>\n          </div>\n          {this.renderSliceConfiguration()}\n          {this.renderDisplayConfiguration()}\n        </div>\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          {isNew ? (\n            <Button buttonSize=\"small\" onClick={() => this.props.close()}>\n              {t('Cancel')}\n            </Button>\n          ) : (\n            <Button buttonSize=\"small\" onClick={this.deleteAnnotation}>\n              {t('Remove')}\n            </Button>\n          )}\n          <div>\n            <Button\n              buttonSize=\"small\"\n              disabled={!isValid}\n              onClick={this.applyAnnotation}\n            >\n              {t('Apply')}\n            </Button>\n\n            <Button\n              buttonSize=\"small\"\n              buttonStyle=\"primary\"\n              disabled={!isValid}\n              onClick={this.submitAnnotation}\n            >\n              {t('OK')}\n            </Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nAnnotationLayer.propTypes = propTypes;\nAnnotationLayer.defaultProps = defaultProps;\n\nexport default withTheme(AnnotationLayer);\n"],"names":["extractTypes","metadata","Object","keys","reduce","prev","key","result","ANNOTATION_TYPES_METADATA","FORMULA","value","label","t","EVENT","supportNativeSource","INTERVAL","TIME_SERIES","ANNOTATION_TYPES","DEFAULT_ANNOTATION_TYPE","ANNOTATION_SOURCE_TYPES_METADATA","NATIVE","ANNOTATION_SOURCE_TYPES","requiresQuery","annotationSourceType","AUTOMATIC_COLOR","propTypes","name","PropTypes","annotationType","sourceType","color","opacity","style","width","showMarkers","hideLine","overrides","show","showLabel","titleColumn","descriptionColumns","timeColumn","intervalEndColumn","vizType","error","colorScheme","addAnnotationLayer","removeAnnotationLayer","close","defaultProps","NotFoundContentWrapper","styled","div","NotFoundContent","___EmotionJSX","EmptyStateSmall","title","description","href","target","rel","image","_ref","styles","AnnotationLayer","React","constructor","props","super","time_range","since","until","getChartMetadataRegistry","get","supportedAnnotationTypes","validAnnotationType","includes","this","state","isNew","isLoadingOptions","valueOptions","submitAnnotation","bind","deleteAnnotation","applyAnnotation","fetchOptions","handleAnnotationType","handleAnnotationSourceType","handleValue","isValidForm","componentDidMount","componentDidUpdate","prevProps","prevState","getSupportedSourceTypes","_ANNOTATION_TYPES_MET","sources","entries","filter","chartMetadata","canBeAnnotationType","map","unshift","isValidFormulaAnnotation","expression","isValidExpression","errors","validateNonEmpty","push","x","length","setState","prevSourceType","queryParams","rison","page","page_size","FILTER_OPTIONS_LIMIT","SupersetClient","endpoint","then","json","layers","layer","id","filters","col","opr","order_column","order_direction","registry","viz_type","_x$form_data$groupby","slice_name","slice","data","form_data","groupby","column","getColumnLabel","newAnnotation","forEach","field","renderOption","option","css","renderValueConfiguration","join","SelectControl","ariaLabel","showHeader","hovered","placeholder","options","isLoading","onChange","validationErrors","optionRenderer","notFoundContent","TextControl","renderSliceConfiguration","find","columns","concat","all_columns","timeColumnOptions","include_time","marginRight","PopoverSection","isSelected","info","clearable","v","multi","marginTop","CheckboxControl","time_grain_sqla","granularity","time_shift","renderDisplayConfiguration","getCategoricalSchemeRegistry","colors","toLowerCase","ControlHeader","display","flexDirection","CompactPicker","onChangeComplete","hex","Button","marginBottom","buttonStyle","buttonSize","onClick","isInt","render","isValid","type","supportedSourceTypes","theme","base","justifyContent","disabled","withTheme"],"sourceRoot":""}