{"version":3,"file":"4a99bd1bd80e62b7f380.chunk.js","mappings":"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","sources":["webpack://superset/./node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/heatmap-layer-utils.js","webpack://superset/./node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/triangle-layer.js","webpack://superset/./node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/triangle-layer-vertex.glsl.js","webpack://superset/./node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/triangle-layer-fragment.glsl.js","webpack://superset/./node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/weights-vs.glsl.js","webpack://superset/./node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/heatmap-layer.js","webpack://superset/./node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/weights-fs.glsl.js","webpack://superset/./node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/max-vs.glsl.js","webpack://superset/./node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/max-fs.glsl.js"],"sourcesContent":["import { isWebGL2 } from '@luma.gl/core';\nexport function getBounds(points) {\n  const x = points.map(p => p[0]);\n  const y = points.map(p => p[1]);\n  const xMin = Math.min.apply(null, x);\n  const xMax = Math.max.apply(null, x);\n  const yMin = Math.min.apply(null, y);\n  const yMax = Math.max.apply(null, y);\n  return [xMin, yMin, xMax, yMax];\n}\nexport function boundsContain(currentBounds, targetBounds) {\n  if (targetBounds[0] >= currentBounds[0] && targetBounds[2] <= currentBounds[2] && targetBounds[1] >= currentBounds[1] && targetBounds[3] <= currentBounds[3]) {\n    return true;\n  }\n\n  return false;\n}\nconst scratchArray = new Float32Array(12);\nexport function packVertices(points, dimensions = 2) {\n  let index = 0;\n\n  for (const point of points) {\n    for (let i = 0; i < dimensions; i++) {\n      scratchArray[index++] = point[i] || 0;\n    }\n  }\n\n  return scratchArray;\n}\nexport function scaleToAspectRatio(boundingBox, width, height) {\n  const [xMin, yMin, xMax, yMax] = boundingBox;\n  const currentWidth = xMax - xMin;\n  const currentHeight = yMax - yMin;\n  let newWidth = currentWidth;\n  let newHeight = currentHeight;\n\n  if (currentWidth / currentHeight < width / height) {\n    newWidth = width / height * currentHeight;\n  } else {\n    newHeight = height / width * currentWidth;\n  }\n\n  if (newWidth < width) {\n    newWidth = width;\n    newHeight = height;\n  }\n\n  const xCenter = (xMax + xMin) / 2;\n  const yCenter = (yMax + yMin) / 2;\n  return [xCenter - newWidth / 2, yCenter - newHeight / 2, xCenter + newWidth / 2, yCenter + newHeight / 2];\n}\nexport function getTextureCoordinates(point, bounds) {\n  const [xMin, yMin, xMax, yMax] = bounds;\n  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];\n}\nexport function getTextureParams({\n  gl,\n  floatTargetSupport\n}) {\n  return {\n    format: isWebGL2(gl) ? 34836 : 6408,\n    type: floatTargetSupport ? 5126 : 5121\n  };\n}\n//# sourceMappingURL=heatmap-layer-utils.js.map","import { Model, Geometry } from '@luma.gl/core';\nimport { Layer, project32 } from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\nexport default class TriangleLayer extends Layer {\n  getShaders() {\n    return {\n      vs,\n      fs,\n      modules: [project32]\n    };\n  }\n\n  initializeState() {\n    const {\n      gl\n    } = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        noAlloc: true\n      },\n      texCoords: {\n        size: 2,\n        noAlloc: true\n      }\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl) {\n    const {\n      vertexCount\n    } = this.props;\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 6,\n        vertexCount\n      })\n    });\n  }\n\n  draw({\n    uniforms\n  }) {\n    const {\n      model\n    } = this.state;\n    const {\n      texture,\n      maxTexture,\n      colorTexture,\n      intensity,\n      threshold,\n      aggregationMode,\n      colorDomain\n    } = this.props;\n    model.setUniforms({ ...uniforms,\n      texture,\n      maxTexture,\n      colorTexture,\n      intensity,\n      threshold,\n      aggregationMode,\n      colorDomain\n    }).draw();\n  }\n\n}\nTriangleLayer.layerName = 'TriangleLayer';\n//# sourceMappingURL=triangle-layer.js.map","export default \"#define SHADER_NAME heatp-map-layer-vertex-shader\\n\\nuniform sampler2D maxTexture;\\nuniform float intensity;\\nuniform vec2 colorDomain;\\nuniform float threshold;\\nuniform float aggregationMode;\\n\\nattribute vec3 positions;\\nattribute vec2 texCoords;\\n\\nvarying vec2 vTexCoords;\\nvarying float vIntensityMin;\\nvarying float vIntensityMax;\\n\\nvoid main(void) {\\n  gl_Position = project_position_to_clipspace(positions, vec3(0.0), vec3(0.0));\\n  vTexCoords = texCoords;\\n  vec4 maxTexture = texture2D(maxTexture, vec2(0.5));\\n  float maxValue = aggregationMode < 0.5 ? maxTexture.r : maxTexture.g;\\n  float minValue = maxValue * threshold;\\n  if (colorDomain[1] > 0.) {\\n    maxValue = colorDomain[1];\\n    minValue = colorDomain[0];\\n  }\\n  vIntensityMax = intensity / maxValue;\\n  vIntensityMin = intensity / minValue;\\n}\\n\";\n//# sourceMappingURL=triangle-layer-vertex.glsl.js.map","export default \"#define SHADER_NAME triangle-layer-fragment-shader\\n\\nprecision highp float;\\n\\nuniform float opacity;\\nuniform sampler2D texture;\\nuniform sampler2D colorTexture;\\nuniform float aggregationMode;\\n\\nvarying vec2 vTexCoords;\\nvarying float vIntensityMin;\\nvarying float vIntensityMax;\\n\\nvec4 getLinearColor(float value) {\\n  float factor = clamp(value * vIntensityMax, 0., 1.);\\n  vec4 color = texture2D(colorTexture, vec2(factor, 0.5));\\n  color.a *= min(value * vIntensityMin, 1.0);\\n  return color;\\n}\\n\\nvoid main(void) {\\n  vec4 weights = texture2D(texture, vTexCoords);\\n  float weight = weights.r;\\n\\n  if (aggregationMode > 0.5) {\\n    weight /= max(1.0, weights.a);\\n  }\\n  if (weight <= 0.) {\\n     discard;\\n  }\\n\\n  vec4 linearColor = getLinearColor(weight);\\n  linearColor.a *= opacity;\\n  gl_FragColor =linearColor;\\n}\\n\";\n//# sourceMappingURL=triangle-layer-fragment.glsl.js.map","export default \"attribute vec3 positions;\\nattribute vec3 positions64Low;\\nattribute float weights;\\nvarying vec4 weightsTexture;\\nuniform float radiusPixels;\\nuniform float textureWidth;\\nuniform vec4 commonBounds;\\nuniform float weightsScale;\\nvoid main()\\n{\\n  weightsTexture = vec4(weights * weightsScale, 0., 0., 1.);\\n\\n  float radiusTexels  = project_pixel_size(radiusPixels) * textureWidth / (commonBounds.z - commonBounds.x);\\n  gl_PointSize = radiusTexels * 2.;\\n\\n  vec3 commonPosition = project_position(positions, positions64Low);\\n  gl_Position.xy = (commonPosition.xy - commonBounds.xy) / (commonBounds.zw - commonBounds.xy) ;\\n  gl_Position.xy = (gl_Position.xy * 2.) - (1.);\\n}\\n\";\n//# sourceMappingURL=weights-vs.glsl.js.map","import { getBounds, boundsContain, packVertices, scaleToAspectRatio, getTextureCoordinates, getTextureParams } from './heatmap-layer-utils';\nimport { Buffer, Texture2D, Transform, getParameters, FEATURES, hasFeatures } from '@luma.gl/core';\nimport { AttributeManager, COORDINATE_SYSTEM, log, _mergeShaders as mergeShaders } from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\nimport fs_max from './max-fs.glsl';\nconst RESOLUTION = 2;\nconst SIZE_2K = 2048;\nconst ZOOM_DEBOUNCE = 500;\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [10240]: 9729,\n    [10241]: 9729,\n    [10242]: 33071,\n    [10243]: 33071\n  },\n  dataFormat: 6408\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\nconst defaultProps = {\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  intensity: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusPixels: {\n    type: 'number',\n    min: 1,\n    max: 100,\n    value: 50\n  },\n  colorRange: defaultColorRange,\n  threshold: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 0.05\n  },\n  colorDomain: {\n    type: 'array',\n    value: null,\n    optional: true\n  },\n  aggregation: 'SUM'\n};\nconst REQUIRED_FEATURES = [FEATURES.BLEND_EQUATION_MINMAX, FEATURES.TEXTURE_FLOAT];\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\nexport default class HeatmapLayer extends AggregationLayer {\n  initializeState() {\n    const {\n      gl\n    } = this.context;\n\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({\n        supported: false\n      });\n      log.error(\"HeatmapLayer: \".concat(this.id, \" is not supported on this browser\"))();\n      return;\n    }\n\n    super.initializeState(DIMENSIONS);\n    this.setState({\n      supported: true,\n      colorDomain: DEFAULT_COLOR_DOMAIN\n    });\n\n    this._setupTextureParams();\n\n    this._setupAttributes();\n\n    this._setupResources();\n  }\n\n  shouldUpdateState({\n    changeFlags\n  }) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n\n    super.updateState(opts);\n    const {\n      props,\n      oldProps\n    } = opts;\n\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.viewportChanged) {\n      changeFlags.boundsChanged = this._updateBounds();\n\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      clearTimeout(this.state.updateTimer);\n      this.setState({\n        isWeightMapDirty: true\n      });\n    } else if (changeFlags.viewportZoomChanged) {\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({\n      zoom: opts.context.viewport.zoom\n    });\n  }\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {\n      updateTriggers,\n      intensity,\n      threshold,\n      aggregation\n    } = this.props;\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n    return new TriangleLayerClass(this.getSubLayerProps({\n      id: 'triangle-layer',\n      updateTriggers\n    }), {\n      coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n      data: {\n        attributes: {\n          positions: triPositionBuffer,\n          texCoords: triTexCoordBuffer\n        }\n      },\n      vertexCount: 4,\n      maxTexture: maxWeightsTexture,\n      colorTexture,\n      aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n      texture: weightsTexture,\n      intensity,\n      threshold,\n      colorDomain\n    });\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    weightsTransform === null || weightsTransform === void 0 ? void 0 : weightsTransform.delete();\n    weightsTexture === null || weightsTexture === void 0 ? void 0 : weightsTexture.delete();\n    maxWeightTransform === null || maxWeightTransform === void 0 ? void 0 : maxWeightTransform.delete();\n    maxWeightsTexture === null || maxWeightsTexture === void 0 ? void 0 : maxWeightsTexture.delete();\n    triPositionBuffer === null || triPositionBuffer === void 0 ? void 0 : triPositionBuffer.delete();\n    triTexCoordBuffer === null || triTexCoordBuffer === void 0 ? void 0 : triTexCoordBuffer.delete();\n    colorTexture === null || colorTexture === void 0 ? void 0 : colorTexture.delete();\n    updateTimer && clearTimeout(updateTimer);\n  }\n\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const changeFlags = {};\n    const {\n      dimensions\n    } = this.state;\n    changeFlags.dataChanged = this.isAttributeChanged() || this.isAggregationDirty(opts, {\n      compareAll: true,\n      dimension: dimensions.data\n    });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n    const {\n      zoom\n    } = this.state;\n\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {\n      gl\n    } = this.context;\n    const {\n      textureSize,\n      format,\n      type\n    } = this.state;\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      })\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        type: 5130,\n        accessor: 'getPosition'\n      },\n      weights: {\n        size: 1,\n        accessor: 'getWeight'\n      }\n    });\n    this.setState({\n      positionAttributeName: 'positions'\n    });\n  }\n\n  _setupTextureParams() {\n    const {\n      gl\n    } = this.context;\n    const textureSize = Math.min(SIZE_2K, getParameters(gl, 3379));\n    const floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n    const {\n      format,\n      type\n    } = getTextureParams({\n      gl,\n      floatTargetSupport\n    });\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({\n      textureSize,\n      format,\n      type,\n      weightsScale\n    });\n\n    if (!floatTargetSupport) {\n      log.warn(\"HeatmapLayer: \".concat(this.id, \" rendering to float texture not supported, fallingback to low precession format\"))();\n    }\n  }\n\n  _createWeightsTransform(shaderOptions = {}) {\n    var _weightsTransform;\n\n    const {\n      gl\n    } = this.context;\n    let {\n      weightsTransform\n    } = this.state;\n    const {\n      weightsTexture\n    } = this.state;\n    (_weightsTransform = weightsTransform) === null || _weightsTransform === void 0 ? void 0 : _weightsTransform.delete();\n    const shaders = mergeShaders({\n      vs: weights_vs,\n      _fs: weights_fs\n    }, shaderOptions);\n    weightsTransform = new Transform(gl, {\n      id: \"\".concat(this.id, \"-weights-transform\"),\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({\n      weightsTransform\n    });\n  }\n\n  _setupResources() {\n    const {\n      gl\n    } = this.context;\n\n    this._createTextures();\n\n    const {\n      textureSize,\n      weightsTexture,\n      maxWeightsTexture\n    } = this.state;\n\n    this._createWeightsTransform();\n\n    const maxWeightTransform = new Transform(gl, {\n      id: \"\".concat(this.id, \"-max-weights-transform\"),\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      vs: vs_max,\n      _fs: fs_max,\n      elementCount: textureSize * textureSize\n    });\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {\n          size: 3\n        }\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {\n          size: 2\n        }\n      })\n    });\n  }\n\n  updateShaders(shaderOptions) {\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {\n      maxWeightTransform\n    } = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [1, 1],\n        blendEquation: 32776\n      }\n    });\n  }\n\n  _updateBounds(forceUpdate = false) {\n    const {\n      viewport\n    } = this.context;\n    const viewportCorners = [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([viewport.width, viewport.height]), viewport.unproject([0, viewport.height])].map(p => p.map(Math.fround));\n    const visibleWorldBounds = getBounds(viewportCorners);\n    const newState = {\n      visibleWorldBounds,\n      viewportCorners\n    };\n    let boundsChanged = false;\n\n    if (forceUpdate || !this.state.worldBounds || !boundsContain(this.state.worldBounds, visibleWorldBounds)) {\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n      boundsChanged = true;\n    }\n\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n    const {\n      viewport\n    } = this.context;\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n    const textureBounds = viewportCorners.map(p => getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds));\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {\n      colorRange\n    } = opts.props;\n    let {\n      colorTexture\n    } = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n\n    this.setState({\n      colorTexture\n    });\n  }\n\n  _updateWeightmap() {\n    const {\n      radiusPixels,\n      colorDomain,\n      aggregation\n    } = this.props;\n    const {\n      weightsTransform,\n      worldBounds,\n      textureSize,\n      weightsTexture,\n      weightsScale\n    } = this.state;\n    this.state.isWeightMapDirty = false;\n\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    if (colorDomain && aggregation === 'SUM') {\n      const {\n        viewport\n      } = this.context;\n      const metersPerPixel = viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0]) / textureSize;\n      this.state.colorDomain = colorDomain.map(x => x * metersPerPixel * weightsScale);\n    } else {\n      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n    }\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    weightsTransform.run({\n      uniforms,\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [1, 1],\n        blendEquation: 32774\n      },\n      clearRenderTarget: true,\n      attributes: this.getAttributes(),\n      moduleSettings: this.getModuleSettings()\n    });\n\n    this._updateMaxWeightValue();\n\n    weightsTexture.setParameters({\n      [10240]: 9729,\n      [10241]: 9729\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {\n      updateTimer\n    } = this.state;\n\n    if (fromTimer) {\n      updateTimer = null;\n\n      this._updateBounds(true);\n\n      this._updateTextureRenderingBounds();\n\n      this.setState({\n        isWeightMapDirty: true\n      });\n    } else {\n      this.setState({\n        isWeightMapDirty: false\n      });\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), ZOOM_DEBOUNCE);\n    }\n\n    this.setState({\n      updateTimer\n    });\n  }\n\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {\n      useLayerCoordinateSystem = false\n    } = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {\n      viewport\n    } = this.context;\n    const {\n      textureSize\n    } = this.state;\n    const {\n      coordinateSystem\n    } = this.props;\n    const offsetMode = useLayerCoordinateSystem && (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode ? viewport.projectPosition(this.props.coordinateOrigin) : [0, 0];\n    const size = textureSize * RESOLUTION / viewport.scale;\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n\n    return scaleToAspectRatio([bottomLeftCommon[0] - offsetOriginCommon[0], bottomLeftCommon[1] - offsetOriginCommon[1], topRightCommon[0] - offsetOriginCommon[0], topRightCommon[1] - offsetOriginCommon[1]], size, size);\n  }\n\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {\n      viewport\n    } = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n\n}\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\n//# sourceMappingURL=heatmap-layer.js.map","export default \"varying vec4 weightsTexture;\\nfloat gaussianKDE(float u){\\n  return pow(2.71828, -u*u/0.05555)/(1.77245385*0.166666);\\n}\\nvoid main()\\n{\\n  float dist = length(gl_PointCoord - vec2(0.5, 0.5));\\n  if (dist > 0.5) {\\n    discard;\\n  }\\n  gl_FragColor = weightsTexture * gaussianKDE(2. * dist);\\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\\n}\\n\";\n//# sourceMappingURL=weights-fs.glsl.js.map","export default \"attribute vec4 inTexture;\\nvarying vec4 outTexture;\\n\\nvoid main()\\n{\\noutTexture = inTexture;\\ngl_Position = vec4(0, 0, 0, 1.);\\ngl_PointSize = 1.0;\\n}\\n\";\n//# sourceMappingURL=max-vs.glsl.js.map","export default \"varying vec4 outTexture;\\nvoid main() {\\n  gl_FragColor = outTexture;\\n  gl_FragColor.g = outTexture.r / max(1.0, outTexture.a);\\n}\\n\";\n//# sourceMappingURL=max-fs.glsl.js.map"],"names":["scratchArray","Float32Array","packVertices","points","dimensions","index","point","i","TriangleLayer","getShaders","vs","fs","modules","project32","initializeState","gl","this","context","getAttributeManager","add","positions","size","noAlloc","texCoords","setState","model","_getModel","vertexCount","props","id","geometry","drawMode","draw","uniforms","state","texture","maxTexture","colorTexture","intensity","threshold","aggregationMode","colorDomain","setUniforms","layerName","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","AGGREGATION_MODE","SUM","MEAN","defaultProps","getPosition","type","value","x","position","getWeight","min","radiusPixels","max","colorRange","optional","aggregation","REQUIRED_FEATURES","DIMENSIONS","data","HeatmapLayer","supported","log","concat","super","_setupTextureParams","_setupAttributes","_setupResources","shouldUpdateState","changeFlags","somethingChanged","updateState","opts","oldProps","_getChangeFlags","viewportChanged","boundsChanged","_updateBounds","_updateTextureRenderingBounds","dataChanged","clearTimeout","updateTimer","isWeightMapDirty","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateWeightmap","zoom","viewport","renderLayers","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","updateTriggers","getSubLayerClass","getSubLayerProps","coordinateSystem","attributes","finalizeState","weightsTransform","maxWeightTransform","delete","_getAttributeManager","stats","isAttributeChanged","isAggregationDirty","compareAll","dimension","_createTextures","textureSize","format","width","height","accessor","weights","positionAttributeName","Math","floatTargetSupport","getTextureParams","weightsScale","_createWeightsTransform","shaderOptions","_weightsTransform","shaders","_fs","elementCount","_targetTexture","_targetTextureVarying","_sourceTextures","inTexture","byteLength","updateShaders","_updateMaxWeightValue","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","map","p","fround","visibleWorldBounds","y","xMin","apply","xMax","getBounds","newState","worldBounds","currentBounds","targetBounds","scaledCommonBounds","_worldToCommonBounds","_commonToWorldBounds","normalizedCommonBounds","subData","textureBounds","bounds","yMin","yMax","getTextureCoordinates","projectPosition","colors","Uint8Array","setImageData","length","commonBounds","useLayerCoordinateSystem","metersPerPixel","distanceScales","metersPerUnit","textureWidth","update","getNumInstances","clearRenderTarget","getAttributes","moduleSettings","getModuleSettings","setParameters","fromTimer","setTimeout","bind","minLong","minLat","maxLong","maxLat","offsetMode","offsetOriginCommon","coordinateOrigin","scale","bottomLeftCommon","topRightCommon","boundingBox","currentWidth","currentHeight","newWidth","newHeight","xCenter","yCenter","scaleToAspectRatio","bottomLeftWorld","unprojectPosition","topRightWorld","slice"],"sourceRoot":""}