[tool.poetry]
name = "vermils"
version = "0.3.5"
description = ""
authors = ["VermiIIi0n <dungeon.behind0t@icloud.com>"]
readme = "README.md"
packages = [{ include = "vermils" }]
license = "MIT"
homepage = "https://github.com/VermiIIi0n/VermilsMagicPocket"

keywords = ["utilities"]

classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Topic :: Utilities",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.10"
nest-asyncio = "^1.5.6"
rich = "^13.0.0"
httpx = {extras = ["http2", "socks"], version = "^0.23.1", optional = true}

[tool.poetry.extras]
http = ["httpx", "h2", "socksio"]
all = ["httpx", "h2", "socksio"]

[tool.poetry.group.dev.dependencies]
coverage = { extras = ["toml"], version = "^6.5.0" }
pytest = "^7.2.0"
pytest-asyncio = "^0.20.2"
pytest-cov = "^4.0.0"
coveralls = "^3.3.1"
sphinx-autoapi = "^2.1.0"
sphinx-autodoc-typehints = "^1.22"
mypy = "^1.1.1"
toml = "^0.10.2"
types-toml = "^0.10.8.6"
autopep8 = "^2.0.2"


[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError.*",
    "return NotImplemented",
    "warnings\\.warn.*",
    "def main()",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "except ImportError",
    "@overload",
    "@abstractmethod",
]
include = ["vermils/*"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "--verbose --cov-append --cov-report term --cov vermils"

[tool.mypy]
enable_error_code = [
    "type-var",
    "call-overload",
    "abstract",
    "override",
    "unused-awaitable",
    "unused-coroutine",
    "var-annotated",
    "index",
    "assignment",
    "var-annotated",
    "misc",
    "redundant-cast",
    "comparison-overlap",
    "redundant-expr",
    "truthy-bool",
]
disable_error_code = [
    "type-arg",
    "no-untyped-def",
    "no-untyped-call",
    "no-redef",
]
plugins = "pydantic.mypy"
ignore_missing_imports = true
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = true
show_column_numbers = true
show_error_context = true
check_untyped_defs = true
warn_unreachable = false
show_error_codes = true
warn_return_any = false
warn_no_return = true
show_traceback = false
color_output = true
pretty = true

[tool.pydantic-mypy]
#init_forbid_extra = true
#init_typed = true
#warn_required_dynamic_aliases = true
warn_untyped_fields = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.sphinx-autodoc]
# Display the docstring of modules, classes, and functions
# even if they don't have a docstring
# Possible values: True, False (default: False)
# Set to True to display the docstring even if it is empty
# or if the module/class/function doesn't have a docstring.
member-order = "bysource"
show-inheritance = true
undoc-members = true

[tool.poetry.urls]
"Issues" = "https://github.com/VermiIIi0n/VermilsMagicPocket/issues"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
