from types import NotImplementedType as NotImplementedType

class Node:
    def __init__(self, node_id: str, node_weight: float) -> None: ...
    @property
    def id(self) -> str: ...
    @property
    def weight(self) -> float: ...
    @weight.setter
    def weight(self, new_weight: float) -> None: ...
    def __eq__(self, other: object) -> NotImplementedType | bool: ...
    def __lt__(self, other: object) -> NotImplementedType | bool: ...
    def __le__(self, other: object) -> NotImplementedType | bool: ...
    def __ge__(self, other: object) -> NotImplementedType | bool: ...
    def __gt__(self, other: object) -> NotImplementedType | bool: ...
