# coding: utf-8

"""
    OSCR API

    OSCR API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr

class LadderEntry(BaseModel):
    """
    LadderEntry
    """
    id: Optional[StrictInt] = None
    var_date: Optional[StrictStr] = Field(None, alias="date")
    player: constr(strict=True, min_length=1) = Field(...)
    data: Dict[str, Any] = Field(...)
    combatlog: StrictInt = Field(...)
    ladder: StrictInt = Field(...)
    __properties = ["id", "date", "player", "data", "combatlog", "ladder"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LadderEntry:
        """Create an instance of LadderEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "var_date",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LadderEntry:
        """Create an instance of LadderEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LadderEntry.parse_obj(obj)

        _obj = LadderEntry.parse_obj({
            "id": obj.get("id"),
            "var_date": obj.get("date"),
            "player": obj.get("player"),
            "data": obj.get("data"),
            "combatlog": obj.get("combatlog"),
            "ladder": obj.get("ladder")
        })
        return _obj


