# generated by datamodel-codegen:
#   filename:  data_science_commit.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, Extra, Field, conint


class ColumnDataType(Enum):
    integer = 'integer'
    float = 'float'
    string = 'string'


class ColumnTuple(BaseModel):
    columns: Sequence[conint(ge=0)]


class EnclaveSpecification(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class MaskType(Enum):
    genericString = 'genericString'
    genericNumber = 'genericNumber'
    name = 'name'
    address = 'address'
    postcode = 'postcode'
    phoneNumber = 'phoneNumber'
    socialSecurityNumber = 'socialSecurityNumber'
    email = 'email'
    date = 'date'
    timestamp = 'timestamp'
    iban = 'iban'


class MatchingComputationNode(BaseModel):
    config: str
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    output: str
    specificationId: str
    staticContentSpecificationId: str


class NumRowsValidationRule(BaseModel):
    atLeast: Optional[Optional[conint(ge=0)]] = None
    atMost: Optional[Optional[conint(ge=0)]] = None


class NumericRangeRule(BaseModel):
    greaterThan: Optional[Optional[float]] = None
    greaterThanEquals: Optional[Optional[float]] = None
    lessThan: Optional[Optional[float]] = None
    lessThanEquals: Optional[Optional[float]] = None


class PostComputationNode(BaseModel):
    dependency: str
    specificationId: str
    useMockBackend: bool


class PreviewComputationNode(BaseModel):
    dependency: str
    quotaBytes: conint(ge=0)


class RawLeafNode(BaseModel):
    pass


class S3Provider(Enum):
    Aws = 'Aws'
    Gcs = 'Gcs'


class S3SinkComputationNode(BaseModel):
    credentialsDependencyId: str
    endpoint: str
    region: Optional[str] = ''
    s3Provider: Optional[S3Provider] = 'Aws'
    specificationId: str
    uploadDependencyId: str


class Script(BaseModel):
    content: str
    name: str


class ScriptingLanguage(Enum):
    python = 'python'
    r = 'r'


class SqlNodePrivacyFilter(BaseModel):
    minimumRowsCount: int


class TableMapping(BaseModel):
    nodeId: str
    tableName: str


class UniquenessValidationRule(BaseModel):
    uniqueKeys: Sequence[ColumnTuple]


class ColumnDataFormat(BaseModel):
    dataType: ColumnDataType
    isNullable: bool


class ColumnValidationV0(BaseModel):
    allowNull: bool
    formatType: FormatType
    hashWith: Optional[Optional[HashingAlgorithm]] = None
    inRange: Optional[Optional[NumericRangeRule]] = None
    name: Optional[Optional[str]] = None


class ComputationNodeKindItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    s3Sink: S3SinkComputationNode


class ComputationNodeKindItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    match: MatchingComputationNode


class ComputationNodeKindV2Item4(ComputationNodeKindItem3):
    pass


class ComputationNodeKindV2Item5(ComputationNodeKindItem4):
    pass


class ComputationNodeKindV2Item6(BaseModel):
    class Config:
        extra = Extra.forbid

    post: PostComputationNode


class ComputationNodeKindV6Item4(ComputationNodeKindItem3):
    pass


class ComputationNodeKindV6Item5(ComputationNodeKindItem4):
    pass


class ComputationNodeKindV6Item6(ComputationNodeKindV2Item6):
    pass


class ComputationNodeKindV6Item7(BaseModel):
    class Config:
        extra = Extra.forbid

    preview: PreviewComputationNode


class LeafNodeKindItem(BaseModel):
    class Config:
        extra = Extra.forbid

    raw: RawLeafNode


class LeafNodeKindV2Item(LeafNodeKindItem):
    pass


class ScriptingComputationNode(BaseModel):
    additionalScripts: Sequence[Script]
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    extraChunkCacheSizeToAvailableMemoryRatio: Optional[Optional[float]] = None
    mainScript: Script
    minimumContainerMemorySize: Optional[Optional[conint(ge=0)]] = None
    output: str
    scriptingLanguage: ScriptingLanguage
    scriptingSpecificationId: str
    staticContentSpecificationId: str


class SqlComputationNode(BaseModel):
    dependencies: Sequence[TableMapping]
    privacyFilter: Optional[Optional[SqlNodePrivacyFilter]] = None
    specificationId: str
    statement: str


class SqliteComputationNode(BaseModel):
    dependencies: Sequence[TableMapping]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    sqliteSpecificationId: str
    statement: str
    staticContentSpecificationId: str


class SyntheticNodeColumn(BaseModel):
    dataFormat: ColumnDataFormat
    index: int
    maskType: MaskType
    name: Optional[Optional[str]] = None
    shouldMaskColumn: bool


class TableLeafNodeColumn(BaseModel):
    dataFormat: ColumnDataFormat
    name: str


class TableLeafNodeColumnV2(BaseModel):
    dataFormat: ColumnDataFormat
    name: str
    validation: ColumnValidationV0


class TableValidationV0(BaseModel):
    allowEmpty: Optional[Optional[bool]] = None
    numRows: Optional[Optional[NumRowsValidationRule]] = None
    uniqueness: Optional[Optional[UniquenessValidationRule]] = None


class ValidationNodeV2(BaseModel):
    pythonSpecificationId: str
    staticContentSpecificationId: str
    validation: TableValidationV0


class ComputationNodeKindItem(BaseModel):
    class Config:
        extra = Extra.forbid

    sql: SqlComputationNode


class ComputationNodeKindItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    scripting: ScriptingComputationNode


class ComputationNodeKindV2Item(ComputationNodeKindItem):
    pass


class ComputationNodeKindV2Item1(BaseModel):
    class Config:
        extra = Extra.forbid

    sqlite: SqliteComputationNode


class ComputationNodeKindV2Item2(ComputationNodeKindItem1):
    pass


class ComputationNodeKindV6Item(ComputationNodeKindItem):
    pass


class ComputationNodeKindV6Item1(ComputationNodeKindV2Item1):
    pass


class ComputationNodeKindV6Item2(ComputationNodeKindItem1):
    pass


class SyntheticDataComputationNode(BaseModel):
    columns: Sequence[SyntheticNodeColumn]
    dependency: str
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    epsilon: float
    outputOriginalDataStatistics: bool
    staticContentSpecificationId: str
    synthSpecificationId: str


class TableLeafNode(BaseModel):
    columns: Sequence[TableLeafNodeColumn]
    sqlSpecificationId: str


class TableLeafNodeV2(BaseModel):
    columns: Sequence[TableLeafNodeColumnV2]
    validationNode: ValidationNodeV2


class ComputationNodeKindItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    syntheticData: SyntheticDataComputationNode


class ComputationNodeKind(BaseModel):
    __root__: Union[
        ComputationNodeKindItem,
        ComputationNodeKindItem1,
        ComputationNodeKindItem2,
        ComputationNodeKindItem3,
        ComputationNodeKindItem4,
    ]


class ComputationNodeKindV2Item3(ComputationNodeKindItem2):
    pass


class ComputationNodeKindV2(BaseModel):
    __root__: Union[
        ComputationNodeKindV2Item,
        ComputationNodeKindV2Item1,
        ComputationNodeKindV2Item2,
        ComputationNodeKindV2Item3,
        ComputationNodeKindV2Item4,
        ComputationNodeKindV2Item5,
        ComputationNodeKindV2Item6,
    ]


class ComputationNodeKindV6Item3(ComputationNodeKindItem2):
    pass


class ComputationNodeKindV6(BaseModel):
    __root__: Union[
        ComputationNodeKindV6Item,
        ComputationNodeKindV6Item1,
        ComputationNodeKindV6Item2,
        ComputationNodeKindV6Item3,
        ComputationNodeKindV6Item4,
        ComputationNodeKindV6Item5,
        ComputationNodeKindV6Item6,
        ComputationNodeKindV6Item7,
    ]


class ComputationNodeV2(BaseModel):
    kind: ComputationNodeKindV2


class ComputationNodeV6(BaseModel):
    kind: ComputationNodeKindV6


class LeafNodeKindItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    table: TableLeafNode


class LeafNodeKind(BaseModel):
    __root__: Union[LeafNodeKindItem, LeafNodeKindItem1]


class LeafNodeKindV2Item1(BaseModel):
    class Config:
        extra = Extra.forbid

    table: TableLeafNodeV2


class LeafNodeKindV2(BaseModel):
    __root__: Union[LeafNodeKindV2Item, LeafNodeKindV2Item1]


class LeafNodeV2(BaseModel):
    isRequired: bool
    kind: LeafNodeKindV2


class NodeKindV2Item(BaseModel):
    class Config:
        extra = Extra.forbid

    leaf: LeafNodeV2


class NodeKindV2Item1(BaseModel):
    class Config:
        extra = Extra.forbid

    computation: ComputationNodeV2


class NodeKindV2(BaseModel):
    __root__: Union[NodeKindV2Item, NodeKindV2Item1]


class NodeKindV6Item(NodeKindV2Item):
    pass


class NodeKindV6Item1(BaseModel):
    class Config:
        extra = Extra.forbid

    computation: ComputationNodeV6


class NodeKindV6(BaseModel):
    __root__: Union[NodeKindV6Item, NodeKindV6Item1]


class NodeV2(BaseModel):
    id: str
    kind: NodeKindV2
    name: str


class NodeV6(BaseModel):
    id: str
    kind: NodeKindV6
    name: str


class AddComputationCommitV2(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV2


class AddComputationCommitV6(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV6


class ComputationNode(BaseModel):
    kind: ComputationNodeKind


class DataScienceCommitKindV2Item(BaseModel):
    class Config:
        extra = Extra.forbid

    addComputation: AddComputationCommitV2


class DataScienceCommitKindV2(BaseModel):
    __root__: DataScienceCommitKindV2Item


class DataScienceCommitKindV6Item(BaseModel):
    class Config:
        extra = Extra.forbid

    addComputation: AddComputationCommitV6


class DataScienceCommitKindV6(BaseModel):
    __root__: DataScienceCommitKindV6Item


class DataScienceCommitV2(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV2
    name: str


class DataScienceCommitV3(DataScienceCommitV2):
    pass


class DataScienceCommitV4(DataScienceCommitV2):
    pass


class DataScienceCommitV5(DataScienceCommitV2):
    pass


class DataScienceCommitV6(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV6
    name: str


class LeafNode(BaseModel):
    isRequired: bool
    kind: LeafNodeKind


class NodeKindItem(BaseModel):
    class Config:
        extra = Extra.forbid

    leaf: LeafNode


class NodeKindItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    computation: ComputationNode


class NodeKind(BaseModel):
    __root__: Union[NodeKindItem, NodeKindItem1]


class DataScienceCommitItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    v2: DataScienceCommitV2


class DataScienceCommitItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    v3: DataScienceCommitV3


class DataScienceCommitItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    v4: DataScienceCommitV4


class DataScienceCommitItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    v5: DataScienceCommitV5


class DataScienceCommitItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    v6: DataScienceCommitV6


class Node(BaseModel):
    id: str
    kind: NodeKind
    name: str


class AddComputationCommit(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: Node


class DataScienceCommitKindItem(BaseModel):
    class Config:
        extra = Extra.forbid

    addComputation: AddComputationCommit


class DataScienceCommitKind(BaseModel):
    __root__: DataScienceCommitKindItem


class DataScienceCommitV0(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKind
    name: str


class DataScienceCommitV1(DataScienceCommitV0):
    pass


class DataScienceCommitItem(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: DataScienceCommitV0


class DataScienceCommitItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    v1: DataScienceCommitV1


class DataScienceCommit(BaseModel):
    __root__: Union[
        DataScienceCommitItem,
        DataScienceCommitItem1,
        DataScienceCommitItem2,
        DataScienceCommitItem3,
        DataScienceCommitItem4,
        DataScienceCommitItem5,
        DataScienceCommitItem6,
    ] = Field(..., title='DataScienceCommit')
