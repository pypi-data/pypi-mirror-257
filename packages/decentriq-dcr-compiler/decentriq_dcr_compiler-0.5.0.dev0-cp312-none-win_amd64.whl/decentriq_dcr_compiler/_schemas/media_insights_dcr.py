# generated by datamodel-codegen:
#   filename:  media_insights_dcr.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, Extra, Field, conint


class EnclaveSpecificationV05(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType5(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm5(Enum):
    SHA256_HEX = 'SHA256_HEX'


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class Type18(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValueItem18(BaseModel):
    type: Type18


class Type19(Enum):
    DATASET = 'DATASET'


class RequirementFlagValueItem19(BaseModel):
    type: Type19


class Type20(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValueItem20(BaseModel):
    type: Type20
    value: str


class RequirementFlagValue(BaseModel):
    __root__: Union[
        RequirementFlagValueItem18,
        RequirementFlagValueItem19,
        RequirementFlagValueItem20,
    ]


class KnownOrUnknownRequirementFlagValue6(BaseModel):
    __root__: Optional[RequirementFlagValue]


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(BaseModel):
    details: KnownOrUnknownRequirementFlagValue6
    name: str


class RequirementOpItem11(BaseModel):
    class Config:
        extra = Extra.forbid

    contains: RequirementFlag


class MediaInsightsComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV05
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm5]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType5
    modelEvaluation: Optional[Optional[ModelEvaluationConfig]] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV05
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class MediaInsightsComputeItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: MediaInsightsComputeV0


class MediaInsightsCompute2(BaseModel):
    __root__: MediaInsightsComputeItem2


class MediaInsightsComputeOrUnknown2(BaseModel):
    __root__: Optional[MediaInsightsCompute2]


class MediaInsightsDcrItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: MediaInsightsDcrInner


class MediaInsightsDcr(BaseModel):
    __root__: MediaInsightsDcrItem2 = Field(..., title='MediaInsightsDcr')


class ConsumerRequirements2(BaseModel):
    optional: Sequence[RequirementFlag]
    required: Optional[Optional[RequirementOp]] = None


class MediaInsightsDcrInner(BaseModel):
    compute: MediaInsightsComputeOrUnknown2
    consumes: ConsumerRequirements2
    features: Sequence[str]


class RequirementOpItem8(BaseModel):
    class Config:
        extra = Extra.forbid

    or_: Sequence[RequirementOp] = Field(..., alias='or')


class RequirementOpItem9(BaseModel):
    class Config:
        extra = Extra.forbid

    and_: Sequence[RequirementOp] = Field(..., alias='and')


class RequirementOpItem10(BaseModel):
    class Config:
        extra = Extra.forbid

    exclusiveOr: Sequence[RequirementOp]


class RequirementOp(BaseModel):
    __root__: Union[
        RequirementOpItem8, RequirementOpItem9, RequirementOpItem10, RequirementOpItem11
    ]


MediaInsightsDcrItem2.update_forward_refs()
ConsumerRequirements2.update_forward_refs()
RequirementOpItem8.update_forward_refs()
RequirementOpItem9.update_forward_refs()
RequirementOpItem10.update_forward_refs()
