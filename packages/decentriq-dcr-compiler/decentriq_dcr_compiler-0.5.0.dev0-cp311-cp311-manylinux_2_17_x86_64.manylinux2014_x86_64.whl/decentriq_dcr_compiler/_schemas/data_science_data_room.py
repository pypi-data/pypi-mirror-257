# generated by datamodel-codegen:
#   filename:  data_science_data_room.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, Extra, Field, conint


class AnalystPermission(BaseModel):
    nodeId: str


class ColumnDataType(Enum):
    integer = 'integer'
    float = 'float'
    string = 'string'


class ColumnTuple1(BaseModel):
    columns: Sequence[conint(ge=0)]


class DataOwnerPermission(AnalystPermission):
    pass


class EnclaveSpecification(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class ManagerPermission(BaseModel):
    pass


class MaskType1(Enum):
    genericString = 'genericString'
    genericNumber = 'genericNumber'
    name = 'name'
    address = 'address'
    postcode = 'postcode'
    phoneNumber = 'phoneNumber'
    socialSecurityNumber = 'socialSecurityNumber'
    email = 'email'
    date = 'date'
    timestamp = 'timestamp'
    iban = 'iban'


class MatchingComputationNode(BaseModel):
    config: str
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    output: str
    specificationId: str
    staticContentSpecificationId: str


class NumRowsValidationRule1(BaseModel):
    atLeast: Optional[Optional[conint(ge=0)]] = None
    atMost: Optional[Optional[conint(ge=0)]] = None


class NumericRangeRule(BaseModel):
    greaterThan: Optional[Optional[float]] = None
    greaterThanEquals: Optional[Optional[float]] = None
    lessThan: Optional[Optional[float]] = None
    lessThanEquals: Optional[Optional[float]] = None


class ParticipantPermissionItem(BaseModel):
    class Config:
        extra = Extra.forbid

    dataOwner: DataOwnerPermission


class ParticipantPermissionItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    analyst: AnalystPermission


class ParticipantPermissionItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    manager: ManagerPermission


class ParticipantPermission(BaseModel):
    __root__: Union[
        ParticipantPermissionItem,
        ParticipantPermissionItem1,
        ParticipantPermissionItem2,
    ]


class PostComputationNode(BaseModel):
    dependency: str
    specificationId: str
    useMockBackend: bool


class PreviewComputationNode(BaseModel):
    dependency: str
    quotaBytes: conint(ge=0)


class RawLeafNode(ManagerPermission):
    pass


class S3Provider2(Enum):
    Aws = 'Aws'
    Gcs = 'Gcs'


class S3SinkComputationNode(BaseModel):
    credentialsDependencyId: str
    endpoint: str
    region: Optional[str] = ''
    s3Provider: Optional[S3Provider2] = 'Aws'
    specificationId: str
    uploadDependencyId: str


class Script1(BaseModel):
    content: str
    name: str


class ScriptingLanguage(Enum):
    python = 'python'
    r = 'r'


class SqlNodePrivacyFilter(BaseModel):
    minimumRowsCount: int


class TableMapping(BaseModel):
    nodeId: str
    tableName: str


class UniquenessValidationRule(BaseModel):
    uniqueKeys: Sequence[ColumnTuple1]


class ColumnDataFormat1(BaseModel):
    dataType: ColumnDataType
    isNullable: bool


class ColumnValidationV01(BaseModel):
    allowNull: bool
    formatType: FormatType
    hashWith: Optional[Optional[HashingAlgorithm]] = None
    inRange: Optional[Optional[NumericRangeRule]] = None
    name: Optional[Optional[str]] = None


class ComputationNodeKindItem8(BaseModel):
    class Config:
        extra = Extra.forbid

    s3Sink: S3SinkComputationNode


class ComputationNodeKindItem9(BaseModel):
    class Config:
        extra = Extra.forbid

    match: MatchingComputationNode


class ComputationNodeKindV2Item11(ComputationNodeKindItem8):
    pass


class ComputationNodeKindV2Item12(ComputationNodeKindItem9):
    pass


class ComputationNodeKindV2Item13(BaseModel):
    class Config:
        extra = Extra.forbid

    post: PostComputationNode


class ComputationNodeKindV6Item12(ComputationNodeKindItem8):
    pass


class ComputationNodeKindV6Item13(ComputationNodeKindItem9):
    pass


class ComputationNodeKindV6Item14(ComputationNodeKindV2Item13):
    pass


class ComputationNodeKindV6Item15(BaseModel):
    class Config:
        extra = Extra.forbid

    preview: PreviewComputationNode


class LeafNodeKindItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    raw: RawLeafNode


class LeafNodeKindV2Item2(LeafNodeKindItem2):
    pass


class Participant(BaseModel):
    permissions: Sequence[ParticipantPermission]
    user: str


class ScriptingComputationNode(BaseModel):
    additionalScripts: Sequence[Script1]
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    extraChunkCacheSizeToAvailableMemoryRatio: Optional[Optional[float]] = None
    mainScript: Script1
    minimumContainerMemorySize: Optional[Optional[conint(ge=0)]] = None
    output: str
    scriptingLanguage: ScriptingLanguage
    scriptingSpecificationId: str
    staticContentSpecificationId: str


class SqlComputationNode(BaseModel):
    dependencies: Sequence[TableMapping]
    privacyFilter: Optional[Optional[SqlNodePrivacyFilter]] = None
    specificationId: str
    statement: str


class SqliteComputationNode(BaseModel):
    dependencies: Sequence[TableMapping]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    sqliteSpecificationId: str
    statement: str
    staticContentSpecificationId: str


class SyntheticNodeColumn(BaseModel):
    dataFormat: ColumnDataFormat1
    index: int
    maskType: MaskType1
    name: Optional[Optional[str]] = None
    shouldMaskColumn: bool


class TableLeafNodeColumn(BaseModel):
    dataFormat: ColumnDataFormat1
    name: str


class TableLeafNodeColumnV21(BaseModel):
    dataFormat: ColumnDataFormat1
    name: str
    validation: ColumnValidationV01


class TableValidationV01(BaseModel):
    allowEmpty: Optional[Optional[bool]] = None
    numRows: Optional[Optional[NumRowsValidationRule1]] = None
    uniqueness: Optional[Optional[UniquenessValidationRule]] = None


class ValidationNodeV2(BaseModel):
    pythonSpecificationId: str
    staticContentSpecificationId: str
    validation: TableValidationV01


class ComputationNodeKindItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    sql: SqlComputationNode


class ComputationNodeKindItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    scripting: ScriptingComputationNode


class ComputationNodeKindV2Item7(ComputationNodeKindItem5):
    pass


class ComputationNodeKindV2Item8(BaseModel):
    class Config:
        extra = Extra.forbid

    sqlite: SqliteComputationNode


class ComputationNodeKindV2Item9(ComputationNodeKindItem6):
    pass


class ComputationNodeKindV6Item8(ComputationNodeKindItem5):
    pass


class ComputationNodeKindV6Item9(ComputationNodeKindV2Item8):
    pass


class ComputationNodeKindV6Item10(ComputationNodeKindItem6):
    pass


class SyntheticDataComputationNode(BaseModel):
    columns: Sequence[SyntheticNodeColumn]
    dependency: str
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    epsilon: float
    outputOriginalDataStatistics: bool
    staticContentSpecificationId: str
    synthSpecificationId: str


class TableLeafNode(BaseModel):
    columns: Sequence[TableLeafNodeColumn]
    sqlSpecificationId: str


class TableLeafNodeV2(BaseModel):
    columns: Sequence[TableLeafNodeColumnV21]
    validationNode: ValidationNodeV2


class ComputationNodeKindItem7(BaseModel):
    class Config:
        extra = Extra.forbid

    syntheticData: SyntheticDataComputationNode


class ComputationNodeKind(BaseModel):
    __root__: Union[
        ComputationNodeKindItem5,
        ComputationNodeKindItem6,
        ComputationNodeKindItem7,
        ComputationNodeKindItem8,
        ComputationNodeKindItem9,
    ]


class ComputationNodeKindV2Item10(ComputationNodeKindItem7):
    pass


class ComputationNodeKindV21(BaseModel):
    __root__: Union[
        ComputationNodeKindV2Item7,
        ComputationNodeKindV2Item8,
        ComputationNodeKindV2Item9,
        ComputationNodeKindV2Item10,
        ComputationNodeKindV2Item11,
        ComputationNodeKindV2Item12,
        ComputationNodeKindV2Item13,
    ]


class ComputationNodeKindV6Item11(ComputationNodeKindItem7):
    pass


class ComputationNodeKindV61(BaseModel):
    __root__: Union[
        ComputationNodeKindV6Item8,
        ComputationNodeKindV6Item9,
        ComputationNodeKindV6Item10,
        ComputationNodeKindV6Item11,
        ComputationNodeKindV6Item12,
        ComputationNodeKindV6Item13,
        ComputationNodeKindV6Item14,
        ComputationNodeKindV6Item15,
    ]


class ComputationNodeV21(BaseModel):
    kind: ComputationNodeKindV21


class ComputationNodeV61(BaseModel):
    kind: ComputationNodeKindV61


class LeafNodeKindItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    table: TableLeafNode


class LeafNodeKind(BaseModel):
    __root__: Union[LeafNodeKindItem2, LeafNodeKindItem3]


class LeafNodeKindV2Item3(BaseModel):
    class Config:
        extra = Extra.forbid

    table: TableLeafNodeV2


class LeafNodeKindV21(BaseModel):
    __root__: Union[LeafNodeKindV2Item2, LeafNodeKindV2Item3]


class LeafNodeV21(BaseModel):
    isRequired: bool
    kind: LeafNodeKindV21


class NodeKindV2Item2(BaseModel):
    class Config:
        extra = Extra.forbid

    leaf: LeafNodeV21


class NodeKindV2Item3(BaseModel):
    class Config:
        extra = Extra.forbid

    computation: ComputationNodeV21


class NodeKindV21(BaseModel):
    __root__: Union[NodeKindV2Item2, NodeKindV2Item3]


class NodeKindV6Item2(NodeKindV2Item2):
    pass


class NodeKindV6Item3(BaseModel):
    class Config:
        extra = Extra.forbid

    computation: ComputationNodeV61


class NodeKindV61(BaseModel):
    __root__: Union[NodeKindV6Item2, NodeKindV6Item3]


class NodeV2(BaseModel):
    id: str
    kind: NodeKindV21
    name: str


class NodeV6(BaseModel):
    id: str
    kind: NodeKindV61
    name: str


class AddComputationCommitV21(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV2


class AddComputationCommitV61(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV6


class ComputationNode1(BaseModel):
    kind: ComputationNodeKind


class DataScienceCommitKindV2Item1(BaseModel):
    class Config:
        extra = Extra.forbid

    addComputation: AddComputationCommitV21


class DataScienceCommitKindV21(BaseModel):
    __root__: DataScienceCommitKindV2Item1


class DataScienceCommitKindV6Item1(BaseModel):
    class Config:
        extra = Extra.forbid

    addComputation: AddComputationCommitV61


class DataScienceCommitKindV61(BaseModel):
    __root__: DataScienceCommitKindV6Item1


class DataScienceCommitV21(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV21
    name: str


class DataScienceCommitV31(DataScienceCommitV21):
    pass


class DataScienceCommitV41(DataScienceCommitV21):
    pass


class DataScienceCommitV51(DataScienceCommitV21):
    pass


class DataScienceCommitV61(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV61
    name: str


class DataScienceDataRoomConfigurationV2(BaseModel):
    dcrSecretIdBase64: Optional[Optional[str]] = None
    description: str
    enableDevelopment: bool
    enablePostWorker: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV2]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV3(BaseModel):
    dcrSecretIdBase64: Optional[Optional[str]] = None
    description: str
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV2]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV4(DataScienceDataRoomConfigurationV3):
    pass


class DataScienceDataRoomConfigurationV5(BaseModel):
    dcrSecretIdBase64: Optional[Optional[str]] = None
    description: str
    enableAllowEmptyFilesInValidation: bool
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV2]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomConfigurationV6(BaseModel):
    dcrSecretIdBase64: Optional[Optional[str]] = None
    description: str
    enableAirlock: bool
    enableAllowEmptyFilesInValidation: bool
    enableDevelopment: bool
    enablePostWorker: bool
    enableSafePythonWorkerStacktrace: bool
    enableServersideWasmValidation: bool
    enableSqliteWorker: bool
    enableTestDatasets: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[NodeV6]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomV2Item(BaseModel):
    class Config:
        extra = Extra.forbid

    static: DataScienceDataRoomConfigurationV2


class DataScienceDataRoomV3Item(BaseModel):
    class Config:
        extra = Extra.forbid

    static: DataScienceDataRoomConfigurationV3


class DataScienceDataRoomV4Item(BaseModel):
    class Config:
        extra = Extra.forbid

    static: DataScienceDataRoomConfigurationV4


class DataScienceDataRoomV5Item(BaseModel):
    class Config:
        extra = Extra.forbid

    static: DataScienceDataRoomConfigurationV5


class DataScienceDataRoomV6Item(BaseModel):
    class Config:
        extra = Extra.forbid

    static: DataScienceDataRoomConfigurationV6


class InteractiveDataScienceDataRoomV2(BaseModel):
    commits: Sequence[DataScienceCommitV21]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV2


class InteractiveDataScienceDataRoomV3(BaseModel):
    commits: Sequence[DataScienceCommitV31]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV3


class InteractiveDataScienceDataRoomV4(BaseModel):
    commits: Sequence[DataScienceCommitV41]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV4


class InteractiveDataScienceDataRoomV5(BaseModel):
    commits: Sequence[DataScienceCommitV51]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV5


class InteractiveDataScienceDataRoomV6(BaseModel):
    commits: Sequence[DataScienceCommitV61]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfigurationV6


class LeafNode1(BaseModel):
    isRequired: bool
    kind: LeafNodeKind


class NodeKindItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    leaf: LeafNode1


class NodeKindItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    computation: ComputationNode1


class NodeKind(BaseModel):
    __root__: Union[NodeKindItem2, NodeKindItem3]


class DataScienceDataRoomV2Item1(BaseModel):
    class Config:
        extra = Extra.forbid

    interactive: InteractiveDataScienceDataRoomV2


class DataScienceDataRoomV2(BaseModel):
    __root__: Union[DataScienceDataRoomV2Item, DataScienceDataRoomV2Item1]


class DataScienceDataRoomV3Item1(BaseModel):
    class Config:
        extra = Extra.forbid

    interactive: InteractiveDataScienceDataRoomV3


class DataScienceDataRoomV3(BaseModel):
    __root__: Union[DataScienceDataRoomV3Item, DataScienceDataRoomV3Item1]


class DataScienceDataRoomV4Item1(BaseModel):
    class Config:
        extra = Extra.forbid

    interactive: InteractiveDataScienceDataRoomV4


class DataScienceDataRoomV4(BaseModel):
    __root__: Union[DataScienceDataRoomV4Item, DataScienceDataRoomV4Item1]


class DataScienceDataRoomV5Item1(BaseModel):
    class Config:
        extra = Extra.forbid

    interactive: InteractiveDataScienceDataRoomV5


class DataScienceDataRoomV5(BaseModel):
    __root__: Union[DataScienceDataRoomV5Item, DataScienceDataRoomV5Item1]


class DataScienceDataRoomV6Item1(BaseModel):
    class Config:
        extra = Extra.forbid

    interactive: InteractiveDataScienceDataRoomV6


class DataScienceDataRoomV6(BaseModel):
    __root__: Union[DataScienceDataRoomV6Item, DataScienceDataRoomV6Item1]


class Node(BaseModel):
    id: str
    kind: NodeKind
    name: str


class DataScienceDataRoomItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    v2: DataScienceDataRoomV2


class DataScienceDataRoomItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    v3: DataScienceDataRoomV3


class DataScienceDataRoomItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    v4: DataScienceDataRoomV4


class DataScienceDataRoomItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    v5: DataScienceDataRoomV5


class DataScienceDataRoomItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    v6: DataScienceDataRoomV6


class AddComputationCommit1(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: Node


class DataScienceCommitKindItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    addComputation: AddComputationCommit1


class DataScienceCommitKind1(BaseModel):
    __root__: DataScienceCommitKindItem1


class DataScienceCommitV01(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKind1
    name: str


class DataScienceCommitV11(DataScienceCommitV01):
    pass


class DataScienceDataRoomConfiguration(BaseModel):
    dcrSecretIdBase64: Optional[Optional[str]] = None
    description: str
    enableDevelopment: bool
    enclaveRootCertificatePem: str
    enclaveSpecifications: Sequence[EnclaveSpecification]
    id: str
    nodes: Sequence[Node]
    participants: Sequence[Participant]
    title: str


class DataScienceDataRoomV0Item(BaseModel):
    class Config:
        extra = Extra.forbid

    static: DataScienceDataRoomConfiguration


class DataScienceDataRoomV1Item(DataScienceDataRoomV0Item):
    pass


class InteractiveDataScienceDataRoomV0(BaseModel):
    commits: Sequence[DataScienceCommitV01]
    initialConfiguration: DataScienceDataRoomConfiguration


class InteractiveDataScienceDataRoomV1(BaseModel):
    commits: Sequence[DataScienceCommitV11]
    enableAutomergeFeature: bool
    initialConfiguration: DataScienceDataRoomConfiguration


class DataScienceDataRoomV0Item1(BaseModel):
    class Config:
        extra = Extra.forbid

    interactive: InteractiveDataScienceDataRoomV0


class DataScienceDataRoomV0(BaseModel):
    __root__: Union[DataScienceDataRoomV0Item, DataScienceDataRoomV0Item1]


class DataScienceDataRoomV1Item1(BaseModel):
    class Config:
        extra = Extra.forbid

    interactive: InteractiveDataScienceDataRoomV1


class DataScienceDataRoomV1(BaseModel):
    __root__: Union[DataScienceDataRoomV1Item, DataScienceDataRoomV1Item1]


class DataScienceDataRoomItem(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: DataScienceDataRoomV0


class DataScienceDataRoomItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    v1: DataScienceDataRoomV1


class DataScienceDataRoom(BaseModel):
    __root__: Union[
        DataScienceDataRoomItem,
        DataScienceDataRoomItem1,
        DataScienceDataRoomItem2,
        DataScienceDataRoomItem3,
        DataScienceDataRoomItem4,
        DataScienceDataRoomItem5,
        DataScienceDataRoomItem6,
    ] = Field(..., title='DataScienceDataRoom')
