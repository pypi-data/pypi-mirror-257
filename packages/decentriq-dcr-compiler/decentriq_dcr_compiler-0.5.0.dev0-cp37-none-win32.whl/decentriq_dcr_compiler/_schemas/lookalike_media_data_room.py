# generated by datamodel-codegen:
#   filename:  lookalike_media_data_room.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, Extra, Field, conint


class EnclaveSpecificationV02(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType2(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm2(Enum):
    SHA256_HEX = 'SHA256_HEX'


class LookalikeMediaDataRoomV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV02
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableDownloadByAdvertiser: bool
    enableDownloadByAgency: bool
    enableDownloadByPublisher: bool
    enableOverlapInsights: bool
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm2]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType2
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV02


class LookalikeMediaDataRoomV1(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDataRoomV2(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDcrComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV02
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm2]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType2
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV02
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class Type9(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValueItem9(BaseModel):
    type: Type9


class Type10(Enum):
    DATASET = 'DATASET'


class RequirementFlagValueItem10(BaseModel):
    type: Type10


class Type11(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValueItem11(BaseModel):
    type: Type11
    value: str


class RequirementFlagValue(BaseModel):
    __root__: Union[
        RequirementFlagValueItem9,
        RequirementFlagValueItem10,
        RequirementFlagValueItem11,
    ]


class LookalikeMediaDataRoomItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: LookalikeMediaDataRoomV0


class LookalikeMediaDataRoomItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    v1: LookalikeMediaDataRoomV1


class LookalikeMediaDataRoomItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    v2: LookalikeMediaDataRoomV2


class KnownOrUnknownRequirementFlagValue3(BaseModel):
    __root__: Optional[RequirementFlagValue]


class LookalikeMediaDcrComputeItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: LookalikeMediaDcrComputeV0


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag3(BaseModel):
    details: KnownOrUnknownRequirementFlagValue3
    name: str


class Requirements(BaseModel):
    optional: Sequence[RequirementFlag3]
    required: Sequence[RequirementFlag3]


class LookalikeMediaDcrComputeV1(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV02
    enableDebugMode: bool
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm2]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType2
    modelEvaluation: Optional[Optional[ModelEvaluationConfig]] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV02
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class LookalikeMediaDcrComputeV2(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV02
    enableDebugMode: bool
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm2]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType2
    modelEvaluation: Optional[Optional[ModelEvaluationConfig]] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV02
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class LookalikeMediaDcrComputeItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    v1: LookalikeMediaDcrComputeV1


class LookalikeMediaDcrComputeItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    v2: LookalikeMediaDcrComputeV2


class LookalikeMediaDcrCompute1(BaseModel):
    __root__: Union[
        LookalikeMediaDcrComputeItem3,
        LookalikeMediaDcrComputeItem4,
        LookalikeMediaDcrComputeItem5,
    ]


class LookalikeMediaDcrComputeOrUnknown1(BaseModel):
    __root__: Optional[LookalikeMediaDcrCompute1]


class LookalikeMediaDcrWrapper(BaseModel):
    compute: LookalikeMediaDcrComputeOrUnknown1
    consumes: Requirements
    features: Sequence[str]


class LookalikeMediaDataRoomItem7(BaseModel):
    class Config:
        extra = Extra.forbid

    v3: LookalikeMediaDcrWrapper


class LookalikeMediaDataRoom(BaseModel):
    __root__: Union[
        LookalikeMediaDataRoomItem4,
        LookalikeMediaDataRoomItem5,
        LookalikeMediaDataRoomItem6,
        LookalikeMediaDataRoomItem7,
    ] = Field(
        ...,
        description='The high-level representation of an LMDCR. Starting with version 4, an outer structure has been introduced that exposes the "features" supported by the LMDCR via string-based flags. This way, every version of DDC can extract these feature flags and inform the SDKs whether a particular function is supported by this LMDCR. In a similar way, the LMDCR exposes what datasets it needs as input from a DataLab such that we can check the compatibility between a DataLab and a LMDCR from any version of DDC/the SDKs.',
        title='LookalikeMediaDataRoom',
    )
