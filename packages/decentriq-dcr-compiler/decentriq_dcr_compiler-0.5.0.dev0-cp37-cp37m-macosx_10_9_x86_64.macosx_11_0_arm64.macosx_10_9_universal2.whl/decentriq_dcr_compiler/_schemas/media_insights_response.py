# generated by datamodel-codegen:
#   filename:  media_insights_response.json

from __future__ import annotations

from enum import Enum
from typing import Any, Mapping, Optional, Sequence, Union

from pydantic import BaseModel, Extra, Field, conint


class PublishDataRoom(BaseModel):
    class Config:
        extra = Extra.forbid

    dataRoomId: str


class MediaInsightsResponseItem(BaseModel):
    class Config:
        extra = Extra.forbid

    publishDataRoom: PublishDataRoom


class MediaInsightsResponseItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    publishAdvertiserDataset: Mapping[str, Any]


class MediaInsightsResponseItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    publishPublisherUsersDataset: Mapping[str, Any]


class MediaInsightsResponseItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishPublisherUsersDataset: Mapping[str, Any]


class MediaInsightsResponseItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    publishDemographicsDataset: Mapping[str, Any]


class MediaInsightsResponseItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishDemographicsDataset: Mapping[str, Any]


class MediaInsightsResponseItem7(BaseModel):
    class Config:
        extra = Extra.forbid

    publishSegmentsDataset: Mapping[str, Any]


class MediaInsightsResponseItem8(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishSegmentsDataset: Mapping[str, Any]


class MediaInsightsResponseItem9(BaseModel):
    class Config:
        extra = Extra.forbid

    publishEmbeddingsDataset: Mapping[str, Any]


class MediaInsightsResponseItem10(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishEmbeddingsDataset: Mapping[str, Any]


class MediaInsightsResponseItem11(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishAdvertiserDataset: Mapping[str, Any]


class RetrievePublishedDatasets(BaseModel):
    class Config:
        extra = Extra.forbid

    advertiserDatasetHashHex: Optional[Optional[str]] = None
    demographicsDatasetHashHex: Optional[Optional[str]] = None
    embeddingsDatasetHashHex: Optional[Optional[str]] = None
    publisherDatasetHashHex: Optional[Optional[str]] = None
    segmentsDatasetHashHex: Optional[Optional[str]] = None


class MediaInsightsResponseItem12(BaseModel):
    class Config:
        extra = Extra.forbid

    retrievePublishedDatasets: RetrievePublishedDatasets


class ComputeAvailableAudiences(BaseModel):
    class Config:
        extra = Extra.forbid

    computeNodeName: str
    jobIdHex: str


class MediaInsightsResponseItem13(BaseModel):
    class Config:
        extra = Extra.forbid

    computeAvailableAudiences: ComputeAvailableAudiences


class ComputeOverlapStatistics(ComputeAvailableAudiences):
    pass


class MediaInsightsResponseItem14(BaseModel):
    class Config:
        extra = Extra.forbid

    computeOverlapStatistics: ComputeOverlapStatistics


class ComputeInsights(ComputeAvailableAudiences):
    pass


class MediaInsightsResponseItem15(BaseModel):
    class Config:
        extra = Extra.forbid

    computeInsights: ComputeInsights


class MediaInsightsResponseItem16(BaseModel):
    class Config:
        extra = Extra.forbid

    publishActivatedAudiencesConfig: Mapping[str, Any]


class MediaInsightsResponseItem17(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishActivatedAudiencesConfig: Mapping[str, Any]


class GetAudienceUserList(ComputeAvailableAudiences):
    pass


class MediaInsightsResponseItem18(BaseModel):
    class Config:
        extra = Extra.forbid

    getAudienceUserList: GetAudienceUserList


class GetAudiencesForPublisher(ComputeAvailableAudiences):
    pass


class MediaInsightsResponseItem19(BaseModel):
    class Config:
        extra = Extra.forbid

    getAudiencesForPublisher: GetAudiencesForPublisher


class GetAudiencesForAdvertiser(ComputeAvailableAudiences):
    pass


class MediaInsightsResponseItem20(BaseModel):
    class Config:
        extra = Extra.forbid

    getAudiencesForAdvertiser: GetAudiencesForAdvertiser


class IngestAudiencesReport(ComputeAvailableAudiences):
    pass


class MediaInsightsResponseItem21(BaseModel):
    class Config:
        extra = Extra.forbid

    ingestAudiencesReport: IngestAudiencesReport


class RetrieveModelQualityReport(ComputeAvailableAudiences):
    pass


class MediaInsightsResponseItem22(BaseModel):
    class Config:
        extra = Extra.forbid

    retrieveModelQualityReport: RetrieveModelQualityReport


class EnclaveSpecificationV0(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class Type(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValueItem(BaseModel):
    type: Type


class Type1(Enum):
    DATASET = 'DATASET'


class RequirementFlagValueItem1(BaseModel):
    type: Type1


class Type2(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValueItem2(BaseModel):
    type: Type2
    value: str


class RequirementFlagValue(BaseModel):
    __root__: Union[
        RequirementFlagValueItem, RequirementFlagValueItem1, RequirementFlagValueItem2
    ]


class KnownOrUnknownRequirementFlagValue(BaseModel):
    __root__: Optional[RequirementFlagValue]


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(BaseModel):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class RequirementOpItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    contains: RequirementFlag


class MediaInsightsComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[Optional[ModelEvaluationConfig]] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class MediaInsightsComputeItem(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: MediaInsightsComputeV0


class MediaInsightsCompute(BaseModel):
    __root__: MediaInsightsComputeItem


class MediaInsightsComputeOrUnknown(BaseModel):
    __root__: Optional[MediaInsightsCompute]


class RetrieveDataRoom(BaseModel):
    class Config:
        extra = Extra.forbid

    dataRoom: MediaInsightsDcr


class MediaInsightsResponseItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    retrieveDataRoom: RetrieveDataRoom


class MediaInsightsResponse(BaseModel):
    __root__: Union[
        MediaInsightsResponseItem,
        MediaInsightsResponseItem1,
        MediaInsightsResponseItem2,
        MediaInsightsResponseItem3,
        MediaInsightsResponseItem4,
        MediaInsightsResponseItem5,
        MediaInsightsResponseItem6,
        MediaInsightsResponseItem7,
        MediaInsightsResponseItem8,
        MediaInsightsResponseItem9,
        MediaInsightsResponseItem10,
        MediaInsightsResponseItem11,
        MediaInsightsResponseItem12,
        MediaInsightsResponseItem13,
        MediaInsightsResponseItem14,
        MediaInsightsResponseItem15,
        MediaInsightsResponseItem16,
        MediaInsightsResponseItem17,
        MediaInsightsResponseItem18,
        MediaInsightsResponseItem19,
        MediaInsightsResponseItem20,
        MediaInsightsResponseItem21,
        MediaInsightsResponseItem22,
    ] = Field(..., title='MediaInsightsResponse')


class ConsumerRequirements(BaseModel):
    optional: Sequence[RequirementFlag]
    required: Optional[Optional[RequirementOp]] = None


class MediaInsightsDcrItem(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: MediaInsightsDcrInner


class MediaInsightsDcr(BaseModel):
    __root__: MediaInsightsDcrItem


class MediaInsightsDcrInner(BaseModel):
    compute: MediaInsightsComputeOrUnknown
    consumes: ConsumerRequirements
    features: Sequence[str]


class RequirementOpItem(BaseModel):
    class Config:
        extra = Extra.forbid

    or_: Sequence[RequirementOp] = Field(..., alias='or')


class RequirementOpItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    and_: Sequence[RequirementOp] = Field(..., alias='and')


class RequirementOpItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    exclusiveOr: Sequence[RequirementOp]


class RequirementOp(BaseModel):
    __root__: Union[
        RequirementOpItem, RequirementOpItem1, RequirementOpItem2, RequirementOpItem3
    ]


RetrieveDataRoom.update_forward_refs()
ConsumerRequirements.update_forward_refs()
MediaInsightsDcrItem.update_forward_refs()
RequirementOpItem.update_forward_refs()
RequirementOpItem1.update_forward_refs()
RequirementOpItem2.update_forward_refs()
