# generated by datamodel-codegen:
#   filename:  lookalike_media_response.json

from __future__ import annotations

from enum import Enum
from typing import Any, Mapping, Optional, Sequence, Union

from pydantic import BaseModel, Extra, Field, conint


class PublishDataRoom3(BaseModel):
    class Config:
        extra = Extra.forbid

    dataRoomId: str


class LookalikeMediaResponseItem(BaseModel):
    class Config:
        extra = Extra.forbid

    publishDataRoom: PublishDataRoom3


class LookalikeMediaResponseItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    publishAdvertiserDataset: Mapping[str, Any]


class LookalikeMediaResponseItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    publishPublisherUsersDataset: Mapping[str, Any]


class LookalikeMediaResponseItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishPublisherUsersDataset: Mapping[str, Any]


class LookalikeMediaResponseItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    publishDemographicsDataset: Mapping[str, Any]


class LookalikeMediaResponseItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishDemographicsDataset: Mapping[str, Any]


class LookalikeMediaResponseItem7(BaseModel):
    class Config:
        extra = Extra.forbid

    publishSegmentsDataset: Mapping[str, Any]


class LookalikeMediaResponseItem8(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishSegmentsDataset: Mapping[str, Any]


class LookalikeMediaResponseItem9(BaseModel):
    class Config:
        extra = Extra.forbid

    publishEmbeddingsDataset: Mapping[str, Any]


class LookalikeMediaResponseItem10(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishEmbeddingsDataset: Mapping[str, Any]


class LookalikeMediaResponseItem11(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishAdvertiserDataset: Mapping[str, Any]


class RetrievePublishedDatasets3(BaseModel):
    class Config:
        extra = Extra.forbid

    advertiserDatasetHashHex: Optional[Optional[str]] = None
    demographicsDatasetHashHex: Optional[Optional[str]] = None
    embeddingsDatasetHashHex: Optional[Optional[str]] = None
    publisherDatasetHashHex: Optional[Optional[str]] = None
    segmentsDatasetHashHex: Optional[Optional[str]] = None


class LookalikeMediaResponseItem12(BaseModel):
    class Config:
        extra = Extra.forbid

    retrievePublishedDatasets: RetrievePublishedDatasets3


class CalculateOverlapBasic1(BaseModel):
    class Config:
        extra = Extra.forbid

    computeNodeName: str
    jobIdHex: str


class LookalikeMediaResponseItem13(BaseModel):
    class Config:
        extra = Extra.forbid

    calculateOverlapBasic: CalculateOverlapBasic1


class ComputeAudienceSizes1(CalculateOverlapBasic1):
    pass


class LookalikeMediaResponseItem14(BaseModel):
    class Config:
        extra = Extra.forbid

    computeAudienceSizes: ComputeAudienceSizes1


class CalculateOverlapInsights1(CalculateOverlapBasic1):
    pass


class LookalikeMediaResponseItem15(BaseModel):
    class Config:
        extra = Extra.forbid

    calculateOverlapInsights: CalculateOverlapInsights1


class LookalikeMediaResponseItem16(BaseModel):
    class Config:
        extra = Extra.forbid

    publishActivatedAudiencesConfig: Mapping[str, Any]


class LookalikeMediaResponseItem17(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishActivatedAudiencesConfig: Mapping[str, Any]


class GetLookalikeAudience1(CalculateOverlapBasic1):
    pass


class LookalikeMediaResponseItem18(BaseModel):
    class Config:
        extra = Extra.forbid

    getLookalikeAudience: GetLookalikeAudience1


class CalculateModelledAudienceInsights1(CalculateOverlapBasic1):
    pass


class LookalikeMediaResponseItem19(BaseModel):
    class Config:
        extra = Extra.forbid

    calculateModelledAudienceInsights: CalculateModelledAudienceInsights1


class CalculateModelledAudienceInsightsView1(CalculateOverlapBasic1):
    pass


class LookalikeMediaResponseItem20(BaseModel):
    class Config:
        extra = Extra.forbid

    calculateModelledAudienceInsightsView: CalculateModelledAudienceInsightsView1


class ViewPublishedActivatedAudiences1(CalculateOverlapBasic1):
    pass


class LookalikeMediaResponseItem21(BaseModel):
    class Config:
        extra = Extra.forbid

    viewPublishedActivatedAudiences: ViewPublishedActivatedAudiences1


class ViewActivatedAudiences1(CalculateOverlapBasic1):
    pass


class LookalikeMediaResponseItem22(BaseModel):
    class Config:
        extra = Extra.forbid

    viewActivatedAudiences: ViewActivatedAudiences1


class IngestAudiencesReport3(CalculateOverlapBasic1):
    pass


class LookalikeMediaResponseItem23(BaseModel):
    class Config:
        extra = Extra.forbid

    ingestAudiencesReport: IngestAudiencesReport3


class RetrieveModelQualityReport3(CalculateOverlapBasic1):
    pass


class LookalikeMediaResponseItem24(BaseModel):
    class Config:
        extra = Extra.forbid

    retrieveModelQualityReport: RetrieveModelQualityReport3


class EnclaveSpecificationV04(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType4(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm4(Enum):
    SHA256_HEX = 'SHA256_HEX'


class LookalikeMediaDataRoomV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV04
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableDownloadByAdvertiser: bool
    enableDownloadByAgency: bool
    enableDownloadByPublisher: bool
    enableOverlapInsights: bool
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm4]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType4
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV04


class LookalikeMediaDataRoomV1(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDataRoomV2(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDcrComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV04
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm4]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType4
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV04
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class Type15(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValueItem15(BaseModel):
    type: Type15


class Type16(Enum):
    DATASET = 'DATASET'


class RequirementFlagValueItem16(BaseModel):
    type: Type16


class Type17(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValueItem17(BaseModel):
    type: Type17
    value: str


class RequirementFlagValue(BaseModel):
    __root__: Union[
        RequirementFlagValueItem15,
        RequirementFlagValueItem16,
        RequirementFlagValueItem17,
    ]


class KnownOrUnknownRequirementFlagValue5(BaseModel):
    __root__: Optional[RequirementFlagValue]


class LookalikeMediaDataRoomItem8(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: LookalikeMediaDataRoomV0


class LookalikeMediaDataRoomItem9(BaseModel):
    class Config:
        extra = Extra.forbid

    v1: LookalikeMediaDataRoomV1


class LookalikeMediaDataRoomItem10(BaseModel):
    class Config:
        extra = Extra.forbid

    v2: LookalikeMediaDataRoomV2


class LookalikeMediaDcrComputeItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: LookalikeMediaDcrComputeV0


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag4(BaseModel):
    details: KnownOrUnknownRequirementFlagValue5
    name: str


class Requirements(BaseModel):
    optional: Sequence[RequirementFlag4]
    required: Sequence[RequirementFlag4]


class LookalikeMediaDcrComputeV1(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV04
    enableDebugMode: bool
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm4]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType4
    modelEvaluation: Optional[Optional[ModelEvaluationConfig]] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV04
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class LookalikeMediaDcrComputeV2(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV04
    enableDebugMode: bool
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm4]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType4
    modelEvaluation: Optional[Optional[ModelEvaluationConfig]] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV04
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class LookalikeMediaDcrComputeItem7(BaseModel):
    class Config:
        extra = Extra.forbid

    v1: LookalikeMediaDcrComputeV1


class LookalikeMediaDcrComputeItem8(BaseModel):
    class Config:
        extra = Extra.forbid

    v2: LookalikeMediaDcrComputeV2


class LookalikeMediaDcrCompute2(BaseModel):
    __root__: Union[
        LookalikeMediaDcrComputeItem6,
        LookalikeMediaDcrComputeItem7,
        LookalikeMediaDcrComputeItem8,
    ]


class LookalikeMediaDcrComputeOrUnknown2(BaseModel):
    __root__: Optional[LookalikeMediaDcrCompute2]


class LookalikeMediaDcrWrapper(BaseModel):
    compute: LookalikeMediaDcrComputeOrUnknown2
    consumes: Requirements
    features: Sequence[str]


class LookalikeMediaDataRoomItem11(BaseModel):
    class Config:
        extra = Extra.forbid

    v3: LookalikeMediaDcrWrapper


class LookalikeMediaDataRoom(BaseModel):
    __root__: Union[
        LookalikeMediaDataRoomItem8,
        LookalikeMediaDataRoomItem9,
        LookalikeMediaDataRoomItem10,
        LookalikeMediaDataRoomItem11,
    ] = Field(
        ...,
        description='The high-level representation of an LMDCR. Starting with version 4, an outer structure has been introduced that exposes the "features" supported by the LMDCR via string-based flags. This way, every version of DDC can extract these feature flags and inform the SDKs whether a particular function is supported by this LMDCR. In a similar way, the LMDCR exposes what datasets it needs as input from a DataLab such that we can check the compatibility between a DataLab and a LMDCR from any version of DDC/the SDKs.',
    )


class RetrieveDataRoom3(BaseModel):
    class Config:
        extra = Extra.forbid

    dataRoom: LookalikeMediaDataRoom


class LookalikeMediaResponseItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    retrieveDataRoom: RetrieveDataRoom3


class LookalikeMediaResponse(BaseModel):
    __root__: Union[
        LookalikeMediaResponseItem,
        LookalikeMediaResponseItem1,
        LookalikeMediaResponseItem2,
        LookalikeMediaResponseItem3,
        LookalikeMediaResponseItem4,
        LookalikeMediaResponseItem5,
        LookalikeMediaResponseItem6,
        LookalikeMediaResponseItem7,
        LookalikeMediaResponseItem8,
        LookalikeMediaResponseItem9,
        LookalikeMediaResponseItem10,
        LookalikeMediaResponseItem11,
        LookalikeMediaResponseItem12,
        LookalikeMediaResponseItem13,
        LookalikeMediaResponseItem14,
        LookalikeMediaResponseItem15,
        LookalikeMediaResponseItem16,
        LookalikeMediaResponseItem17,
        LookalikeMediaResponseItem18,
        LookalikeMediaResponseItem19,
        LookalikeMediaResponseItem20,
        LookalikeMediaResponseItem21,
        LookalikeMediaResponseItem22,
        LookalikeMediaResponseItem23,
        LookalikeMediaResponseItem24,
    ] = Field(
        ..., description='GcgResponse -> MediaResponse', title='LookalikeMediaResponse'
    )
