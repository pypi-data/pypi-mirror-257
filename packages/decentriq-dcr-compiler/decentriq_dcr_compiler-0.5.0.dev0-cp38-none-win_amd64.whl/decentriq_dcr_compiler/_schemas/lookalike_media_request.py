# generated by datamodel-codegen:
#   filename:  lookalike_media_request.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, Extra, Field, conint


class RetrieveDataRoom1(BaseModel):
    class Config:
        extra = Extra.forbid

    dataRoomIdHex: str


class LookalikeMediaRequestItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    retrieveDataRoom: RetrieveDataRoom1


class PublishAdvertiserDataset(BaseModel):
    class Config:
        extra = Extra.forbid

    dataRoomIdHex: str
    datasetHashHex: str
    encryptionKeyHex: str
    scopeIdHex: str


class LookalikeMediaRequestItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    publishAdvertiserDataset: PublishAdvertiserDataset


class PublishPublisherUsersDataset(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequestItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    publishPublisherUsersDataset: PublishPublisherUsersDataset


class UnpublishPublisherUsersDataset(RetrieveDataRoom1):
    pass


class LookalikeMediaRequestItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishPublisherUsersDataset: UnpublishPublisherUsersDataset


class UnpublishAdvertiserDataset(RetrieveDataRoom1):
    pass


class LookalikeMediaRequestItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishAdvertiserDataset: UnpublishAdvertiserDataset


class UnpublishDemographicsDataset(RetrieveDataRoom1):
    pass


class LookalikeMediaRequestItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishDemographicsDataset: UnpublishDemographicsDataset


class UnpublishEmbeddingsDataset(RetrieveDataRoom1):
    pass


class LookalikeMediaRequestItem7(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishEmbeddingsDataset: UnpublishEmbeddingsDataset


class UnpublishSegmentsDataset(RetrieveDataRoom1):
    pass


class LookalikeMediaRequestItem8(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishSegmentsDataset: UnpublishSegmentsDataset


class RetrievePublishedDatasets1(RetrieveDataRoom1):
    pass


class LookalikeMediaRequestItem9(BaseModel):
    class Config:
        extra = Extra.forbid

    retrievePublishedDatasets: RetrievePublishedDatasets1


class CalculateOverlapBasic(BaseModel):
    class Config:
        extra = Extra.forbid

    dataRoomIdHex: str
    scopeIdHex: str


class LookalikeMediaRequestItem10(BaseModel):
    class Config:
        extra = Extra.forbid

    calculateOverlapBasic: CalculateOverlapBasic


class CalculateOverlapInsights(CalculateOverlapBasic):
    pass


class LookalikeMediaRequestItem11(BaseModel):
    class Config:
        extra = Extra.forbid

    calculateOverlapInsights: CalculateOverlapInsights


class PublishDemographicsDataset(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequestItem12(BaseModel):
    class Config:
        extra = Extra.forbid

    publishDemographicsDataset: PublishDemographicsDataset


class PublishSegmentsDataset(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequestItem13(BaseModel):
    class Config:
        extra = Extra.forbid

    publishSegmentsDataset: PublishSegmentsDataset


class PublishEmbeddingsDataset(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequestItem14(BaseModel):
    class Config:
        extra = Extra.forbid

    publishEmbeddingsDataset: PublishEmbeddingsDataset


class PublishActivatedAudiencesConfig(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequestItem15(BaseModel):
    class Config:
        extra = Extra.forbid

    publishActivatedAudiencesConfig: PublishActivatedAudiencesConfig


class UnpublishActivatedAudiencesConfig(RetrieveDataRoom1):
    pass


class LookalikeMediaRequestItem16(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishActivatedAudiencesConfig: UnpublishActivatedAudiencesConfig


class CalculateModelledAudienceInsights(CalculateOverlapBasic):
    pass


class LookalikeMediaRequestItem17(BaseModel):
    class Config:
        extra = Extra.forbid

    calculateModelledAudienceInsights: CalculateModelledAudienceInsights


class CalculateModelledAudienceInsightsView(CalculateOverlapBasic):
    pass


class LookalikeMediaRequestItem18(BaseModel):
    class Config:
        extra = Extra.forbid

    calculateModelledAudienceInsightsView: CalculateModelledAudienceInsightsView


class ComputeAudienceSizes(CalculateOverlapBasic):
    pass


class LookalikeMediaRequestItem19(BaseModel):
    class Config:
        extra = Extra.forbid

    computeAudienceSizes: ComputeAudienceSizes


class ViewPublishedActivatedAudiences(CalculateOverlapBasic):
    pass


class LookalikeMediaRequestItem21(BaseModel):
    class Config:
        extra = Extra.forbid

    viewPublishedActivatedAudiences: ViewPublishedActivatedAudiences


class ViewActivatedAudiences(CalculateOverlapBasic):
    pass


class LookalikeMediaRequestItem22(BaseModel):
    class Config:
        extra = Extra.forbid

    viewActivatedAudiences: ViewActivatedAudiences


class IngestAudiencesReport1(CalculateOverlapBasic):
    pass


class LookalikeMediaRequestItem23(BaseModel):
    class Config:
        extra = Extra.forbid

    ingestAudiencesReport: IngestAudiencesReport1


class RetrieveModelQualityReport1(CalculateOverlapBasic):
    pass


class LookalikeMediaRequestItem24(BaseModel):
    class Config:
        extra = Extra.forbid

    retrieveModelQualityReport: RetrieveModelQualityReport1


class EnclaveSpecificationV01(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType1(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm1(Enum):
    SHA256_HEX = 'SHA256_HEX'


class LookalikeMediaDataRoomV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV01
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableDownloadByAdvertiser: bool
    enableDownloadByAgency: bool
    enableDownloadByPublisher: bool
    enableOverlapInsights: bool
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm1]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType1
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV01


class LookalikeMediaDataRoomV1(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDataRoomV2(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDcrComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV01
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm1]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType1
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV01
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class RequestedAudiencePayload(BaseModel):
    class Config:
        extra = Extra.forbid

    audienceType: str
    reach: float


class Type3(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValueItem3(BaseModel):
    type: Type3


class Type4(Enum):
    DATASET = 'DATASET'


class RequirementFlagValueItem4(BaseModel):
    type: Type4


class Type5(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValueItem5(BaseModel):
    type: Type5
    value: str


class RequirementFlagValue(BaseModel):
    __root__: Union[
        RequirementFlagValueItem3, RequirementFlagValueItem4, RequirementFlagValueItem5
    ]


class GetLookalikeAudience(BaseModel):
    class Config:
        extra = Extra.forbid

    dataRoomIdHex: str
    requestedAudience: RequestedAudiencePayload
    scopeIdHex: str


class LookalikeMediaRequestItem20(BaseModel):
    class Config:
        extra = Extra.forbid

    getLookalikeAudience: GetLookalikeAudience


class KnownOrUnknownRequirementFlagValue1(BaseModel):
    __root__: Optional[RequirementFlagValue]


class LookalikeMediaDataRoomItem(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: LookalikeMediaDataRoomV0


class LookalikeMediaDataRoomItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    v1: LookalikeMediaDataRoomV1


class LookalikeMediaDataRoomItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    v2: LookalikeMediaDataRoomV2


class LookalikeMediaDcrComputeItem(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: LookalikeMediaDcrComputeV0


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag1(BaseModel):
    details: KnownOrUnknownRequirementFlagValue1
    name: str


class Requirements(BaseModel):
    optional: Sequence[RequirementFlag1]
    required: Sequence[RequirementFlag1]


class LookalikeMediaDcrComputeV1(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV01
    enableDebugMode: bool
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm1]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType1
    modelEvaluation: Optional[Optional[ModelEvaluationConfig]] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV01
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class LookalikeMediaDcrComputeV2(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV01
    enableDebugMode: bool
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm1]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType1
    modelEvaluation: Optional[Optional[ModelEvaluationConfig]] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV01
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class LookalikeMediaDcrComputeItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    v1: LookalikeMediaDcrComputeV1


class LookalikeMediaDcrComputeItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    v2: LookalikeMediaDcrComputeV2


class LookalikeMediaDcrCompute(BaseModel):
    __root__: Union[
        LookalikeMediaDcrComputeItem,
        LookalikeMediaDcrComputeItem1,
        LookalikeMediaDcrComputeItem2,
    ]


class LookalikeMediaDcrComputeOrUnknown(BaseModel):
    __root__: Optional[LookalikeMediaDcrCompute]


class LookalikeMediaDcrWrapper(BaseModel):
    compute: LookalikeMediaDcrComputeOrUnknown
    consumes: Requirements
    features: Sequence[str]


class LookalikeMediaDataRoomItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    v3: LookalikeMediaDcrWrapper


class LookalikeMediaDataRoom(BaseModel):
    __root__: Union[
        LookalikeMediaDataRoomItem,
        LookalikeMediaDataRoomItem1,
        LookalikeMediaDataRoomItem2,
        LookalikeMediaDataRoomItem3,
    ] = Field(
        ...,
        description='The high-level representation of an LMDCR. Starting with version 4, an outer structure has been introduced that exposes the "features" supported by the LMDCR via string-based flags. This way, every version of DDC can extract these feature flags and inform the SDKs whether a particular function is supported by this LMDCR. In a similar way, the LMDCR exposes what datasets it needs as input from a DataLab such that we can check the compatibility between a DataLab and a LMDCR from any version of DDC/the SDKs.',
    )


class PublishDataRoom1(BaseModel):
    class Config:
        extra = Extra.forbid

    dataRoom: LookalikeMediaDataRoom
    requirePassword: bool
    showOrganizationLogo: bool


class LookalikeMediaRequestItem(BaseModel):
    class Config:
        extra = Extra.forbid

    publishDataRoom: PublishDataRoom1


class LookalikeMediaRequest(BaseModel):
    __root__: Union[
        LookalikeMediaRequestItem,
        LookalikeMediaRequestItem1,
        LookalikeMediaRequestItem2,
        LookalikeMediaRequestItem3,
        LookalikeMediaRequestItem4,
        LookalikeMediaRequestItem5,
        LookalikeMediaRequestItem6,
        LookalikeMediaRequestItem7,
        LookalikeMediaRequestItem8,
        LookalikeMediaRequestItem9,
        LookalikeMediaRequestItem10,
        LookalikeMediaRequestItem11,
        LookalikeMediaRequestItem12,
        LookalikeMediaRequestItem13,
        LookalikeMediaRequestItem14,
        LookalikeMediaRequestItem15,
        LookalikeMediaRequestItem16,
        LookalikeMediaRequestItem17,
        LookalikeMediaRequestItem18,
        LookalikeMediaRequestItem19,
        LookalikeMediaRequestItem20,
        LookalikeMediaRequestItem21,
        LookalikeMediaRequestItem22,
        LookalikeMediaRequestItem23,
        LookalikeMediaRequestItem24,
    ] = Field(
        ..., description='MediaRequest -> GcgRequest', title='LookalikeMediaRequest'
    )
