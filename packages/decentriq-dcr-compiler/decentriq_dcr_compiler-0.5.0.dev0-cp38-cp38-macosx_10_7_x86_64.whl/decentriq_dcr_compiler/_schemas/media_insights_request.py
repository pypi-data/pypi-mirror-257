# generated by datamodel-codegen:
#   filename:  media_insights_request.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, Extra, Field, conint


class RetrieveDataRoom2(BaseModel):
    class Config:
        extra = Extra.forbid

    dataRoomIdHex: str


class MediaInsightsRequestItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    retrieveDataRoom: RetrieveDataRoom2


class PublishAdvertiserDataset1(BaseModel):
    class Config:
        extra = Extra.forbid

    dataRoomIdHex: str
    datasetHashHex: str
    encryptionKeyHex: str
    scopeIdHex: str


class MediaInsightsRequestItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    publishAdvertiserDataset: PublishAdvertiserDataset1


class PublishPublisherUsersDataset1(PublishAdvertiserDataset1):
    pass


class MediaInsightsRequestItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    publishPublisherUsersDataset: PublishPublisherUsersDataset1


class UnpublishPublisherUsersDataset1(RetrieveDataRoom2):
    pass


class MediaInsightsRequestItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishPublisherUsersDataset: UnpublishPublisherUsersDataset1


class UnpublishAdvertiserDataset1(RetrieveDataRoom2):
    pass


class MediaInsightsRequestItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishAdvertiserDataset: UnpublishAdvertiserDataset1


class UnpublishDemographicsDataset1(RetrieveDataRoom2):
    pass


class MediaInsightsRequestItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishDemographicsDataset: UnpublishDemographicsDataset1


class UnpublishEmbeddingsDataset1(RetrieveDataRoom2):
    pass


class MediaInsightsRequestItem7(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishEmbeddingsDataset: UnpublishEmbeddingsDataset1


class UnpublishSegmentsDataset1(RetrieveDataRoom2):
    pass


class MediaInsightsRequestItem8(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishSegmentsDataset: UnpublishSegmentsDataset1


class RetrievePublishedDatasets2(RetrieveDataRoom2):
    pass


class MediaInsightsRequestItem9(BaseModel):
    class Config:
        extra = Extra.forbid

    retrievePublishedDatasets: RetrievePublishedDatasets2


class ComputeInsights1(BaseModel):
    class Config:
        extra = Extra.forbid

    dataRoomIdHex: str
    scopeIdHex: str


class MediaInsightsRequestItem10(BaseModel):
    class Config:
        extra = Extra.forbid

    computeInsights: ComputeInsights1


class PublishDemographicsDataset1(PublishAdvertiserDataset1):
    pass


class MediaInsightsRequestItem11(BaseModel):
    class Config:
        extra = Extra.forbid

    publishDemographicsDataset: PublishDemographicsDataset1


class PublishSegmentsDataset1(PublishAdvertiserDataset1):
    pass


class MediaInsightsRequestItem12(BaseModel):
    class Config:
        extra = Extra.forbid

    publishSegmentsDataset: PublishSegmentsDataset1


class PublishEmbeddingsDataset1(PublishAdvertiserDataset1):
    pass


class MediaInsightsRequestItem13(BaseModel):
    class Config:
        extra = Extra.forbid

    publishEmbeddingsDataset: PublishEmbeddingsDataset1


class PublishActivatedAudiencesConfig1(PublishAdvertiserDataset1):
    pass


class MediaInsightsRequestItem14(BaseModel):
    class Config:
        extra = Extra.forbid

    publishActivatedAudiencesConfig: PublishActivatedAudiencesConfig1


class UnpublishActivatedAudiencesConfig1(RetrieveDataRoom2):
    pass


class MediaInsightsRequestItem15(BaseModel):
    class Config:
        extra = Extra.forbid

    unpublishActivatedAudiencesConfig: UnpublishActivatedAudiencesConfig1


class ComputeAvailableAudiences1(ComputeInsights1):
    pass


class MediaInsightsRequestItem16(BaseModel):
    class Config:
        extra = Extra.forbid

    computeAvailableAudiences: ComputeAvailableAudiences1


class ComputeOverlapStatistics1(ComputeInsights1):
    pass


class MediaInsightsRequestItem17(BaseModel):
    class Config:
        extra = Extra.forbid

    computeOverlapStatistics: ComputeOverlapStatistics1


class GetAudiencesForPublisher1(ComputeInsights1):
    pass


class MediaInsightsRequestItem19(BaseModel):
    class Config:
        extra = Extra.forbid

    getAudiencesForPublisher: GetAudiencesForPublisher1


class GetAudiencesForAdvertiser1(ComputeInsights1):
    pass


class MediaInsightsRequestItem20(BaseModel):
    class Config:
        extra = Extra.forbid

    getAudiencesForAdvertiser: GetAudiencesForAdvertiser1


class IngestAudiencesReport2(ComputeInsights1):
    pass


class MediaInsightsRequestItem21(BaseModel):
    class Config:
        extra = Extra.forbid

    ingestAudiencesReport: IngestAudiencesReport2


class RetrieveModelQualityReport2(ComputeInsights1):
    pass


class MediaInsightsRequestItem22(BaseModel):
    class Config:
        extra = Extra.forbid

    retrieveModelQualityReport: RetrieveModelQualityReport2


class EnclaveSpecificationV03(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType3(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm3(Enum):
    SHA256_HEX = 'SHA256_HEX'


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class RequestedAudiencePayload(BaseModel):
    class Config:
        extra = Extra.forbid

    activation_type: str
    audience_type: str
    reach: Optional[Optional[float]] = None


class Type12(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValueItem12(BaseModel):
    type: Type12


class Type13(Enum):
    DATASET = 'DATASET'


class RequirementFlagValueItem13(BaseModel):
    type: Type13


class Type14(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValueItem14(BaseModel):
    type: Type14
    value: str


class RequirementFlagValue(BaseModel):
    __root__: Union[
        RequirementFlagValueItem12,
        RequirementFlagValueItem13,
        RequirementFlagValueItem14,
    ]


class GetAudienceUserList1(BaseModel):
    class Config:
        extra = Extra.forbid

    dataRoomIdHex: str
    requestedAudience: RequestedAudiencePayload
    scopeIdHex: str


class MediaInsightsRequestItem18(BaseModel):
    class Config:
        extra = Extra.forbid

    getAudienceUserList: GetAudienceUserList1


class KnownOrUnknownRequirementFlagValue4(BaseModel):
    __root__: Optional[RequirementFlagValue]


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(BaseModel):
    details: KnownOrUnknownRequirementFlagValue4
    name: str


class RequirementOpItem7(BaseModel):
    class Config:
        extra = Extra.forbid

    contains: RequirementFlag


class MediaInsightsComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV03
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm3]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType3
    modelEvaluation: Optional[Optional[ModelEvaluationConfig]] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV03
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class MediaInsightsComputeItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: MediaInsightsComputeV0


class MediaInsightsCompute1(BaseModel):
    __root__: MediaInsightsComputeItem1


class MediaInsightsComputeOrUnknown1(BaseModel):
    __root__: Optional[MediaInsightsCompute1]


class PublishDataRoom2(BaseModel):
    class Config:
        extra = Extra.forbid

    dataRoom: MediaInsightsDcr
    requirePassword: bool
    showOrganizationLogo: bool


class MediaInsightsRequestItem(BaseModel):
    class Config:
        extra = Extra.forbid

    publishDataRoom: PublishDataRoom2


class MediaInsightsRequest(BaseModel):
    __root__: Union[
        MediaInsightsRequestItem,
        MediaInsightsRequestItem1,
        MediaInsightsRequestItem2,
        MediaInsightsRequestItem3,
        MediaInsightsRequestItem4,
        MediaInsightsRequestItem5,
        MediaInsightsRequestItem6,
        MediaInsightsRequestItem7,
        MediaInsightsRequestItem8,
        MediaInsightsRequestItem9,
        MediaInsightsRequestItem10,
        MediaInsightsRequestItem11,
        MediaInsightsRequestItem12,
        MediaInsightsRequestItem13,
        MediaInsightsRequestItem14,
        MediaInsightsRequestItem15,
        MediaInsightsRequestItem16,
        MediaInsightsRequestItem17,
        MediaInsightsRequestItem18,
        MediaInsightsRequestItem19,
        MediaInsightsRequestItem20,
        MediaInsightsRequestItem21,
        MediaInsightsRequestItem22,
    ] = Field(..., title='MediaInsightsRequest')


class ConsumerRequirements1(BaseModel):
    optional: Sequence[RequirementFlag]
    required: Optional[Optional[RequirementOp]] = None


class MediaInsightsDcrItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: MediaInsightsDcrInner


class MediaInsightsDcr(BaseModel):
    __root__: MediaInsightsDcrItem1


class MediaInsightsDcrInner(BaseModel):
    compute: MediaInsightsComputeOrUnknown1
    consumes: ConsumerRequirements1
    features: Sequence[str]


class RequirementOpItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    or_: Sequence[RequirementOp] = Field(..., alias='or')


class RequirementOpItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    and_: Sequence[RequirementOp] = Field(..., alias='and')


class RequirementOpItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    exclusiveOr: Sequence[RequirementOp]


class RequirementOp(BaseModel):
    __root__: Union[
        RequirementOpItem4, RequirementOpItem5, RequirementOpItem6, RequirementOpItem7
    ]


PublishDataRoom2.update_forward_refs()
ConsumerRequirements1.update_forward_refs()
MediaInsightsDcrItem1.update_forward_refs()
RequirementOpItem4.update_forward_refs()
RequirementOpItem5.update_forward_refs()
RequirementOpItem6.update_forward_refs()
