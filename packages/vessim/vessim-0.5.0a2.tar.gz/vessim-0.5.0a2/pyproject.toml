[tool.poetry]
name = "vessim"
version = "0" # Poetry requires a version configuration to be present. The poetry-version-plugin extracts the correct version from the git-tag.
description = "A simulator for carbon-aware applications and systems."
keywords = ["simulation", "energy system", "testbed", "carbon-aware computing", "software-in-the-loop"]
authors = ["Philipp Wiesner <wiesner@tu-berlin.de>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/dos-group/vessim"
repository = "https://github.com/dos-group/vessim"
documentation = "https://github.com/dos-group/vessim"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Testing",
  "Topic :: Education",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
]

[tool.poetry-version-plugin]
source = "git-tag"

[tool.poetry.urls]
"Bug Reports" = "https://github.com/dos-group/vessim/issues"

[tool.poetry.dependencies]
python = ">=3.8,<3.13"
numpy = [
    { version = "^1.22", python = "<3.12" },
    { version = "^1.26", python = ">=3.12" }
]

# Mandatory dependencies
pandas = "*"
mosaik = "*"
mosaik-api = "*"
loguru = "*"

# Optional dependencies (software-in-the-loop)
requests = {version = "*", optional = true}
fastapi = {version = "*", optional = true}
docker = {version = "*", optional = true}
redis = {version = "*", optional = true}
uvicorn = {version = "*", optional = true}

# Optional dependencies (development)
pytest = {version = "*", optional = true}
mypy = {version = "*", optional = true}
types-psutil = {version = "*", optional = true}
pandas-stubs = {version = "*", optional = true}
types-requests = {version = "*", optional = true}
black = {version = "*", optional = true}
ruff = {version = "*", optional = true}

# Optional dependencies (documentation)
furo = {version = "*", optional = true}
sphinx-copybutton = {version = "*", optional = true}

[tool.poetry.extras]
sil = ["requests", "fastapi", "docker", "redis", "uvicorn"]
dev = ["pytest", "mypy", "types-psutil", "pandas-stubs", "types-requests", "black", "ruff"]
docs = ["furo", "sphinx-copybutton"]

[build-system]
requires = ["setuptools", "poetry-core>=1.1.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 99  # Set the maximum characters per line
target-version = ['py38']   # Set python versions that black should format the code for
include = '\.py$'  # Format only python files

[tool.ruff]
# Enable Ruff to check for issues (https://beta.ruff.rs/docs/rules)
select = [
  "E", "W",  # pycodestyle (error and warning)
  "D",  # docstrings
  "F",  # Pyflakes
  "N",  # variable naming
  #  "B",  # flake8-bugbear
]

# For now the following rules are disabled:
#   D100: Missing docstring in public module
#   D101: Missing docstring in public class
#   D102: Missing docstring in public method
#   D103: Missing docstring in public function
#   D107: Missing docstring in __init__
ignore = ["D100", "D101", "D102", "D103", "D107", "E722"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["D", "E", "W"]
unfixable = ["F"]

line-length = 99  # Set the maximum characters per line (similar to black)
target-version = "py38"  # Set python version for linting (similar to black)
include = ["*.py"]  # Only enable linting for python files (similar to black)

# Configure Ruff to enforce Google-style docstrings when checking documentation
[tool.ruff.pydocstyle]
convention = "google"

# Configure mypy to ignore missing imports
[mypy]
ignore_missing_imports = true
