# Generated from vbaParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,267,3898,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,1,0,1,0,1,0,1,1,5,1,687,8,1,10,1,12,1,690,9,1,1,1,1,1,1,1,
        1,1,3,1,696,8,1,1,1,5,1,699,8,1,10,1,12,1,702,9,1,1,1,3,1,705,8,
        1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,715,8,3,1,4,1,4,1,4,1,4,1,
        4,1,4,3,4,723,8,4,1,4,5,4,726,8,4,10,4,12,4,729,9,4,1,4,4,4,732,
        8,4,11,4,12,4,733,1,4,1,4,1,4,1,5,1,5,3,5,741,8,5,1,5,1,5,3,5,745,
        8,5,1,5,3,5,748,8,5,1,5,1,5,1,5,3,5,753,8,5,1,5,5,5,756,8,5,10,5,
        12,5,759,9,5,1,6,1,6,5,6,763,8,6,10,6,12,6,766,9,6,1,6,1,6,1,7,1,
        7,5,7,772,8,7,10,7,12,7,775,9,7,1,7,1,7,1,8,5,8,780,8,8,10,8,12,
        8,783,9,8,1,8,1,8,3,8,787,8,8,1,8,1,8,3,8,791,8,8,1,8,1,8,3,8,795,
        8,8,1,8,1,8,1,9,4,9,800,8,9,11,9,12,9,801,1,9,1,9,4,9,806,8,9,11,
        9,12,9,807,1,9,3,9,811,8,9,1,10,1,10,3,10,815,8,10,1,10,1,10,3,10,
        819,8,10,1,10,1,10,3,10,823,8,10,1,10,1,10,1,10,3,10,828,8,10,1,
        10,1,10,3,10,832,8,10,1,10,1,10,3,10,836,8,10,1,10,1,10,1,10,3,10,
        841,8,10,1,10,1,10,3,10,845,8,10,1,10,1,10,3,10,849,8,10,1,10,1,
        10,1,10,3,10,854,8,10,1,10,1,10,3,10,858,8,10,1,10,1,10,3,10,862,
        8,10,1,10,1,10,1,10,3,10,867,8,10,1,10,1,10,3,10,871,8,10,1,10,1,
        10,3,10,875,8,10,1,10,1,10,1,10,3,10,880,8,10,1,10,1,10,3,10,884,
        8,10,1,10,1,10,3,10,888,8,10,1,10,3,10,891,8,10,1,11,3,11,894,8,
        11,1,11,5,11,897,8,11,10,11,12,11,900,9,11,1,11,1,11,1,12,3,12,905,
        8,12,1,12,1,12,1,13,1,13,3,13,911,8,13,1,14,1,14,3,14,915,8,14,1,
        15,1,15,1,16,4,16,920,8,16,11,16,12,16,921,1,16,1,16,4,16,926,8,
        16,11,16,12,16,927,1,16,4,16,931,8,16,11,16,12,16,932,1,16,1,16,
        5,16,937,8,16,10,16,12,16,940,9,16,1,16,4,16,943,8,16,11,16,12,16,
        944,1,16,1,16,1,16,1,16,1,16,5,16,952,8,16,10,16,12,16,955,9,16,
        3,16,957,8,16,1,17,1,17,4,17,961,8,17,11,17,12,17,962,4,17,965,8,
        17,11,17,12,17,966,1,17,1,17,4,17,971,8,17,11,17,12,17,972,5,17,
        975,8,17,10,17,12,17,978,9,17,1,17,1,17,1,17,1,17,4,17,984,8,17,
        11,17,12,17,985,5,17,988,8,17,10,17,12,17,991,9,17,3,17,993,8,17,
        1,18,1,18,1,18,3,18,998,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,3,19,1008,8,19,1,20,1,20,1,20,3,20,1013,8,20,1,21,1,21,1,21,
        1,21,3,21,1019,8,21,1,22,1,22,1,22,1,22,3,22,1025,8,22,1,23,1,23,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,5,27,1056,8,27,10,27,12,27,1059,9,27,1,28,1,28,1,28,3,28,1064,
        8,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,32,1,32,
        1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,
        1,37,1,37,1,37,1,37,1,37,3,37,1096,8,37,1,38,1,38,3,38,1100,8,38,
        1,39,1,39,1,39,1,39,1,40,1,40,1,40,3,40,1109,8,40,1,40,1,40,1,40,
        1,41,1,41,1,41,1,41,1,41,3,41,1119,8,41,1,41,1,41,1,42,1,42,3,42,
        1125,8,42,1,42,3,42,1128,8,42,1,42,1,42,3,42,1132,8,42,1,42,1,42,
        3,42,1136,8,42,5,42,1138,8,42,10,42,12,42,1141,9,42,1,43,1,43,3,
        43,1145,8,43,1,43,1,43,3,43,1149,8,43,1,43,5,43,1152,8,43,10,43,
        12,43,1155,9,43,1,44,1,44,3,44,1159,8,44,1,45,1,45,3,45,1163,8,45,
        1,45,3,45,1166,8,45,1,46,1,46,3,46,1170,8,46,1,46,1,46,3,46,1174,
        8,46,1,47,1,47,1,47,1,47,3,47,1180,8,47,1,48,1,48,3,48,1184,8,48,
        1,49,1,49,1,49,1,49,1,49,1,49,3,49,1192,8,49,1,49,1,49,1,50,1,50,
        1,51,1,51,3,51,1200,8,51,1,51,3,51,1203,8,51,1,51,3,51,1206,8,51,
        1,51,1,51,1,52,1,52,3,52,1212,8,52,1,52,1,52,3,52,1216,8,52,1,52,
        5,52,1219,8,52,10,52,12,52,1222,9,52,1,53,3,53,1225,8,53,1,53,3,
        53,1228,8,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,56,1,
        56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,3,58,1251,8,
        58,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,3,60,1261,8,60,1,61,1,
        61,1,62,1,62,1,62,1,62,1,63,1,63,3,63,1271,8,63,1,63,1,63,1,64,1,
        64,1,65,1,65,1,65,1,65,1,66,1,66,3,66,1283,8,66,1,66,1,66,3,66,1287,
        8,66,1,66,5,66,1290,8,66,10,66,12,66,1293,9,66,1,67,1,67,3,67,1297,
        8,67,1,68,1,68,3,68,1301,8,68,1,68,1,68,3,68,1305,8,68,1,68,1,68,
        1,69,1,69,1,69,1,69,3,69,1313,8,69,1,69,3,69,1316,8,69,1,69,1,69,
        3,69,1320,8,69,1,69,1,69,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,
        1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,4,73,1340,8,73,11,73,12,
        73,1341,1,73,1,73,4,73,1346,8,73,11,73,12,73,1347,1,73,1,73,1,73,
        1,73,1,74,1,74,1,74,1,74,5,74,1358,8,74,10,74,12,74,1361,9,74,1,
        75,1,75,3,75,1365,8,75,1,76,1,76,3,76,1369,8,76,1,77,1,77,1,77,1,
        78,1,78,1,78,1,78,1,79,3,79,1379,8,79,1,79,1,79,1,79,1,80,1,80,1,
        80,1,80,1,80,1,80,1,80,1,80,3,80,1392,8,80,1,81,1,81,1,81,1,81,1,
        82,1,82,3,82,1400,8,82,1,82,1,82,1,83,1,83,1,83,1,83,1,84,1,84,1,
        84,1,84,4,84,1412,8,84,11,84,12,84,1413,1,84,1,84,4,84,1418,8,84,
        11,84,12,84,1419,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,5,85,1430,
        8,85,10,85,12,85,1433,9,85,1,86,1,86,3,86,1437,8,86,1,87,1,87,3,
        87,1441,8,87,1,87,1,87,3,87,1445,8,87,1,87,3,87,1448,8,87,1,88,1,
        88,3,88,1452,8,88,1,88,1,88,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,
        90,3,90,1464,8,90,1,90,1,90,3,90,1468,8,90,1,91,1,91,1,91,1,91,1,
        91,1,91,1,91,1,91,3,91,1478,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,
        92,1,92,3,92,1488,8,92,1,92,1,92,1,92,3,92,1493,8,92,1,93,1,93,1,
        93,1,93,3,93,1499,8,93,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,
        96,1,96,1,96,1,96,1,97,3,97,1514,8,97,1,97,1,97,1,97,1,97,1,97,3,
        97,1521,8,97,1,98,1,98,3,98,1525,8,98,1,98,3,98,1528,8,98,1,98,3,
        98,1531,8,98,1,98,1,98,1,99,1,99,5,99,1537,8,99,10,99,12,99,1540,
        9,99,5,99,1542,8,99,10,99,12,99,1545,9,99,1,100,1,100,5,100,1549,
        8,100,10,100,12,100,1552,9,100,5,100,1554,8,100,10,100,12,100,1557,
        9,100,1,101,1,101,1,102,1,102,3,102,1563,8,102,1,103,1,103,3,103,
        1567,8,103,1,104,1,104,1,104,1,104,3,104,1573,8,104,1,105,1,105,
        1,105,3,105,1578,8,105,1,105,1,105,1,105,3,105,1583,8,105,1,105,
        1,105,1,105,1,105,3,105,1589,8,105,1,105,3,105,1592,8,105,1,105,
        1,105,1,105,1,105,3,105,1598,8,105,1,105,3,105,1601,8,105,1,105,
        3,105,1604,8,105,1,105,1,105,3,105,1608,8,105,1,105,3,105,1611,8,
        105,1,105,3,105,1614,8,105,1,105,4,105,1617,8,105,11,105,12,105,
        1618,1,105,1,105,1,105,1,105,1,105,1,106,1,106,1,106,3,106,1629,
        8,106,1,106,1,106,1,106,3,106,1634,8,106,1,106,1,106,1,106,1,106,
        3,106,1640,8,106,1,106,3,106,1643,8,106,1,106,3,106,1646,8,106,1,
        106,3,106,1649,8,106,1,106,1,106,1,106,1,106,3,106,1655,8,106,1,
        106,3,106,1658,8,106,1,106,3,106,1661,8,106,1,106,3,106,1664,8,106,
        1,106,3,106,1667,8,106,1,106,1,106,3,106,1671,8,106,1,106,3,106,
        1674,8,106,1,106,3,106,1677,8,106,1,106,4,106,1680,8,106,11,106,
        12,106,1681,1,106,1,106,1,106,1,106,1,106,1,107,1,107,1,107,3,107,
        1692,8,107,1,107,1,107,1,107,3,107,1697,8,107,1,107,1,107,1,107,
        1,107,1,107,1,107,3,107,1705,8,107,1,107,3,107,1708,8,107,1,107,
        3,107,1711,8,107,1,107,3,107,1714,8,107,1,107,1,107,1,107,1,107,
        1,107,1,107,3,107,1722,8,107,1,107,3,107,1725,8,107,1,107,3,107,
        1728,8,107,1,107,3,107,1731,8,107,1,107,1,107,3,107,1735,8,107,1,
        107,3,107,1738,8,107,1,107,3,107,1741,8,107,1,107,4,107,1744,8,107,
        11,107,12,107,1745,1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,
        3,108,1756,8,108,1,108,1,108,1,108,3,108,1761,8,108,1,108,1,108,
        1,108,1,108,1,108,1,108,3,108,1769,8,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,3,108,1780,8,108,1,108,1,108,3,108,
        1784,8,108,1,108,3,108,1787,8,108,1,108,3,108,1790,8,108,1,108,4,
        108,1793,8,108,11,108,12,108,1794,1,108,1,108,1,108,1,108,1,108,
        1,109,5,109,1803,8,109,10,109,12,109,1806,9,109,1,109,1,109,1,109,
        1,110,3,110,1812,8,110,1,110,1,110,3,110,1816,8,110,1,110,1,110,
        3,110,1820,8,110,1,110,1,110,3,110,1824,8,110,1,110,3,110,1827,8,
        110,1,111,1,111,1,112,1,112,1,113,1,113,1,114,1,114,3,114,1837,8,
        114,1,115,1,115,1,115,3,115,1842,8,115,1,116,1,116,1,116,3,116,1847,
        8,116,1,117,1,117,1,117,1,117,3,117,1853,8,117,1,117,3,117,1856,
        8,117,1,118,1,118,3,118,1860,8,118,1,118,1,118,1,119,1,119,3,119,
        1866,8,119,1,119,3,119,1869,8,119,1,119,3,119,1872,8,119,1,119,1,
        119,1,120,1,120,3,120,1878,8,120,1,120,1,120,3,120,1882,8,120,1,
        120,1,120,3,120,1886,8,120,3,120,1888,8,120,1,120,1,120,3,120,1892,
        8,120,1,120,1,120,1,121,1,121,3,121,1898,8,121,1,121,1,121,3,121,
        1902,8,121,1,121,1,121,1,121,1,121,3,121,1908,8,121,1,121,1,121,
        3,121,1912,8,121,1,121,3,121,1915,8,121,1,121,1,121,3,121,1919,8,
        121,1,122,1,122,3,122,1923,8,122,1,122,1,122,3,122,1927,8,122,1,
        122,5,122,1930,8,122,10,122,12,122,1933,9,122,1,123,1,123,3,123,
        1937,8,123,1,123,1,123,3,123,1941,8,123,1,123,5,123,1944,8,123,10,
        123,12,123,1947,9,123,1,124,1,124,1,125,1,125,1,125,3,125,1954,8,
        125,1,125,1,125,1,126,1,126,1,126,1,126,3,126,1962,8,126,1,126,3,
        126,1965,8,126,1,127,1,127,1,127,1,127,1,127,3,127,1972,8,127,1,
        127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,1982,8,127,3,
        127,1984,8,127,1,128,1,128,3,128,1988,8,128,1,129,1,129,3,129,1992,
        8,129,1,130,1,130,3,130,1996,8,130,1,131,1,131,1,131,1,131,3,131,
        2002,8,131,1,131,1,131,1,131,1,131,3,131,2008,8,131,1,132,1,132,
        1,133,3,133,2013,8,133,1,133,1,133,1,133,1,133,1,133,3,133,2020,
        8,133,1,134,1,134,3,134,2024,8,134,1,134,1,134,1,135,1,135,1,136,
        1,136,1,137,1,137,1,138,1,138,1,139,4,139,2037,8,139,11,139,12,139,
        2038,1,140,5,140,2042,8,140,10,140,12,140,2045,9,140,1,140,1,140,
        1,140,1,140,4,140,2051,8,140,11,140,12,140,2052,1,140,1,140,1,140,
        1,140,5,140,2059,8,140,10,140,12,140,2062,9,140,1,140,1,140,1,140,
        3,140,2067,8,140,1,141,1,141,4,141,2071,8,141,11,141,12,141,2072,
        1,141,1,141,1,141,4,141,2078,8,141,11,141,12,141,2079,1,141,1,141,
        1,141,4,141,2085,8,141,11,141,12,141,2086,1,141,1,141,3,141,2091,
        8,141,1,142,1,142,1,142,1,142,1,142,3,142,2098,8,142,3,142,2100,
        8,142,1,143,1,143,3,143,2104,8,143,1,144,1,144,3,144,2108,8,144,
        1,144,1,144,3,144,2112,8,144,1,144,3,144,2115,8,144,1,145,1,145,
        1,146,1,146,1,147,1,147,1,148,5,148,2124,8,148,10,148,12,148,2127,
        9,148,1,148,4,148,2130,8,148,11,148,12,148,2131,1,148,1,148,1,148,
        4,148,2137,8,148,11,148,12,148,2138,1,148,1,148,3,148,2143,8,148,
        1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,
        1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,3,149,2165,
        8,149,1,150,1,150,1,150,1,150,1,150,1,150,3,150,2173,8,150,1,150,
        1,150,1,150,3,150,2178,8,150,1,150,1,150,1,150,3,150,2183,8,150,
        3,150,2185,8,150,1,151,1,151,1,151,1,151,3,151,2191,8,151,1,151,
        4,151,2194,8,151,11,151,12,151,2195,1,151,1,151,1,152,1,152,3,152,
        2202,8,152,1,153,1,153,3,153,2206,8,153,1,153,4,153,2209,8,153,11,
        153,12,153,2210,1,153,1,153,1,154,1,154,3,154,2217,8,154,1,154,4,
        154,2220,8,154,11,154,12,154,2221,1,154,1,154,1,154,3,154,2227,8,
        154,1,154,1,154,3,154,2231,8,154,1,154,1,154,1,154,1,155,1,155,3,
        155,2238,8,155,1,156,1,156,1,156,1,156,3,156,2244,8,156,1,156,1,
        156,3,156,2248,8,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,
        156,3,156,2258,8,156,1,157,1,157,1,158,1,158,1,159,1,159,1,159,1,
        159,1,160,1,160,1,161,1,161,3,161,2272,8,161,1,162,1,162,3,162,2276,
        8,162,1,162,4,162,2279,8,162,11,162,12,162,2280,1,162,1,162,1,163,
        1,163,3,163,2287,8,163,1,163,1,163,1,163,1,163,3,163,2293,8,163,
        1,163,1,163,3,163,2297,8,163,1,163,1,163,1,163,1,164,1,164,1,164,
        1,164,3,164,2306,8,164,1,164,1,164,3,164,2310,8,164,1,164,1,164,
        3,164,2314,8,164,1,164,1,164,1,165,1,165,1,166,1,166,1,166,1,166,
        1,167,1,167,3,167,2326,8,167,1,167,3,167,2329,8,167,1,167,3,167,
        2332,8,167,1,167,4,167,2335,8,167,11,167,12,167,2336,1,167,1,167,
        3,167,2341,8,167,1,167,3,167,2344,8,167,1,168,1,168,3,168,2348,8,
        168,1,169,1,169,3,169,2352,8,169,1,169,1,169,1,170,1,170,3,170,2358,
        8,170,1,170,1,170,1,171,1,171,1,171,1,171,1,172,1,172,3,172,2368,
        8,172,1,172,1,172,3,172,2372,8,172,1,172,1,172,3,172,2376,8,172,
        1,172,5,172,2379,8,172,10,172,12,172,2382,9,172,1,172,3,172,2385,
        8,172,1,172,4,172,2388,8,172,11,172,12,172,2389,1,172,1,172,1,172,
        1,172,1,172,3,172,2397,8,172,1,173,5,173,2400,8,173,10,173,12,173,
        2403,9,173,1,173,1,173,1,173,3,173,2408,8,173,1,173,1,173,3,173,
        2412,8,173,1,173,1,173,3,173,2416,8,173,1,173,3,173,2419,8,173,1,
        173,5,173,2422,8,173,10,173,12,173,2425,9,173,1,173,1,173,3,173,
        2429,8,173,1,173,1,173,3,173,2433,8,173,1,173,1,173,3,173,2437,8,
        173,3,173,2439,8,173,1,174,1,174,1,174,3,174,2444,8,174,1,174,3,
        174,2447,8,174,1,174,3,174,2450,8,174,1,175,1,175,3,175,2454,8,175,
        1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,
        2466,8,176,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,178,
        1,178,3,178,2478,8,178,1,178,3,178,2481,8,178,1,179,1,179,1,179,
        3,179,2486,8,179,1,179,3,179,2489,8,179,5,179,2491,8,179,10,179,
        12,179,2494,9,179,1,179,3,179,2497,8,179,1,179,1,179,1,179,3,179,
        2502,8,179,1,179,3,179,2505,8,179,5,179,2507,8,179,10,179,12,179,
        2510,9,179,3,179,2512,8,179,1,180,1,180,1,180,1,180,3,180,2518,8,
        180,1,181,1,181,1,181,1,181,1,181,1,181,5,181,2526,8,181,10,181,
        12,181,2529,9,181,1,181,3,181,2532,8,181,1,181,4,181,2535,8,181,
        11,181,12,181,2536,1,181,1,181,1,181,1,181,1,182,4,182,2544,8,182,
        11,182,12,182,2545,1,182,1,182,3,182,2550,8,182,1,182,1,182,3,182,
        2554,8,182,1,182,1,182,3,182,2558,8,182,1,182,5,182,2561,8,182,10,
        182,12,182,2564,9,182,1,182,3,182,2567,8,182,1,183,4,183,2570,8,
        183,11,183,12,183,2571,1,183,1,183,1,183,1,183,3,183,2578,8,183,
        1,184,1,184,1,184,3,184,2583,8,184,1,184,1,184,3,184,2587,8,184,
        1,184,1,184,1,184,3,184,2592,8,184,1,184,1,184,1,184,1,184,3,184,
        2598,8,184,1,185,1,185,1,186,1,186,1,187,1,187,1,188,1,188,1,188,
        1,188,1,188,3,188,2611,8,188,1,188,1,188,1,188,1,189,1,189,3,189,
        2618,8,189,1,189,1,189,1,189,1,189,1,189,1,190,1,190,1,190,1,190,
        1,190,3,190,2630,8,190,1,190,1,190,1,190,1,191,1,191,1,192,1,192,
        3,192,2639,8,192,1,192,1,192,3,192,2643,8,192,1,192,1,192,1,192,
        1,192,1,193,1,193,1,193,1,193,1,194,1,194,1,194,1,194,1,195,1,195,
        1,195,1,195,1,196,1,196,3,196,2663,8,196,1,196,1,196,3,196,2667,
        8,196,1,196,1,196,3,196,2671,8,196,1,196,1,196,3,196,2675,8,196,
        1,196,1,196,3,196,2679,8,196,1,197,1,197,3,197,2683,8,197,1,197,
        1,197,3,197,2687,8,197,1,197,5,197,2690,8,197,10,197,12,197,2693,
        9,197,3,197,2695,8,197,1,198,1,198,1,199,1,199,3,199,2701,8,199,
        1,199,1,199,3,199,2705,8,199,1,199,4,199,2708,8,199,11,199,12,199,
        2709,1,199,1,199,1,199,1,199,1,200,1,200,1,200,1,200,1,200,1,200,
        1,200,1,200,1,200,1,200,3,200,2726,8,200,1,201,1,201,3,201,2730,
        8,201,1,201,3,201,2733,8,201,1,201,3,201,2736,8,201,1,201,1,201,
        1,202,1,202,1,202,1,202,1,203,1,203,1,204,1,204,1,204,1,204,3,204,
        2750,8,204,1,204,3,204,2753,8,204,1,204,1,204,1,205,1,205,3,205,
        2759,8,205,1,205,1,205,3,205,2763,8,205,1,205,5,205,2766,8,205,10,
        205,12,205,2769,9,205,1,206,1,206,3,206,2773,8,206,1,207,1,207,1,
        207,1,208,1,208,3,208,2780,8,208,1,208,1,208,1,209,1,209,3,209,2786,
        8,209,1,209,1,209,3,209,2790,8,209,1,209,1,209,1,210,1,210,3,210,
        2796,8,210,1,210,1,210,3,210,2800,8,210,1,210,5,210,2803,8,210,10,
        210,12,210,2806,9,210,1,211,1,211,1,211,3,211,2811,8,211,1,211,1,
        211,1,212,1,212,3,212,2817,8,212,1,212,1,212,1,213,1,213,1,214,1,
        214,3,214,2825,8,214,1,214,3,214,2828,8,214,1,215,1,215,3,215,2832,
        8,215,1,215,1,215,1,216,1,216,3,216,2838,8,216,1,216,1,216,3,216,
        2842,8,216,1,216,5,216,2845,8,216,10,216,12,216,2848,9,216,1,217,
        1,217,1,218,1,218,3,218,2854,8,218,1,218,1,218,3,218,2858,8,218,
        1,218,1,218,3,218,2862,8,218,1,218,1,218,3,218,2866,8,218,1,218,
        1,218,3,218,2870,8,218,1,218,1,218,3,218,2874,8,218,1,218,3,218,
        2877,8,218,1,218,1,218,3,218,2881,8,218,1,218,1,218,3,218,2885,8,
        218,1,218,1,218,1,219,1,219,1,220,1,220,1,221,1,221,1,222,1,222,
        1,223,1,223,3,223,2899,8,223,1,223,1,223,3,223,2903,8,223,1,223,
        1,223,3,223,2907,8,223,1,223,1,223,1,224,1,224,3,224,2913,8,224,
        1,224,1,224,3,224,2917,8,224,1,224,1,224,3,224,2921,8,224,1,224,
        1,224,1,225,1,225,3,225,2927,8,225,1,225,1,225,3,225,2931,8,225,
        1,225,1,225,3,225,2935,8,225,1,225,1,225,1,226,1,226,1,226,1,226,
        3,226,2943,8,226,1,226,1,226,3,226,2947,8,226,1,226,1,226,1,227,
        1,227,1,227,3,227,2954,8,227,1,228,1,228,1,228,1,228,3,228,2960,
        8,228,1,228,1,228,1,229,1,229,1,229,1,229,1,229,1,229,3,229,2970,
        8,229,1,229,3,229,2973,8,229,1,230,1,230,3,230,2977,8,230,1,230,
        1,230,3,230,2981,8,230,1,231,1,231,1,231,1,231,1,232,1,232,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        3,233,3001,8,233,1,234,1,234,3,234,3005,8,234,1,234,1,234,3,234,
        3009,8,234,1,234,3,234,3012,8,234,1,234,3,234,3015,8,234,1,234,3,
        234,3018,8,234,1,234,3,234,3021,8,234,1,234,3,234,3024,8,234,1,234,
        3,234,3027,8,234,1,234,1,234,3,234,3031,8,234,1,234,1,234,3,234,
        3035,8,234,1,234,3,234,3038,8,234,1,235,1,235,1,236,1,236,3,236,
        3044,8,236,1,236,1,236,1,237,1,237,1,238,1,238,1,238,1,239,1,239,
        1,239,1,239,1,239,1,239,3,239,3059,8,239,1,240,1,240,1,240,1,240,
        1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
        3,240,3076,8,240,1,241,1,241,1,241,1,241,1,241,1,241,1,242,1,242,
        1,243,1,243,3,243,3088,8,243,1,244,1,244,1,244,1,245,1,245,1,246,
        1,246,1,246,3,246,3098,8,246,1,246,3,246,3101,8,246,3,246,3103,8,
        246,1,247,1,247,3,247,3107,8,247,1,247,1,247,3,247,3111,8,247,1,
        247,5,247,3114,8,247,10,247,12,247,3117,9,247,1,248,1,248,1,248,
        1,248,3,248,3123,8,248,1,248,1,248,3,248,3127,8,248,1,248,1,248,
        1,249,1,249,1,250,1,250,1,250,1,250,3,250,3137,8,250,1,250,1,250,
        3,250,3141,8,250,1,250,1,250,1,251,1,251,3,251,3147,8,251,1,251,
        1,251,1,251,1,251,1,251,3,251,3154,8,251,1,252,1,252,1,253,1,253,
        1,254,1,254,1,254,1,254,3,254,3164,8,254,1,254,1,254,3,254,3168,
        8,254,1,254,3,254,3171,8,254,1,255,1,255,1,255,1,255,1,255,1,255,
        3,255,3179,8,255,1,255,1,255,3,255,3183,8,255,1,255,1,255,1,256,
        1,256,1,257,1,257,1,257,1,257,3,257,3193,8,257,1,257,1,257,3,257,
        3197,8,257,1,257,1,257,1,258,1,258,1,259,1,259,1,259,1,259,3,259,
        3207,8,259,1,259,1,259,3,259,3211,8,259,1,259,3,259,3214,8,259,1,
        260,4,260,3217,8,260,11,260,12,260,3218,1,261,1,261,3,261,3223,8,
        261,1,261,3,261,3226,8,261,1,262,1,262,1,262,3,262,3231,8,262,1,
        263,1,263,1,264,1,264,1,265,1,265,1,265,1,265,3,265,3241,8,265,1,
        265,1,265,3,265,3245,8,265,1,265,1,265,1,266,1,266,1,267,1,267,1,
        267,1,267,3,267,3255,8,267,1,267,1,267,3,267,3259,8,267,1,267,1,
        267,1,268,1,268,1,269,1,269,1,269,1,269,3,269,3269,8,269,1,269,1,
        269,3,269,3273,8,269,1,269,3,269,3276,8,269,1,270,1,270,1,270,1,
        270,3,270,3282,8,270,1,270,1,270,3,270,3286,8,270,1,270,1,270,1,
        271,1,271,3,271,3292,8,271,1,271,1,271,3,271,3296,8,271,1,271,5,
        271,3299,8,271,10,271,12,271,3302,9,271,1,272,1,272,1,273,1,273,
        1,273,1,273,3,273,3310,8,273,1,273,1,273,3,273,3314,8,273,1,273,
        3,273,3317,8,273,1,273,3,273,3320,8,273,1,273,1,273,1,273,1,274,
        1,274,1,275,1,275,1,276,1,276,1,276,1,276,3,276,3333,8,276,1,276,
        1,276,3,276,3337,8,276,1,276,3,276,3340,8,276,1,276,3,276,3343,8,
        276,1,276,1,276,3,276,3347,8,276,1,276,1,276,1,277,1,277,1,278,1,
        278,1,278,1,278,1,278,1,278,3,278,3359,8,278,1,278,1,278,3,278,3363,
        8,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,
        1,278,1,278,1,278,1,278,3,278,3379,8,278,1,279,1,279,1,280,1,280,
        1,280,1,280,1,280,1,280,1,280,1,280,3,280,3391,8,280,1,280,1,280,
        3,280,3395,8,280,1,280,1,280,3,280,3399,8,280,1,280,1,280,1,280,
        3,280,3404,8,280,1,280,1,280,3,280,3408,8,280,1,280,1,280,1,280,
        3,280,3413,8,280,1,280,1,280,3,280,3417,8,280,1,280,1,280,1,280,
        3,280,3422,8,280,1,280,1,280,3,280,3426,8,280,1,280,1,280,1,280,
        3,280,3431,8,280,1,280,1,280,3,280,3435,8,280,1,280,1,280,1,280,
        3,280,3440,8,280,1,280,1,280,3,280,3444,8,280,1,280,1,280,1,280,
        3,280,3449,8,280,1,280,1,280,3,280,3453,8,280,1,280,5,280,3456,8,
        280,10,280,12,280,3459,9,280,1,281,1,281,1,281,1,281,3,281,3465,
        8,281,1,281,1,281,1,281,3,281,3470,8,281,1,281,1,281,1,281,3,281,
        3475,8,281,1,281,1,281,3,281,3479,8,281,1,281,1,281,3,281,3483,8,
        281,1,281,1,281,1,281,3,281,3488,8,281,1,281,1,281,3,281,3492,8,
        281,1,281,1,281,3,281,3496,8,281,1,281,1,281,1,281,1,281,1,281,1,
        281,1,281,3,281,3505,8,281,1,281,1,281,3,281,3509,8,281,1,281,1,
        281,1,281,1,281,3,281,3515,8,281,1,281,1,281,3,281,3519,8,281,1,
        281,1,281,3,281,3523,8,281,1,281,1,281,3,281,3527,8,281,1,281,5,
        281,3530,8,281,10,281,12,281,3533,9,281,1,282,1,282,1,282,1,282,
        1,282,1,282,1,282,1,282,3,282,3543,8,282,3,282,3545,8,282,1,283,
        1,283,3,283,3549,8,283,1,283,1,283,3,283,3553,8,283,1,283,1,283,
        1,284,1,284,3,284,3559,8,284,1,284,1,284,3,284,3563,8,284,1,284,
        1,284,3,284,3567,8,284,1,284,1,284,1,285,1,285,3,285,3573,8,285,
        1,285,1,285,1,286,1,286,3,286,3579,8,286,1,286,1,286,1,287,1,287,
        3,287,3585,8,287,1,287,1,287,1,288,1,288,1,288,3,288,3592,8,288,
        1,289,1,289,1,290,1,290,1,290,3,290,3599,8,290,1,290,1,290,1,290,
        1,290,3,290,3605,8,290,1,290,1,290,3,290,3609,8,290,1,290,1,290,
        3,290,3613,8,290,1,290,1,290,3,290,3617,8,290,1,291,1,291,3,291,
        3621,8,291,1,291,1,291,3,291,3625,8,291,1,291,1,291,3,291,3629,8,
        291,1,291,1,291,1,292,3,292,3634,8,292,1,293,1,293,3,293,3638,8,
        293,1,293,1,293,3,293,3642,8,293,5,293,3644,8,293,10,293,12,293,
        3647,9,293,1,293,1,293,1,293,3,293,3652,8,293,1,293,1,293,3,293,
        3656,8,293,5,293,3658,8,293,10,293,12,293,3661,9,293,1,293,3,293,
        3664,8,293,1,294,3,294,3667,8,294,1,295,1,295,1,296,1,296,3,296,
        3673,8,296,1,296,1,296,3,296,3677,8,296,1,296,5,296,3680,8,296,10,
        296,12,296,3683,9,296,1,297,1,297,3,297,3687,8,297,1,297,1,297,3,
        297,3691,8,297,1,297,1,297,1,298,1,298,3,298,3697,8,298,1,298,1,
        298,3,298,3701,8,298,1,299,1,299,1,299,1,299,1,299,1,299,3,299,3709,
        8,299,1,299,1,299,3,299,3713,8,299,1,299,1,299,1,299,1,299,1,299,
        3,299,3720,8,299,1,299,1,299,3,299,3724,8,299,1,299,1,299,3,299,
        3728,8,299,1,299,1,299,3,299,3732,8,299,1,299,1,299,3,299,3736,8,
        299,1,300,1,300,3,300,3740,8,300,1,301,1,301,1,301,1,302,1,302,1,
        302,1,303,1,303,1,304,1,304,1,305,1,305,1,306,1,306,1,307,1,307,
        1,308,1,308,1,309,1,309,3,309,3762,8,309,1,310,1,310,3,310,3766,
        8,310,1,311,1,311,1,311,1,312,1,312,3,312,3773,8,312,1,313,4,313,
        3776,8,313,11,313,12,313,3777,1,314,3,314,3781,8,314,1,314,1,314,
        1,314,3,314,3786,8,314,1,314,3,314,3789,8,314,1,315,3,315,3792,8,
        315,1,315,1,315,1,315,3,315,3797,8,315,1,316,1,316,3,316,3801,8,
        316,1,316,1,316,3,316,3805,8,316,4,316,3807,8,316,11,316,12,316,
        3808,1,317,1,317,3,317,3813,8,317,1,317,4,317,3816,8,317,11,317,
        12,317,3817,1,318,1,318,1,319,1,319,1,319,1,319,1,319,1,319,1,319,
        1,319,1,319,1,319,3,319,3832,8,319,1,320,1,320,3,320,3836,8,320,
        1,321,1,321,1,322,1,322,1,323,1,323,1,324,1,324,1,325,1,325,1,326,
        1,326,1,327,1,327,1,328,1,328,1,329,1,329,1,329,3,329,3857,8,329,
        1,330,1,330,1,331,1,331,1,332,1,332,1,333,1,333,1,334,1,334,1,335,
        1,335,1,335,1,335,1,336,1,336,1,337,1,337,1,337,1,337,1,337,1,337,
        1,337,1,337,1,337,3,337,3884,8,337,1,338,1,338,1,338,1,338,1,338,
        1,338,3,338,3892,8,338,1,339,1,339,1,340,1,340,1,340,0,2,560,562,
        341,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
        156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
        188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
        220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
        252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,
        284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,
        316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,
        348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,
        380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,
        412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,
        444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,
        476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,
        508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,
        540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,
        572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,
        604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,
        636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,
        668,670,672,674,676,678,680,0,32,2,0,13,13,165,165,2,0,49,53,55,
        62,2,0,63,63,136,136,2,0,86,86,140,140,2,0,103,103,154,154,4,0,82,
        82,86,86,136,136,140,140,1,0,15,16,1,0,32,33,5,0,122,122,230,230,
        232,233,235,235,237,237,1,0,115,118,5,0,8,8,13,13,94,94,132,132,
        142,142,2,0,227,227,248,248,3,0,178,178,192,193,197,197,2,0,228,
        228,240,240,2,0,238,238,244,244,7,0,97,97,105,105,230,230,232,233,
        235,235,237,237,241,241,5,0,5,5,74,74,91,91,131,131,206,206,2,0,
        258,258,265,265,33,0,18,19,37,37,39,39,47,47,49,53,55,64,68,69,71,
        73,75,75,77,78,82,86,88,90,92,92,94,94,103,103,108,108,112,113,121,
        121,127,129,135,136,140,141,143,143,145,145,148,150,152,154,159,
        159,161,161,163,163,169,169,172,172,200,201,203,203,205,205,15,0,
        6,6,10,10,15,16,19,19,67,68,93,93,122,122,130,130,133,134,156,156,
        158,158,164,164,166,167,173,173,204,205,11,0,3,3,5,5,74,74,91,91,
        97,97,105,105,119,119,122,123,131,131,170,170,206,206,15,0,1,1,20,
        25,29,29,34,36,40,43,45,46,65,65,81,81,96,96,101,102,114,114,138,
        138,151,151,155,155,162,162,6,0,9,9,30,30,94,95,100,100,151,151,
        171,171,9,0,14,14,17,17,44,45,66,66,98,98,109,111,157,157,162,162,
        198,198,2,0,45,45,162,162,2,0,80,80,168,168,2,0,70,70,125,125,3,
        0,7,7,107,107,174,197,3,0,26,26,48,48,54,54,1,0,258,259,6,0,224,
        225,229,229,231,231,234,234,242,242,246,246,25,0,2,2,4,4,8,8,11,
        13,27,28,31,33,38,38,76,76,87,87,99,99,104,104,106,106,115,118,120,
        120,126,126,132,132,137,137,142,142,144,144,147,147,160,160,165,
        165,199,199,202,202,207,223,4246,0,682,1,0,0,0,2,688,1,0,0,0,4,706,
        1,0,0,0,6,709,1,0,0,0,8,716,1,0,0,0,10,738,1,0,0,0,12,760,1,0,0,
        0,14,769,1,0,0,0,16,781,1,0,0,0,18,805,1,0,0,0,20,890,1,0,0,0,22,
        893,1,0,0,0,24,904,1,0,0,0,26,910,1,0,0,0,28,914,1,0,0,0,30,916,
        1,0,0,0,32,956,1,0,0,0,34,992,1,0,0,0,36,997,1,0,0,0,38,1007,1,0,
        0,0,40,1012,1,0,0,0,42,1018,1,0,0,0,44,1024,1,0,0,0,46,1026,1,0,
        0,0,48,1032,1,0,0,0,50,1038,1,0,0,0,52,1042,1,0,0,0,54,1048,1,0,
        0,0,56,1063,1,0,0,0,58,1065,1,0,0,0,60,1067,1,0,0,0,62,1073,1,0,
        0,0,64,1075,1,0,0,0,66,1077,1,0,0,0,68,1083,1,0,0,0,70,1085,1,0,
        0,0,72,1087,1,0,0,0,74,1095,1,0,0,0,76,1099,1,0,0,0,78,1101,1,0,
        0,0,80,1105,1,0,0,0,82,1113,1,0,0,0,84,1124,1,0,0,0,86,1142,1,0,
        0,0,88,1158,1,0,0,0,90,1160,1,0,0,0,92,1167,1,0,0,0,94,1175,1,0,
        0,0,96,1183,1,0,0,0,98,1185,1,0,0,0,100,1195,1,0,0,0,102,1197,1,
        0,0,0,104,1209,1,0,0,0,106,1224,1,0,0,0,108,1231,1,0,0,0,110,1236,
        1,0,0,0,112,1238,1,0,0,0,114,1244,1,0,0,0,116,1250,1,0,0,0,118,1252,
        1,0,0,0,120,1260,1,0,0,0,122,1262,1,0,0,0,124,1264,1,0,0,0,126,1270,
        1,0,0,0,128,1274,1,0,0,0,130,1276,1,0,0,0,132,1280,1,0,0,0,134,1296,
        1,0,0,0,136,1298,1,0,0,0,138,1308,1,0,0,0,140,1323,1,0,0,0,142,1327,
        1,0,0,0,144,1331,1,0,0,0,146,1335,1,0,0,0,148,1353,1,0,0,0,150,1364,
        1,0,0,0,152,1368,1,0,0,0,154,1370,1,0,0,0,156,1373,1,0,0,0,158,1378,
        1,0,0,0,160,1391,1,0,0,0,162,1393,1,0,0,0,164,1399,1,0,0,0,166,1403,
        1,0,0,0,168,1407,1,0,0,0,170,1425,1,0,0,0,172,1436,1,0,0,0,174,1438,
        1,0,0,0,176,1451,1,0,0,0,178,1455,1,0,0,0,180,1459,1,0,0,0,182,1469,
        1,0,0,0,184,1479,1,0,0,0,186,1494,1,0,0,0,188,1500,1,0,0,0,190,1504,
        1,0,0,0,192,1508,1,0,0,0,194,1513,1,0,0,0,196,1522,1,0,0,0,198,1543,
        1,0,0,0,200,1555,1,0,0,0,202,1558,1,0,0,0,204,1562,1,0,0,0,206,1566,
        1,0,0,0,208,1572,1,0,0,0,210,1577,1,0,0,0,212,1628,1,0,0,0,214,1691,
        1,0,0,0,216,1755,1,0,0,0,218,1804,1,0,0,0,220,1826,1,0,0,0,222,1828,
        1,0,0,0,224,1830,1,0,0,0,226,1832,1,0,0,0,228,1836,1,0,0,0,230,1841,
        1,0,0,0,232,1846,1,0,0,0,234,1848,1,0,0,0,236,1857,1,0,0,0,238,1863,
        1,0,0,0,240,1875,1,0,0,0,242,1918,1,0,0,0,244,1920,1,0,0,0,246,1934,
        1,0,0,0,248,1948,1,0,0,0,250,1953,1,0,0,0,252,1957,1,0,0,0,254,1966,
        1,0,0,0,256,1987,1,0,0,0,258,1989,1,0,0,0,260,1993,1,0,0,0,262,2007,
        1,0,0,0,264,2009,1,0,0,0,266,2012,1,0,0,0,268,2021,1,0,0,0,270,2027,
        1,0,0,0,272,2029,1,0,0,0,274,2031,1,0,0,0,276,2033,1,0,0,0,278,2036,
        1,0,0,0,280,2066,1,0,0,0,282,2090,1,0,0,0,284,2099,1,0,0,0,286,2103,
        1,0,0,0,288,2105,1,0,0,0,290,2116,1,0,0,0,292,2118,1,0,0,0,294,2120,
        1,0,0,0,296,2142,1,0,0,0,298,2164,1,0,0,0,300,2184,1,0,0,0,302,2186,
        1,0,0,0,304,2201,1,0,0,0,306,2203,1,0,0,0,308,2214,1,0,0,0,310,2237,
        1,0,0,0,312,2239,1,0,0,0,314,2259,1,0,0,0,316,2261,1,0,0,0,318,2263,
        1,0,0,0,320,2267,1,0,0,0,322,2271,1,0,0,0,324,2273,1,0,0,0,326,2284,
        1,0,0,0,328,2301,1,0,0,0,330,2317,1,0,0,0,332,2319,1,0,0,0,334,2323,
        1,0,0,0,336,2347,1,0,0,0,338,2349,1,0,0,0,340,2355,1,0,0,0,342,2361,
        1,0,0,0,344,2365,1,0,0,0,346,2438,1,0,0,0,348,2440,1,0,0,0,350,2453,
        1,0,0,0,352,2455,1,0,0,0,354,2467,1,0,0,0,356,2475,1,0,0,0,358,2511,
        1,0,0,0,360,2517,1,0,0,0,362,2519,1,0,0,0,364,2543,1,0,0,0,366,2569,
        1,0,0,0,368,2597,1,0,0,0,370,2599,1,0,0,0,372,2601,1,0,0,0,374,2603,
        1,0,0,0,376,2610,1,0,0,0,378,2615,1,0,0,0,380,2629,1,0,0,0,382,2634,
        1,0,0,0,384,2636,1,0,0,0,386,2648,1,0,0,0,388,2652,1,0,0,0,390,2656,
        1,0,0,0,392,2660,1,0,0,0,394,2694,1,0,0,0,396,2696,1,0,0,0,398,2698,
        1,0,0,0,400,2725,1,0,0,0,402,2727,1,0,0,0,404,2739,1,0,0,0,406,2743,
        1,0,0,0,408,2745,1,0,0,0,410,2756,1,0,0,0,412,2772,1,0,0,0,414,2774,
        1,0,0,0,416,2777,1,0,0,0,418,2783,1,0,0,0,420,2793,1,0,0,0,422,2810,
        1,0,0,0,424,2814,1,0,0,0,426,2820,1,0,0,0,428,2822,1,0,0,0,430,2829,
        1,0,0,0,432,2835,1,0,0,0,434,2849,1,0,0,0,436,2851,1,0,0,0,438,2888,
        1,0,0,0,440,2890,1,0,0,0,442,2892,1,0,0,0,444,2894,1,0,0,0,446,2896,
        1,0,0,0,448,2910,1,0,0,0,450,2926,1,0,0,0,452,2938,1,0,0,0,454,2953,
        1,0,0,0,456,2955,1,0,0,0,458,2972,1,0,0,0,460,2974,1,0,0,0,462,2982,
        1,0,0,0,464,2986,1,0,0,0,466,3000,1,0,0,0,468,3002,1,0,0,0,470,3039,
        1,0,0,0,472,3041,1,0,0,0,474,3047,1,0,0,0,476,3049,1,0,0,0,478,3058,
        1,0,0,0,480,3075,1,0,0,0,482,3077,1,0,0,0,484,3083,1,0,0,0,486,3087,
        1,0,0,0,488,3089,1,0,0,0,490,3092,1,0,0,0,492,3102,1,0,0,0,494,3104,
        1,0,0,0,496,3118,1,0,0,0,498,3130,1,0,0,0,500,3132,1,0,0,0,502,3153,
        1,0,0,0,504,3155,1,0,0,0,506,3157,1,0,0,0,508,3159,1,0,0,0,510,3172,
        1,0,0,0,512,3186,1,0,0,0,514,3188,1,0,0,0,516,3200,1,0,0,0,518,3202,
        1,0,0,0,520,3216,1,0,0,0,522,3225,1,0,0,0,524,3230,1,0,0,0,526,3232,
        1,0,0,0,528,3234,1,0,0,0,530,3236,1,0,0,0,532,3248,1,0,0,0,534,3250,
        1,0,0,0,536,3262,1,0,0,0,538,3264,1,0,0,0,540,3277,1,0,0,0,542,3289,
        1,0,0,0,544,3303,1,0,0,0,546,3305,1,0,0,0,548,3324,1,0,0,0,550,3326,
        1,0,0,0,552,3328,1,0,0,0,554,3350,1,0,0,0,556,3378,1,0,0,0,558,3380,
        1,0,0,0,560,3390,1,0,0,0,562,3464,1,0,0,0,564,3544,1,0,0,0,566,3546,
        1,0,0,0,568,3556,1,0,0,0,570,3570,1,0,0,0,572,3576,1,0,0,0,574,3582,
        1,0,0,0,576,3591,1,0,0,0,578,3593,1,0,0,0,580,3616,1,0,0,0,582,3618,
        1,0,0,0,584,3633,1,0,0,0,586,3663,1,0,0,0,588,3666,1,0,0,0,590,3668,
        1,0,0,0,592,3670,1,0,0,0,594,3684,1,0,0,0,596,3700,1,0,0,0,598,3735,
        1,0,0,0,600,3739,1,0,0,0,602,3741,1,0,0,0,604,3744,1,0,0,0,606,3747,
        1,0,0,0,608,3749,1,0,0,0,610,3751,1,0,0,0,612,3753,1,0,0,0,614,3755,
        1,0,0,0,616,3757,1,0,0,0,618,3761,1,0,0,0,620,3765,1,0,0,0,622,3767,
        1,0,0,0,624,3772,1,0,0,0,626,3775,1,0,0,0,628,3780,1,0,0,0,630,3791,
        1,0,0,0,632,3806,1,0,0,0,634,3815,1,0,0,0,636,3819,1,0,0,0,638,3831,
        1,0,0,0,640,3835,1,0,0,0,642,3837,1,0,0,0,644,3839,1,0,0,0,646,3841,
        1,0,0,0,648,3843,1,0,0,0,650,3845,1,0,0,0,652,3847,1,0,0,0,654,3849,
        1,0,0,0,656,3851,1,0,0,0,658,3856,1,0,0,0,660,3858,1,0,0,0,662,3860,
        1,0,0,0,664,3862,1,0,0,0,666,3864,1,0,0,0,668,3866,1,0,0,0,670,3868,
        1,0,0,0,672,3872,1,0,0,0,674,3883,1,0,0,0,676,3891,1,0,0,0,678,3893,
        1,0,0,0,680,3895,1,0,0,0,682,683,3,2,1,0,683,684,5,0,0,1,684,1,1,
        0,0,0,685,687,3,630,315,0,686,685,1,0,0,0,687,690,1,0,0,0,688,686,
        1,0,0,0,688,689,1,0,0,0,689,695,1,0,0,0,690,688,1,0,0,0,691,696,
        3,12,6,0,692,693,3,4,2,0,693,694,3,14,7,0,694,696,1,0,0,0,695,691,
        1,0,0,0,695,692,1,0,0,0,696,700,1,0,0,0,697,699,3,628,314,0,698,
        697,1,0,0,0,699,702,1,0,0,0,700,698,1,0,0,0,700,701,1,0,0,0,701,
        704,1,0,0,0,702,700,1,0,0,0,703,705,5,265,0,0,704,703,1,0,0,0,704,
        705,1,0,0,0,705,3,1,0,0,0,706,707,3,6,3,0,707,708,3,8,4,0,708,5,
        1,0,0,0,709,710,5,199,0,0,710,711,5,265,0,0,711,714,5,256,0,0,712,
        713,5,265,0,0,713,715,5,31,0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,
        7,1,0,0,0,716,717,3,628,314,0,717,722,5,12,0,0,718,719,5,265,0,0,
        719,720,5,251,0,0,720,721,5,265,0,0,721,723,3,640,320,0,722,718,
        1,0,0,0,722,723,1,0,0,0,723,727,1,0,0,0,724,726,3,628,314,0,725,
        724,1,0,0,0,726,729,1,0,0,0,727,725,1,0,0,0,727,728,1,0,0,0,728,
        731,1,0,0,0,729,727,1,0,0,0,730,732,3,10,5,0,731,730,1,0,0,0,732,
        733,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,0,735,
        736,3,628,314,0,736,737,5,72,0,0,737,9,1,0,0,0,738,740,3,640,320,
        0,739,741,5,265,0,0,740,739,1,0,0,0,740,741,1,0,0,0,741,742,1,0,
        0,0,742,744,5,230,0,0,743,745,5,265,0,0,744,743,1,0,0,0,744,745,
        1,0,0,0,745,747,1,0,0,0,746,748,5,238,0,0,747,746,1,0,0,0,747,748,
        1,0,0,0,748,749,1,0,0,0,749,752,3,564,282,0,750,751,5,263,0,0,751,
        753,3,564,282,0,752,750,1,0,0,0,752,753,1,0,0,0,753,757,1,0,0,0,
        754,756,3,628,314,0,755,754,1,0,0,0,756,759,1,0,0,0,757,755,1,0,
        0,0,757,758,1,0,0,0,758,11,1,0,0,0,759,757,1,0,0,0,760,764,3,16,
        8,0,761,763,3,630,315,0,762,761,1,0,0,0,763,766,1,0,0,0,764,762,
        1,0,0,0,764,765,1,0,0,0,765,767,1,0,0,0,766,764,1,0,0,0,767,768,
        3,22,11,0,768,13,1,0,0,0,769,773,3,18,9,0,770,772,3,628,314,0,771,
        770,1,0,0,0,772,775,1,0,0,0,773,771,1,0,0,0,773,774,1,0,0,0,774,
        776,1,0,0,0,775,773,1,0,0,0,776,777,3,24,12,0,777,15,1,0,0,0,778,
        780,3,628,314,0,779,778,1,0,0,0,780,783,1,0,0,0,781,779,1,0,0,0,
        781,782,1,0,0,0,782,784,1,0,0,0,783,781,1,0,0,0,784,786,5,7,0,0,
        785,787,5,265,0,0,786,785,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,
        0,788,790,5,188,0,0,789,791,5,265,0,0,790,789,1,0,0,0,790,791,1,
        0,0,0,791,792,1,0,0,0,792,794,5,230,0,0,793,795,5,265,0,0,794,793,
        1,0,0,0,794,795,1,0,0,0,795,796,1,0,0,0,796,797,5,252,0,0,797,17,
        1,0,0,0,798,800,3,628,314,0,799,798,1,0,0,0,800,801,1,0,0,0,801,
        799,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,804,3,20,10,0,804,
        806,1,0,0,0,805,799,1,0,0,0,806,807,1,0,0,0,807,805,1,0,0,0,807,
        808,1,0,0,0,808,810,1,0,0,0,809,811,5,265,0,0,810,809,1,0,0,0,810,
        811,1,0,0,0,811,19,1,0,0,0,812,814,5,7,0,0,813,815,5,265,0,0,814,
        813,1,0,0,0,814,815,1,0,0,0,815,816,1,0,0,0,816,818,5,188,0,0,817,
        819,5,265,0,0,818,817,1,0,0,0,818,819,1,0,0,0,819,820,1,0,0,0,820,
        822,5,230,0,0,821,823,5,265,0,0,822,821,1,0,0,0,822,823,1,0,0,0,
        823,824,1,0,0,0,824,891,5,252,0,0,825,827,5,7,0,0,826,828,5,265,
        0,0,827,826,1,0,0,0,827,828,1,0,0,0,828,829,1,0,0,0,829,831,5,181,
        0,0,830,832,5,265,0,0,831,830,1,0,0,0,831,832,1,0,0,0,832,833,1,
        0,0,0,833,835,5,230,0,0,834,836,5,265,0,0,835,834,1,0,0,0,835,836,
        1,0,0,0,836,837,1,0,0,0,837,891,5,80,0,0,838,840,5,7,0,0,839,841,
        5,265,0,0,840,839,1,0,0,0,840,841,1,0,0,0,841,842,1,0,0,0,842,844,
        5,176,0,0,843,845,5,265,0,0,844,843,1,0,0,0,844,845,1,0,0,0,845,
        846,1,0,0,0,846,848,5,230,0,0,847,849,5,265,0,0,848,847,1,0,0,0,
        848,849,1,0,0,0,849,850,1,0,0,0,850,891,5,80,0,0,851,853,5,7,0,0,
        852,854,5,265,0,0,853,852,1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,
        0,855,857,5,189,0,0,856,858,5,265,0,0,857,856,1,0,0,0,857,858,1,
        0,0,0,858,859,1,0,0,0,859,861,5,230,0,0,860,862,5,265,0,0,861,860,
        1,0,0,0,861,862,1,0,0,0,862,863,1,0,0,0,863,891,3,660,330,0,864,
        866,5,7,0,0,865,867,5,265,0,0,866,865,1,0,0,0,866,867,1,0,0,0,867,
        868,1,0,0,0,868,870,5,179,0,0,869,871,5,265,0,0,870,869,1,0,0,0,
        870,871,1,0,0,0,871,872,1,0,0,0,872,874,5,230,0,0,873,875,5,265,
        0,0,874,873,1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,0,876,891,3,660,
        330,0,877,879,5,7,0,0,878,880,5,265,0,0,879,878,1,0,0,0,879,880,
        1,0,0,0,880,881,1,0,0,0,881,883,5,177,0,0,882,884,5,265,0,0,883,
        882,1,0,0,0,883,884,1,0,0,0,884,885,1,0,0,0,885,887,5,230,0,0,886,
        888,5,265,0,0,887,886,1,0,0,0,887,888,1,0,0,0,888,889,1,0,0,0,889,
        891,3,660,330,0,890,812,1,0,0,0,890,825,1,0,0,0,890,838,1,0,0,0,
        890,851,1,0,0,0,890,864,1,0,0,0,890,877,1,0,0,0,891,21,1,0,0,0,892,
        894,3,32,16,0,893,892,1,0,0,0,893,894,1,0,0,0,894,898,1,0,0,0,895,
        897,3,628,314,0,896,895,1,0,0,0,897,900,1,0,0,0,898,896,1,0,0,0,
        898,899,1,0,0,0,899,901,1,0,0,0,900,898,1,0,0,0,901,902,3,198,99,
        0,902,23,1,0,0,0,903,905,3,34,17,0,904,903,1,0,0,0,904,905,1,0,0,
        0,905,906,1,0,0,0,906,907,3,200,100,0,907,25,1,0,0,0,908,911,3,638,
        319,0,909,911,3,640,320,0,910,908,1,0,0,0,910,909,1,0,0,0,911,27,
        1,0,0,0,912,915,3,30,15,0,913,915,3,676,338,0,914,912,1,0,0,0,914,
        913,1,0,0,0,915,29,1,0,0,0,916,917,3,640,320,0,917,31,1,0,0,0,918,
        920,3,628,314,0,919,918,1,0,0,0,920,921,1,0,0,0,921,919,1,0,0,0,
        921,922,1,0,0,0,922,923,1,0,0,0,923,924,3,38,19,0,924,926,1,0,0,
        0,925,919,1,0,0,0,926,927,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,
        0,928,957,1,0,0,0,929,931,3,628,314,0,930,929,1,0,0,0,931,932,1,
        0,0,0,932,930,1,0,0,0,932,933,1,0,0,0,933,934,1,0,0,0,934,935,3,
        36,18,0,935,937,1,0,0,0,936,930,1,0,0,0,937,940,1,0,0,0,938,936,
        1,0,0,0,938,939,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,941,943,
        3,628,314,0,942,941,1,0,0,0,943,944,1,0,0,0,944,942,1,0,0,0,944,
        945,1,0,0,0,945,946,1,0,0,0,946,947,3,54,27,0,947,953,1,0,0,0,948,
        949,3,38,19,0,949,950,3,630,315,0,950,952,1,0,0,0,951,948,1,0,0,
        0,952,955,1,0,0,0,953,951,1,0,0,0,953,954,1,0,0,0,954,957,1,0,0,
        0,955,953,1,0,0,0,956,925,1,0,0,0,956,938,1,0,0,0,957,33,1,0,0,0,
        958,960,3,42,21,0,959,961,3,628,314,0,960,959,1,0,0,0,961,962,1,
        0,0,0,962,960,1,0,0,0,962,963,1,0,0,0,963,965,1,0,0,0,964,958,1,
        0,0,0,965,966,1,0,0,0,966,964,1,0,0,0,966,967,1,0,0,0,967,993,1,
        0,0,0,968,970,3,40,20,0,969,971,3,628,314,0,970,969,1,0,0,0,971,
        972,1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,975,1,0,0,0,974,
        968,1,0,0,0,975,978,1,0,0,0,976,974,1,0,0,0,976,977,1,0,0,0,977,
        979,1,0,0,0,978,976,1,0,0,0,979,980,3,54,27,0,980,989,1,0,0,0,981,
        983,3,42,21,0,982,984,3,628,314,0,983,982,1,0,0,0,984,985,1,0,0,
        0,985,983,1,0,0,0,985,986,1,0,0,0,986,988,1,0,0,0,987,981,1,0,0,
        0,988,991,1,0,0,0,989,987,1,0,0,0,989,990,1,0,0,0,990,993,1,0,0,
        0,991,989,1,0,0,0,992,964,1,0,0,0,992,976,1,0,0,0,993,35,1,0,0,0,
        994,998,3,44,22,0,995,998,3,52,26,0,996,998,3,54,27,0,997,994,1,
        0,0,0,997,995,1,0,0,0,997,996,1,0,0,0,998,37,1,0,0,0,999,1008,3,
        74,37,0,1000,1008,3,78,39,0,1001,1008,3,124,62,0,1002,1008,3,142,
        71,0,1003,1008,3,176,88,0,1004,1008,3,162,81,0,1005,1008,3,44,22,
        0,1006,1008,3,52,26,0,1007,999,1,0,0,0,1007,1000,1,0,0,0,1007,1001,
        1,0,0,0,1007,1002,1,0,0,0,1007,1003,1,0,0,0,1007,1004,1,0,0,0,1007,
        1005,1,0,0,0,1007,1006,1,0,0,0,1008,39,1,0,0,0,1009,1013,3,44,22,
        0,1010,1013,3,54,27,0,1011,1013,3,192,96,0,1012,1009,1,0,0,0,1012,
        1010,1,0,0,0,1012,1011,1,0,0,0,1013,41,1,0,0,0,1014,1019,3,74,37,
        0,1015,1019,3,194,97,0,1016,1019,3,44,22,0,1017,1019,3,192,96,0,
        1018,1014,1,0,0,0,1018,1015,1,0,0,0,1018,1016,1,0,0,0,1018,1017,
        1,0,0,0,1019,43,1,0,0,0,1020,1025,3,46,23,0,1021,1025,3,48,24,0,
        1022,1025,3,50,25,0,1023,1025,3,294,147,0,1024,1020,1,0,0,0,1024,
        1021,1,0,0,0,1024,1022,1,0,0,0,1024,1023,1,0,0,0,1025,45,1,0,0,0,
        1026,1027,5,129,0,0,1027,1028,3,626,313,0,1028,1029,5,38,0,0,1029,
        1030,3,626,313,0,1030,1031,7,0,0,0,1031,47,1,0,0,0,1032,1033,5,129,
        0,0,1033,1034,3,626,313,0,1034,1035,5,11,0,0,1035,1036,3,626,313,
        0,1036,1037,5,255,0,0,1037,49,1,0,0,0,1038,1039,5,129,0,0,1039,1040,
        3,626,313,0,1040,1041,5,79,0,0,1041,51,1,0,0,0,1042,1043,5,129,0,
        0,1043,1044,3,626,313,0,1044,1045,5,136,0,0,1045,1046,3,626,313,
        0,1046,1047,5,120,0,0,1047,53,1,0,0,0,1048,1049,3,72,36,0,1049,1050,
        5,265,0,0,1050,1057,3,56,28,0,1051,1052,5,265,0,0,1052,1053,5,227,
        0,0,1053,1054,5,265,0,0,1054,1056,3,56,28,0,1055,1051,1,0,0,0,1056,
        1059,1,0,0,0,1057,1055,1,0,0,0,1057,1058,1,0,0,0,1058,55,1,0,0,0,
        1059,1057,1,0,0,0,1060,1064,3,58,29,0,1061,1064,3,60,30,0,1062,1064,
        3,66,33,0,1063,1060,1,0,0,0,1063,1061,1,0,0,0,1063,1062,1,0,0,0,
        1064,57,1,0,0,0,1065,1066,3,640,320,0,1066,59,1,0,0,0,1067,1068,
        3,62,31,0,1068,1069,5,265,0,0,1069,1070,5,238,0,0,1070,1071,5,265,
        0,0,1071,1072,3,64,32,0,1072,61,1,0,0,0,1073,1074,3,640,320,0,1074,
        63,1,0,0,0,1075,1076,3,640,320,0,1076,65,1,0,0,0,1077,1078,3,68,
        34,0,1078,1079,5,265,0,0,1079,1080,5,238,0,0,1080,1081,5,265,0,0,
        1081,1082,3,70,35,0,1082,67,1,0,0,0,1083,1084,3,640,320,0,1084,69,
        1,0,0,0,1085,1086,3,640,320,0,1086,71,1,0,0,0,1087,1088,7,1,0,0,
        1088,73,1,0,0,0,1089,1096,3,76,38,0,1090,1096,3,126,63,0,1091,1096,
        3,144,72,0,1092,1096,3,166,83,0,1093,1096,3,164,82,0,1094,1096,3,
        178,89,0,1095,1089,1,0,0,0,1095,1090,1,0,0,0,1095,1091,1,0,0,0,1095,
        1092,1,0,0,0,1095,1093,1,0,0,0,1095,1094,1,0,0,0,1096,75,1,0,0,0,
        1097,1100,3,80,40,0,1098,1100,3,82,41,0,1099,1097,1,0,0,0,1099,1098,
        1,0,0,0,1100,77,1,0,0,0,1101,1102,5,86,0,0,1102,1103,5,265,0,0,1103,
        1104,3,86,43,0,1104,79,1,0,0,0,1105,1108,5,140,0,0,1106,1107,5,265,
        0,0,1107,1109,5,156,0,0,1108,1106,1,0,0,0,1108,1109,1,0,0,0,1109,
        1110,1,0,0,0,1110,1111,5,265,0,0,1111,1112,3,84,42,0,1112,81,1,0,
        0,0,1113,1114,7,2,0,0,1114,1115,3,626,313,0,1115,1118,1,0,0,0,1116,
        1117,5,156,0,0,1117,1119,3,626,313,0,1118,1116,1,0,0,0,1118,1119,
        1,0,0,0,1119,1120,1,0,0,0,1120,1121,3,84,42,0,1121,83,1,0,0,0,1122,
        1125,3,98,49,0,1123,1125,3,88,44,0,1124,1122,1,0,0,0,1124,1123,1,
        0,0,0,1125,1139,1,0,0,0,1126,1128,3,626,313,0,1127,1126,1,0,0,0,
        1127,1128,1,0,0,0,1128,1129,1,0,0,0,1129,1131,5,227,0,0,1130,1132,
        3,626,313,0,1131,1130,1,0,0,0,1131,1132,1,0,0,0,1132,1135,1,0,0,
        0,1133,1136,3,98,49,0,1134,1136,3,88,44,0,1135,1133,1,0,0,0,1135,
        1134,1,0,0,0,1136,1138,1,0,0,0,1137,1127,1,0,0,0,1138,1141,1,0,0,
        0,1139,1137,1,0,0,0,1139,1140,1,0,0,0,1140,85,1,0,0,0,1141,1139,
        1,0,0,0,1142,1153,3,88,44,0,1143,1145,3,626,313,0,1144,1143,1,0,
        0,0,1144,1145,1,0,0,0,1145,1146,1,0,0,0,1146,1148,5,227,0,0,1147,
        1149,3,626,313,0,1148,1147,1,0,0,0,1148,1149,1,0,0,0,1149,1150,1,
        0,0,0,1150,1152,3,88,44,0,1151,1144,1,0,0,0,1152,1155,1,0,0,0,1153,
        1151,1,0,0,0,1153,1154,1,0,0,0,1154,87,1,0,0,0,1155,1153,1,0,0,0,
        1156,1159,3,90,45,0,1157,1159,3,92,46,0,1158,1156,1,0,0,0,1158,1157,
        1,0,0,0,1159,89,1,0,0,0,1160,1162,3,676,338,0,1161,1163,3,626,313,
        0,1162,1161,1,0,0,0,1162,1163,1,0,0,0,1163,1165,1,0,0,0,1164,1166,
        3,102,51,0,1165,1164,1,0,0,0,1165,1166,1,0,0,0,1166,91,1,0,0,0,1167,
        1169,3,640,320,0,1168,1170,3,626,313,0,1169,1168,1,0,0,0,1169,1170,
        1,0,0,0,1170,1173,1,0,0,0,1171,1174,3,94,47,0,1172,1174,3,96,48,
        0,1173,1171,1,0,0,0,1173,1172,1,0,0,0,1173,1174,1,0,0,0,1174,93,
        1,0,0,0,1175,1179,3,102,51,0,1176,1177,3,626,313,0,1177,1178,3,96,
        48,0,1178,1180,1,0,0,0,1179,1176,1,0,0,0,1179,1180,1,0,0,0,1180,
        95,1,0,0,0,1181,1184,3,112,56,0,1182,1184,3,114,57,0,1183,1181,1,
        0,0,0,1183,1182,1,0,0,0,1184,97,1,0,0,0,1185,1186,5,204,0,0,1186,
        1187,3,626,313,0,1187,1188,3,640,320,0,1188,1189,3,626,313,0,1189,
        1191,5,10,0,0,1190,1192,3,626,313,0,1191,1190,1,0,0,0,1191,1192,
        1,0,0,0,1192,1193,1,0,0,0,1193,1194,3,100,50,0,1194,99,1,0,0,0,1195,
        1196,3,620,310,0,1196,101,1,0,0,0,1197,1199,5,236,0,0,1198,1200,
        3,626,313,0,1199,1198,1,0,0,0,1199,1200,1,0,0,0,1200,1202,1,0,0,
        0,1201,1203,3,104,52,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,
        1205,1,0,0,0,1204,1206,3,626,313,0,1205,1204,1,0,0,0,1205,1206,1,
        0,0,0,1206,1207,1,0,0,0,1207,1208,5,247,0,0,1208,103,1,0,0,0,1209,
        1220,3,106,53,0,1210,1212,3,626,313,0,1211,1210,1,0,0,0,1211,1212,
        1,0,0,0,1212,1213,1,0,0,0,1213,1215,5,227,0,0,1214,1216,3,626,313,
        0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,1217,1,0,0,0,1217,1219,
        3,106,53,0,1218,1211,1,0,0,0,1219,1222,1,0,0,0,1220,1218,1,0,0,0,
        1220,1221,1,0,0,0,1221,105,1,0,0,0,1222,1220,1,0,0,0,1223,1225,3,
        108,54,0,1224,1223,1,0,0,0,1224,1225,1,0,0,0,1225,1227,1,0,0,0,1226,
        1228,3,626,313,0,1227,1226,1,0,0,0,1227,1228,1,0,0,0,1228,1229,1,
        0,0,0,1229,1230,3,110,55,0,1230,107,1,0,0,0,1231,1232,3,606,303,
        0,1232,1233,3,626,313,0,1233,1234,5,167,0,0,1234,1235,3,626,313,
        0,1235,109,1,0,0,0,1236,1237,3,606,303,0,1237,111,1,0,0,0,1238,1239,
        5,10,0,0,1239,1240,5,265,0,0,1240,1241,5,122,0,0,1241,1242,5,265,
        0,0,1242,1243,3,100,50,0,1243,113,1,0,0,0,1244,1245,5,10,0,0,1245,
        1246,5,265,0,0,1246,1247,3,116,58,0,1247,115,1,0,0,0,1248,1251,3,
        118,59,0,1249,1251,3,618,309,0,1250,1248,1,0,0,0,1250,1249,1,0,0,
        0,1251,117,1,0,0,0,1252,1253,5,162,0,0,1253,1254,5,265,0,0,1254,
        1255,5,240,0,0,1255,1256,5,265,0,0,1256,1257,3,120,60,0,1257,119,
        1,0,0,0,1258,1261,5,255,0,0,1259,1261,3,122,61,0,1260,1258,1,0,0,
        0,1260,1259,1,0,0,0,1261,121,1,0,0,0,1262,1263,3,576,288,0,1263,
        123,1,0,0,0,1264,1265,7,3,0,0,1265,1266,3,626,313,0,1266,1267,3,
        128,64,0,1267,125,1,0,0,0,1268,1269,5,136,0,0,1269,1271,3,626,313,
        0,1270,1268,1,0,0,0,1270,1271,1,0,0,0,1271,1272,1,0,0,0,1272,1273,
        3,128,64,0,1273,127,1,0,0,0,1274,1275,3,130,65,0,1275,129,1,0,0,
        0,1276,1277,5,39,0,0,1277,1278,3,626,313,0,1278,1279,3,132,66,0,
        1279,131,1,0,0,0,1280,1291,3,134,67,0,1281,1283,3,626,313,0,1282,
        1281,1,0,0,0,1282,1283,1,0,0,0,1283,1284,1,0,0,0,1284,1286,5,227,
        0,0,1285,1287,3,626,313,0,1286,1285,1,0,0,0,1286,1287,1,0,0,0,1287,
        1288,1,0,0,0,1288,1290,3,134,67,0,1289,1282,1,0,0,0,1290,1293,1,
        0,0,0,1291,1289,1,0,0,0,1291,1292,1,0,0,0,1292,133,1,0,0,0,1293,
        1291,1,0,0,0,1294,1297,3,136,68,0,1295,1297,3,138,69,0,1296,1294,
        1,0,0,0,1296,1295,1,0,0,0,1297,135,1,0,0,0,1298,1300,3,676,338,0,
        1299,1301,3,626,313,0,1300,1299,1,0,0,0,1300,1301,1,0,0,0,1301,1302,
        1,0,0,0,1302,1304,5,230,0,0,1303,1305,3,626,313,0,1304,1303,1,0,
        0,0,1304,1305,1,0,0,0,1305,1306,1,0,0,0,1306,1307,3,606,303,0,1307,
        137,1,0,0,0,1308,1312,3,640,320,0,1309,1310,3,626,313,0,1310,1311,
        3,140,70,0,1311,1313,1,0,0,0,1312,1309,1,0,0,0,1312,1313,1,0,0,0,
        1313,1315,1,0,0,0,1314,1316,3,626,313,0,1315,1314,1,0,0,0,1315,1316,
        1,0,0,0,1316,1317,1,0,0,0,1317,1319,5,230,0,0,1318,1320,3,626,313,
        0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,1321,1,0,0,0,1321,1322,
        3,606,303,0,1322,139,1,0,0,0,1323,1324,5,10,0,0,1324,1325,3,626,
        313,0,1325,1326,3,674,337,0,1326,141,1,0,0,0,1327,1328,7,3,0,0,1328,
        1329,3,626,313,0,1329,1330,3,146,73,0,1330,143,1,0,0,0,1331,1332,
        5,136,0,0,1332,1333,3,626,313,0,1333,1334,3,146,73,0,1334,145,1,
        0,0,0,1335,1336,5,169,0,0,1336,1337,3,626,313,0,1337,1339,3,30,15,
        0,1338,1340,3,632,316,0,1339,1338,1,0,0,0,1340,1341,1,0,0,0,1341,
        1339,1,0,0,0,1341,1342,1,0,0,0,1342,1343,1,0,0,0,1343,1345,3,148,
        74,0,1344,1346,3,632,316,0,1345,1344,1,0,0,0,1346,1347,1,0,0,0,1347,
        1345,1,0,0,0,1347,1348,1,0,0,0,1348,1349,1,0,0,0,1349,1350,5,72,
        0,0,1350,1351,3,626,313,0,1351,1352,5,169,0,0,1352,147,1,0,0,0,1353,
        1359,3,150,75,0,1354,1355,3,632,316,0,1355,1356,3,150,75,0,1356,
        1358,1,0,0,0,1357,1354,1,0,0,0,1358,1361,1,0,0,0,1359,1357,1,0,0,
        0,1359,1360,1,0,0,0,1360,149,1,0,0,0,1361,1359,1,0,0,0,1362,1365,
        3,294,147,0,1363,1365,3,152,76,0,1364,1362,1,0,0,0,1364,1363,1,0,
        0,0,1365,151,1,0,0,0,1366,1369,3,156,78,0,1367,1369,3,154,77,0,1368,
        1366,1,0,0,0,1368,1367,1,0,0,0,1369,153,1,0,0,0,1370,1371,3,640,
        320,0,1371,1372,3,158,79,0,1372,155,1,0,0,0,1373,1374,3,160,80,0,
        1374,1375,3,626,313,0,1375,1376,3,96,48,0,1376,157,1,0,0,0,1377,
        1379,3,102,51,0,1378,1377,1,0,0,0,1378,1379,1,0,0,0,1379,1380,1,
        0,0,0,1380,1381,3,626,313,0,1381,1382,3,96,48,0,1382,159,1,0,0,0,
        1383,1392,3,642,321,0,1384,1392,3,646,323,0,1385,1392,3,648,324,
        0,1386,1392,3,652,326,0,1387,1392,3,650,325,0,1388,1392,3,658,329,
        0,1389,1392,3,666,333,0,1390,1392,3,668,334,0,1391,1383,1,0,0,0,
        1391,1384,1,0,0,0,1391,1385,1,0,0,0,1391,1386,1,0,0,0,1391,1387,
        1,0,0,0,1391,1388,1,0,0,0,1391,1389,1,0,0,0,1391,1390,1,0,0,0,1392,
        161,1,0,0,0,1393,1394,5,86,0,0,1394,1395,3,626,313,0,1395,1396,3,
        168,84,0,1396,163,1,0,0,0,1397,1398,5,140,0,0,1398,1400,3,626,313,
        0,1399,1397,1,0,0,0,1399,1400,1,0,0,0,1400,1401,1,0,0,0,1401,1402,
        3,168,84,0,1402,165,1,0,0,0,1403,1404,5,136,0,0,1404,1405,3,626,
        313,0,1405,1406,3,168,84,0,1406,167,1,0,0,0,1407,1408,5,73,0,0,1408,
        1409,3,626,313,0,1409,1411,3,30,15,0,1410,1412,3,632,316,0,1411,
        1410,1,0,0,0,1412,1413,1,0,0,0,1413,1411,1,0,0,0,1413,1414,1,0,0,
        0,1414,1415,1,0,0,0,1415,1417,3,170,85,0,1416,1418,3,632,316,0,1417,
        1416,1,0,0,0,1418,1419,1,0,0,0,1419,1417,1,0,0,0,1419,1420,1,0,0,
        0,1420,1421,1,0,0,0,1421,1422,5,72,0,0,1422,1423,3,626,313,0,1423,
        1424,5,73,0,0,1424,169,1,0,0,0,1425,1431,3,172,86,0,1426,1427,3,
        632,316,0,1427,1428,3,172,86,0,1428,1430,1,0,0,0,1429,1426,1,0,0,
        0,1430,1433,1,0,0,0,1431,1429,1,0,0,0,1431,1432,1,0,0,0,1432,171,
        1,0,0,0,1433,1431,1,0,0,0,1434,1437,3,294,147,0,1435,1437,3,174,
        87,0,1436,1434,1,0,0,0,1436,1435,1,0,0,0,1437,173,1,0,0,0,1438,1447,
        3,30,15,0,1439,1441,3,626,313,0,1440,1439,1,0,0,0,1440,1441,1,0,
        0,0,1441,1442,1,0,0,0,1442,1444,5,230,0,0,1443,1445,3,626,313,0,
        1444,1443,1,0,0,0,1444,1445,1,0,0,0,1445,1446,1,0,0,0,1446,1448,
        3,606,303,0,1447,1440,1,0,0,0,1447,1448,1,0,0,0,1448,175,1,0,0,0,
        1449,1450,5,140,0,0,1450,1452,3,626,313,0,1451,1449,1,0,0,0,1451,
        1452,1,0,0,0,1452,1453,1,0,0,0,1453,1454,3,180,90,0,1454,177,1,0,
        0,0,1455,1456,5,136,0,0,1456,1457,3,626,313,0,1457,1458,3,180,90,
        0,1458,179,1,0,0,0,1459,1460,5,47,0,0,1460,1463,3,626,313,0,1461,
        1462,5,139,0,0,1462,1464,3,626,313,0,1463,1461,1,0,0,0,1463,1464,
        1,0,0,0,1464,1467,1,0,0,0,1465,1468,3,182,91,0,1466,1468,3,184,92,
        0,1467,1465,1,0,0,0,1467,1466,1,0,0,0,1468,181,1,0,0,0,1469,1470,
        5,163,0,0,1470,1471,3,626,313,0,1471,1472,3,228,114,0,1472,1473,
        3,626,313,0,1473,1477,3,186,93,0,1474,1475,3,626,313,0,1475,1476,
        3,238,119,0,1476,1478,1,0,0,0,1477,1474,1,0,0,0,1477,1478,1,0,0,
        0,1478,183,1,0,0,0,1479,1480,5,84,0,0,1480,1481,3,626,313,0,1481,
        1482,3,230,115,0,1482,1483,3,626,313,0,1483,1487,3,186,93,0,1484,
        1485,3,626,313,0,1485,1486,3,238,119,0,1486,1488,1,0,0,0,1487,1484,
        1,0,0,0,1487,1488,1,0,0,0,1488,1492,1,0,0,0,1489,1490,3,626,313,
        0,1490,1491,3,234,117,0,1491,1493,1,0,0,0,1492,1489,1,0,0,0,1492,
        1493,1,0,0,0,1493,185,1,0,0,0,1494,1498,3,188,94,0,1495,1496,3,626,
        313,0,1496,1497,3,190,95,0,1497,1499,1,0,0,0,1498,1495,1,0,0,0,1498,
        1499,1,0,0,0,1499,187,1,0,0,0,1500,1501,5,104,0,0,1501,1502,3,626,
        313,0,1502,1503,5,252,0,0,1503,189,1,0,0,0,1504,1505,5,4,0,0,1505,
        1506,3,626,313,0,1506,1507,5,252,0,0,1507,191,1,0,0,0,1508,1509,
        5,92,0,0,1509,1510,5,265,0,0,1510,1511,3,640,320,0,1511,193,1,0,
        0,0,1512,1514,5,140,0,0,1513,1512,1,0,0,0,1513,1514,1,0,0,0,1514,
        1515,1,0,0,0,1515,1516,3,626,313,0,1516,1517,5,77,0,0,1517,1518,
        3,626,313,0,1518,1520,3,640,320,0,1519,1521,3,196,98,0,1520,1519,
        1,0,0,0,1520,1521,1,0,0,0,1521,195,1,0,0,0,1522,1524,5,236,0,0,1523,
        1525,3,626,313,0,1524,1523,1,0,0,0,1524,1525,1,0,0,0,1525,1527,1,
        0,0,0,1526,1528,3,244,122,0,1527,1526,1,0,0,0,1527,1528,1,0,0,0,
        1528,1530,1,0,0,0,1529,1531,3,626,313,0,1530,1529,1,0,0,0,1530,1531,
        1,0,0,0,1531,1532,1,0,0,0,1532,1533,5,247,0,0,1533,197,1,0,0,0,1534,
        1538,3,202,101,0,1535,1537,3,628,314,0,1536,1535,1,0,0,0,1537,1540,
        1,0,0,0,1538,1536,1,0,0,0,1538,1539,1,0,0,0,1539,1542,1,0,0,0,1540,
        1538,1,0,0,0,1541,1534,1,0,0,0,1542,1545,1,0,0,0,1543,1541,1,0,0,
        0,1543,1544,1,0,0,0,1544,199,1,0,0,0,1545,1543,1,0,0,0,1546,1550,
        3,204,102,0,1547,1549,3,628,314,0,1548,1547,1,0,0,0,1549,1552,1,
        0,0,0,1550,1548,1,0,0,0,1550,1551,1,0,0,0,1551,1554,1,0,0,0,1552,
        1550,1,0,0,0,1553,1546,1,0,0,0,1554,1557,1,0,0,0,1555,1553,1,0,0,
        0,1555,1556,1,0,0,0,1556,201,1,0,0,0,1557,1555,1,0,0,0,1558,1559,
        3,206,103,0,1559,203,1,0,0,0,1560,1563,3,206,103,0,1561,1563,3,192,
        96,0,1562,1560,1,0,0,0,1562,1561,1,0,0,0,1563,205,1,0,0,0,1564,1567,
        3,294,147,0,1565,1567,3,208,104,0,1566,1564,1,0,0,0,1566,1565,1,
        0,0,0,1567,207,1,0,0,0,1568,1573,3,210,105,0,1569,1573,3,212,106,
        0,1570,1573,3,214,107,0,1571,1573,3,216,108,0,1572,1568,1,0,0,0,
        1572,1569,1,0,0,0,1572,1570,1,0,0,0,1572,1571,1,0,0,0,1573,209,1,
        0,0,0,1574,1575,3,222,111,0,1575,1576,3,626,313,0,1576,1578,1,0,
        0,0,1577,1574,1,0,0,0,1577,1578,1,0,0,0,1578,1607,1,0,0,0,1579,1580,
        3,224,112,0,1580,1581,3,626,313,0,1581,1583,1,0,0,0,1582,1579,1,
        0,0,0,1582,1583,1,0,0,0,1583,1584,1,0,0,0,1584,1585,5,163,0,0,1585,
        1586,3,626,313,0,1586,1588,3,228,114,0,1587,1589,3,626,313,0,1588,
        1587,1,0,0,0,1588,1589,1,0,0,0,1589,1591,1,0,0,0,1590,1592,3,238,
        119,0,1591,1590,1,0,0,0,1591,1592,1,0,0,0,1592,1608,1,0,0,0,1593,
        1594,5,163,0,0,1594,1595,3,626,313,0,1595,1600,3,228,114,0,1596,
        1598,3,626,313,0,1597,1596,1,0,0,0,1597,1598,1,0,0,0,1598,1599,1,
        0,0,0,1599,1601,3,238,119,0,1600,1597,1,0,0,0,1600,1601,1,0,0,0,
        1601,1603,1,0,0,0,1602,1604,3,626,313,0,1603,1602,1,0,0,0,1603,1604,
        1,0,0,0,1604,1605,1,0,0,0,1605,1606,3,226,113,0,1606,1608,1,0,0,
        0,1607,1582,1,0,0,0,1607,1593,1,0,0,0,1608,1610,1,0,0,0,1609,1611,
        3,276,138,0,1610,1609,1,0,0,0,1610,1611,1,0,0,0,1611,1613,1,0,0,
        0,1612,1614,3,218,109,0,1613,1612,1,0,0,0,1613,1614,1,0,0,0,1614,
        1616,1,0,0,0,1615,1617,3,632,316,0,1616,1615,1,0,0,0,1617,1618,1,
        0,0,0,1618,1616,1,0,0,0,1618,1619,1,0,0,0,1619,1620,1,0,0,0,1620,
        1621,5,72,0,0,1621,1622,3,626,313,0,1622,1623,5,163,0,0,1623,1624,
        3,220,110,0,1624,211,1,0,0,0,1625,1626,3,222,111,0,1626,1627,3,626,
        313,0,1627,1629,1,0,0,0,1628,1625,1,0,0,0,1628,1629,1,0,0,0,1629,
        1670,1,0,0,0,1630,1631,3,224,112,0,1631,1632,3,626,313,0,1632,1634,
        1,0,0,0,1633,1630,1,0,0,0,1633,1634,1,0,0,0,1634,1635,1,0,0,0,1635,
        1636,5,84,0,0,1636,1637,3,626,313,0,1637,1642,3,230,115,0,1638,1640,
        3,626,313,0,1639,1638,1,0,0,0,1639,1640,1,0,0,0,1640,1641,1,0,0,
        0,1641,1643,3,238,119,0,1642,1639,1,0,0,0,1642,1643,1,0,0,0,1643,
        1648,1,0,0,0,1644,1646,3,626,313,0,1645,1644,1,0,0,0,1645,1646,1,
        0,0,0,1646,1647,1,0,0,0,1647,1649,3,234,117,0,1648,1645,1,0,0,0,
        1648,1649,1,0,0,0,1649,1671,1,0,0,0,1650,1651,5,84,0,0,1651,1652,
        3,626,313,0,1652,1657,3,230,115,0,1653,1655,3,626,313,0,1654,1653,
        1,0,0,0,1654,1655,1,0,0,0,1655,1656,1,0,0,0,1656,1658,3,238,119,
        0,1657,1654,1,0,0,0,1657,1658,1,0,0,0,1658,1663,1,0,0,0,1659,1661,
        3,626,313,0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,1662,1,0,0,
        0,1662,1664,3,234,117,0,1663,1660,1,0,0,0,1663,1664,1,0,0,0,1664,
        1666,1,0,0,0,1665,1667,3,626,313,0,1666,1665,1,0,0,0,1666,1667,1,
        0,0,0,1667,1668,1,0,0,0,1668,1669,3,226,113,0,1669,1671,1,0,0,0,
        1670,1633,1,0,0,0,1670,1650,1,0,0,0,1671,1673,1,0,0,0,1672,1674,
        3,276,138,0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,1676,1,0,0,
        0,1675,1677,3,218,109,0,1676,1675,1,0,0,0,1676,1677,1,0,0,0,1677,
        1679,1,0,0,0,1678,1680,3,632,316,0,1679,1678,1,0,0,0,1680,1681,1,
        0,0,0,1681,1679,1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,
        1684,5,72,0,0,1684,1685,3,626,313,0,1685,1686,5,84,0,0,1686,1687,
        3,220,110,0,1687,213,1,0,0,0,1688,1689,3,222,111,0,1689,1690,3,626,
        313,0,1690,1692,1,0,0,0,1691,1688,1,0,0,0,1691,1692,1,0,0,0,1692,
        1734,1,0,0,0,1693,1694,3,224,112,0,1694,1695,3,626,313,0,1695,1697,
        1,0,0,0,1696,1693,1,0,0,0,1696,1697,1,0,0,0,1697,1698,1,0,0,0,1698,
        1699,5,137,0,0,1699,1700,3,626,313,0,1700,1701,5,85,0,0,1701,1702,
        3,626,313,0,1702,1707,3,230,115,0,1703,1705,3,626,313,0,1704,1703,
        1,0,0,0,1704,1705,1,0,0,0,1705,1706,1,0,0,0,1706,1708,3,238,119,
        0,1707,1704,1,0,0,0,1707,1708,1,0,0,0,1708,1713,1,0,0,0,1709,1711,
        3,626,313,0,1710,1709,1,0,0,0,1710,1711,1,0,0,0,1711,1712,1,0,0,
        0,1712,1714,3,234,117,0,1713,1710,1,0,0,0,1713,1714,1,0,0,0,1714,
        1735,1,0,0,0,1715,1716,5,137,0,0,1716,1717,3,626,313,0,1717,1718,
        5,85,0,0,1718,1719,3,626,313,0,1719,1721,3,230,115,0,1720,1722,3,
        238,119,0,1721,1720,1,0,0,0,1721,1722,1,0,0,0,1722,1727,1,0,0,0,
        1723,1725,3,626,313,0,1724,1723,1,0,0,0,1724,1725,1,0,0,0,1725,1726,
        1,0,0,0,1726,1728,3,234,117,0,1727,1724,1,0,0,0,1727,1728,1,0,0,
        0,1728,1730,1,0,0,0,1729,1731,3,626,313,0,1730,1729,1,0,0,0,1730,
        1731,1,0,0,0,1731,1732,1,0,0,0,1732,1733,3,226,113,0,1733,1735,1,
        0,0,0,1734,1696,1,0,0,0,1734,1715,1,0,0,0,1735,1737,1,0,0,0,1736,
        1738,3,276,138,0,1737,1736,1,0,0,0,1737,1738,1,0,0,0,1738,1740,1,
        0,0,0,1739,1741,3,218,109,0,1740,1739,1,0,0,0,1740,1741,1,0,0,0,
        1741,1743,1,0,0,0,1742,1744,3,632,316,0,1743,1742,1,0,0,0,1744,1745,
        1,0,0,0,1745,1743,1,0,0,0,1745,1746,1,0,0,0,1746,1747,1,0,0,0,1747,
        1748,5,72,0,0,1748,1749,3,626,313,0,1749,1750,5,137,0,0,1750,1751,
        3,220,110,0,1751,215,1,0,0,0,1752,1753,3,222,111,0,1753,1754,3,626,
        313,0,1754,1756,1,0,0,0,1755,1752,1,0,0,0,1755,1756,1,0,0,0,1756,
        1783,1,0,0,0,1757,1758,3,224,112,0,1758,1759,3,626,313,0,1759,1761,
        1,0,0,0,1760,1757,1,0,0,0,1760,1761,1,0,0,0,1761,1762,1,0,0,0,1762,
        1763,5,137,0,0,1763,1764,3,626,313,0,1764,1765,7,4,0,0,1765,1766,
        3,626,313,0,1766,1768,3,228,114,0,1767,1769,3,626,313,0,1768,1767,
        1,0,0,0,1768,1769,1,0,0,0,1769,1770,1,0,0,0,1770,1771,3,240,120,
        0,1771,1784,1,0,0,0,1772,1773,5,137,0,0,1773,1774,3,626,313,0,1774,
        1775,7,4,0,0,1775,1776,3,626,313,0,1776,1777,3,228,114,0,1777,1779,
        3,240,120,0,1778,1780,3,626,313,0,1779,1778,1,0,0,0,1779,1780,1,
        0,0,0,1780,1781,1,0,0,0,1781,1782,3,226,113,0,1782,1784,1,0,0,0,
        1783,1760,1,0,0,0,1783,1772,1,0,0,0,1784,1786,1,0,0,0,1785,1787,
        3,276,138,0,1786,1785,1,0,0,0,1786,1787,1,0,0,0,1787,1789,1,0,0,
        0,1788,1790,3,218,109,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,
        1792,1,0,0,0,1791,1793,3,632,316,0,1792,1791,1,0,0,0,1793,1794,1,
        0,0,0,1794,1792,1,0,0,0,1794,1795,1,0,0,0,1795,1796,1,0,0,0,1796,
        1797,5,72,0,0,1797,1798,3,626,313,0,1798,1799,5,137,0,0,1799,1800,
        3,220,110,0,1800,217,1,0,0,0,1801,1803,3,632,316,0,1802,1801,1,0,
        0,0,1803,1806,1,0,0,0,1804,1802,1,0,0,0,1804,1805,1,0,0,0,1805,1807,
        1,0,0,0,1806,1804,1,0,0,0,1807,1808,3,630,315,0,1808,1809,3,284,
        142,0,1809,219,1,0,0,0,1810,1812,3,626,313,0,1811,1810,1,0,0,0,1811,
        1812,1,0,0,0,1812,1813,1,0,0,0,1813,1827,5,259,0,0,1814,1816,3,626,
        313,0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,1817,1,0,0,0,1817,
        1827,3,636,318,0,1818,1820,5,265,0,0,1819,1818,1,0,0,0,1819,1820,
        1,0,0,0,1820,1821,1,0,0,0,1821,1823,5,263,0,0,1822,1824,5,265,0,
        0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,1825,1,0,0,0,1825,1827,
        3,294,147,0,1826,1811,1,0,0,0,1826,1815,1,0,0,0,1826,1819,1,0,0,
        0,1827,221,1,0,0,0,1828,1829,7,5,0,0,1829,223,1,0,0,0,1830,1831,
        5,159,0,0,1831,225,1,0,0,0,1832,1833,5,159,0,0,1833,227,1,0,0,0,
        1834,1837,3,640,320,0,1835,1837,3,232,116,0,1836,1834,1,0,0,0,1836,
        1835,1,0,0,0,1837,229,1,0,0,0,1838,1842,3,676,338,0,1839,1842,3,
        640,320,0,1840,1842,3,232,116,0,1841,1838,1,0,0,0,1841,1839,1,0,
        0,0,1841,1840,1,0,0,0,1842,231,1,0,0,0,1843,1847,3,270,135,0,1844,
        1847,3,272,136,0,1845,1847,3,274,137,0,1846,1843,1,0,0,0,1846,1844,
        1,0,0,0,1846,1845,1,0,0,0,1847,233,1,0,0,0,1848,1849,5,10,0,0,1849,
        1850,3,626,313,0,1850,1852,3,618,309,0,1851,1853,3,626,313,0,1852,
        1851,1,0,0,0,1852,1853,1,0,0,0,1853,1855,1,0,0,0,1854,1856,3,236,
        118,0,1855,1854,1,0,0,0,1855,1856,1,0,0,0,1856,235,1,0,0,0,1857,
        1859,5,236,0,0,1858,1860,3,626,313,0,1859,1858,1,0,0,0,1859,1860,
        1,0,0,0,1860,1861,1,0,0,0,1861,1862,5,247,0,0,1862,237,1,0,0,0,1863,
        1865,5,236,0,0,1864,1866,3,626,313,0,1865,1864,1,0,0,0,1865,1866,
        1,0,0,0,1866,1868,1,0,0,0,1867,1869,3,242,121,0,1868,1867,1,0,0,
        0,1868,1869,1,0,0,0,1869,1871,1,0,0,0,1870,1872,3,626,313,0,1871,
        1870,1,0,0,0,1871,1872,1,0,0,0,1872,1873,1,0,0,0,1873,1874,5,247,
        0,0,1874,239,1,0,0,0,1875,1877,5,236,0,0,1876,1878,3,626,313,0,1877,
        1876,1,0,0,0,1877,1878,1,0,0,0,1878,1887,1,0,0,0,1879,1881,3,242,
        121,0,1880,1882,3,626,313,0,1881,1880,1,0,0,0,1881,1882,1,0,0,0,
        1882,1883,1,0,0,0,1883,1885,5,227,0,0,1884,1886,3,626,313,0,1885,
        1884,1,0,0,0,1885,1886,1,0,0,0,1886,1888,1,0,0,0,1887,1879,1,0,0,
        0,1887,1888,1,0,0,0,1888,1889,1,0,0,0,1889,1891,3,248,124,0,1890,
        1892,3,626,313,0,1891,1890,1,0,0,0,1891,1892,1,0,0,0,1892,1893,1,
        0,0,0,1893,1894,5,247,0,0,1894,241,1,0,0,0,1895,1897,3,244,122,0,
        1896,1898,3,626,313,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,1899,
        1,0,0,0,1899,1901,5,227,0,0,1900,1902,3,626,313,0,1901,1900,1,0,
        0,0,1901,1902,1,0,0,0,1902,1903,1,0,0,0,1903,1904,3,246,123,0,1904,
        1919,1,0,0,0,1905,1914,3,244,122,0,1906,1908,3,626,313,0,1907,1906,
        1,0,0,0,1907,1908,1,0,0,0,1908,1909,1,0,0,0,1909,1911,5,227,0,0,
        1910,1912,3,626,313,0,1911,1910,1,0,0,0,1911,1912,1,0,0,0,1912,1913,
        1,0,0,0,1913,1915,3,254,127,0,1914,1907,1,0,0,0,1914,1915,1,0,0,
        0,1915,1919,1,0,0,0,1916,1919,3,246,123,0,1917,1919,3,254,127,0,
        1918,1895,1,0,0,0,1918,1905,1,0,0,0,1918,1916,1,0,0,0,1918,1917,
        1,0,0,0,1919,243,1,0,0,0,1920,1931,3,250,125,0,1921,1923,3,626,313,
        0,1922,1921,1,0,0,0,1922,1923,1,0,0,0,1923,1924,1,0,0,0,1924,1926,
        5,227,0,0,1925,1927,3,626,313,0,1926,1925,1,0,0,0,1926,1927,1,0,
        0,0,1927,1928,1,0,0,0,1928,1930,3,250,125,0,1929,1922,1,0,0,0,1930,
        1933,1,0,0,0,1931,1929,1,0,0,0,1931,1932,1,0,0,0,1932,245,1,0,0,
        0,1933,1931,1,0,0,0,1934,1945,3,252,126,0,1935,1937,3,626,313,0,
        1936,1935,1,0,0,0,1936,1937,1,0,0,0,1937,1938,1,0,0,0,1938,1940,
        5,227,0,0,1939,1941,3,626,313,0,1940,1939,1,0,0,0,1940,1941,1,0,
        0,0,1941,1942,1,0,0,0,1942,1944,3,252,126,0,1943,1936,1,0,0,0,1944,
        1947,1,0,0,0,1945,1943,1,0,0,0,1945,1946,1,0,0,0,1946,247,1,0,0,
        0,1947,1945,1,0,0,0,1948,1949,3,250,125,0,1949,249,1,0,0,0,1950,
        1951,3,264,132,0,1951,1952,3,626,313,0,1952,1954,1,0,0,0,1953,1950,
        1,0,0,0,1953,1954,1,0,0,0,1954,1955,1,0,0,0,1955,1956,3,256,128,
        0,1956,251,1,0,0,0,1957,1958,3,262,131,0,1958,1959,3,626,313,0,1959,
        1961,3,256,128,0,1960,1962,3,626,313,0,1961,1960,1,0,0,0,1961,1962,
        1,0,0,0,1962,1964,1,0,0,0,1963,1965,3,268,134,0,1964,1963,1,0,0,
        0,1964,1965,1,0,0,0,1965,253,1,0,0,0,1966,1967,5,133,0,0,1967,1968,
        3,626,313,0,1968,1969,3,640,320,0,1969,1971,5,236,0,0,1970,1972,
        3,626,313,0,1971,1970,1,0,0,0,1971,1972,1,0,0,0,1972,1973,1,0,0,
        0,1973,1983,5,247,0,0,1974,1975,3,626,313,0,1975,1976,5,10,0,0,1976,
        1981,3,626,313,0,1977,1982,5,198,0,0,1978,1979,5,249,0,0,1979,1980,
        5,198,0,0,1980,1982,5,250,0,0,1981,1977,1,0,0,0,1981,1978,1,0,0,
        0,1982,1984,1,0,0,0,1983,1974,1,0,0,0,1983,1984,1,0,0,0,1984,255,
        1,0,0,0,1985,1988,3,258,129,0,1986,1988,3,260,130,0,1987,1985,1,
        0,0,0,1987,1986,1,0,0,0,1988,257,1,0,0,0,1989,1991,3,640,320,0,1990,
        1992,3,266,133,0,1991,1990,1,0,0,0,1991,1992,1,0,0,0,1992,259,1,
        0,0,0,1993,1995,3,676,338,0,1994,1996,3,236,118,0,1995,1994,1,0,
        0,0,1995,1996,1,0,0,0,1996,261,1,0,0,0,1997,2001,5,130,0,0,1998,
        1999,3,626,313,0,1999,2000,3,264,132,0,2000,2002,1,0,0,0,2001,1998,
        1,0,0,0,2001,2002,1,0,0,0,2002,2008,1,0,0,0,2003,2004,3,264,132,
        0,2004,2005,3,626,313,0,2005,2006,5,130,0,0,2006,2008,1,0,0,0,2007,
        1997,1,0,0,0,2007,2003,1,0,0,0,2008,263,1,0,0,0,2009,2010,7,6,0,
        0,2010,265,1,0,0,0,2011,2013,3,236,118,0,2012,2011,1,0,0,0,2012,
        2013,1,0,0,0,2013,2014,1,0,0,0,2014,2015,3,626,313,0,2015,2016,5,
        10,0,0,2016,2019,3,626,313,0,2017,2020,3,618,309,0,2018,2020,5,6,
        0,0,2019,2017,1,0,0,0,2019,2018,1,0,0,0,2020,267,1,0,0,0,2021,2023,
        5,230,0,0,2022,2024,3,626,313,0,2023,2022,1,0,0,0,2023,2024,1,0,
        0,0,2024,2025,1,0,0,0,2025,2026,3,606,303,0,2026,269,1,0,0,0,2027,
        2028,3,640,320,0,2028,271,1,0,0,0,2029,2030,3,640,320,0,2030,273,
        1,0,0,0,2031,2032,7,7,0,0,2032,275,1,0,0,0,2033,2034,3,278,139,0,
        2034,277,1,0,0,0,2035,2037,3,280,140,0,2036,2035,1,0,0,0,2037,2038,
        1,0,0,0,2038,2036,1,0,0,0,2038,2039,1,0,0,0,2039,279,1,0,0,0,2040,
        2042,3,632,316,0,2041,2040,1,0,0,0,2042,2045,1,0,0,0,2043,2041,1,
        0,0,0,2043,2044,1,0,0,0,2044,2046,1,0,0,0,2045,2043,1,0,0,0,2046,
        2047,3,630,315,0,2047,2048,3,284,142,0,2048,2067,1,0,0,0,2049,2051,
        3,632,316,0,2050,2049,1,0,0,0,2051,2052,1,0,0,0,2052,2050,1,0,0,
        0,2052,2053,1,0,0,0,2053,2054,1,0,0,0,2054,2055,3,294,147,0,2055,
        2067,1,0,0,0,2056,2067,3,282,141,0,2057,2059,3,632,316,0,2058,2057,
        1,0,0,0,2059,2062,1,0,0,0,2060,2058,1,0,0,0,2060,2061,1,0,0,0,2061,
        2063,1,0,0,0,2062,2060,1,0,0,0,2063,2064,3,630,315,0,2064,2065,3,
        556,278,0,2065,2067,1,0,0,0,2066,2043,1,0,0,0,2066,2050,1,0,0,0,
        2066,2056,1,0,0,0,2066,2060,1,0,0,0,2067,281,1,0,0,0,2068,2091,3,
        296,148,0,2069,2071,3,632,316,0,2070,2069,1,0,0,0,2071,2072,1,0,
        0,0,2072,2070,1,0,0,0,2072,2073,1,0,0,0,2073,2074,1,0,0,0,2074,2075,
        3,400,200,0,2075,2091,1,0,0,0,2076,2078,3,632,316,0,2077,2076,1,
        0,0,0,2078,2079,1,0,0,0,2079,2077,1,0,0,0,2079,2080,1,0,0,0,2080,
        2081,1,0,0,0,2081,2082,3,454,227,0,2082,2091,1,0,0,0,2083,2085,3,
        632,316,0,2084,2083,1,0,0,0,2085,2086,1,0,0,0,2086,2084,1,0,0,0,
        2086,2087,1,0,0,0,2087,2088,1,0,0,0,2088,2089,3,466,233,0,2089,2091,
        1,0,0,0,2090,2068,1,0,0,0,2090,2070,1,0,0,0,2090,2077,1,0,0,0,2090,
        2084,1,0,0,0,2091,283,1,0,0,0,2092,2093,3,290,145,0,2093,2094,5,
        263,0,0,2094,2100,1,0,0,0,2095,2097,3,292,146,0,2096,2098,5,263,
        0,0,2097,2096,1,0,0,0,2097,2098,1,0,0,0,2098,2100,1,0,0,0,2099,2092,
        1,0,0,0,2099,2095,1,0,0,0,2100,285,1,0,0,0,2101,2104,3,290,145,0,
        2102,2104,3,292,146,0,2103,2101,1,0,0,0,2103,2102,1,0,0,0,2104,287,
        1,0,0,0,2105,2114,3,286,143,0,2106,2108,3,626,313,0,2107,2106,1,
        0,0,0,2107,2108,1,0,0,0,2108,2109,1,0,0,0,2109,2111,5,227,0,0,2110,
        2112,3,626,313,0,2111,2110,1,0,0,0,2111,2112,1,0,0,0,2112,2113,1,
        0,0,0,2113,2115,3,286,143,0,2114,2107,1,0,0,0,2114,2115,1,0,0,0,
        2115,289,1,0,0,0,2116,2117,3,640,320,0,2117,291,1,0,0,0,2118,2119,
        5,255,0,0,2119,293,1,0,0,0,2120,2121,5,260,0,0,2121,295,1,0,0,0,
        2122,2124,3,632,316,0,2123,2122,1,0,0,0,2124,2127,1,0,0,0,2125,2123,
        1,0,0,0,2125,2126,1,0,0,0,2126,2129,1,0,0,0,2127,2125,1,0,0,0,2128,
        2130,3,628,314,0,2129,2128,1,0,0,0,2130,2131,1,0,0,0,2131,2129,1,
        0,0,0,2131,2132,1,0,0,0,2132,2133,1,0,0,0,2133,2134,3,344,172,0,
        2134,2143,1,0,0,0,2135,2137,3,632,316,0,2136,2135,1,0,0,0,2137,2138,
        1,0,0,0,2138,2136,1,0,0,0,2138,2139,1,0,0,0,2139,2140,1,0,0,0,2140,
        2141,3,298,149,0,2141,2143,1,0,0,0,2142,2125,1,0,0,0,2142,2136,1,
        0,0,0,2143,297,1,0,0,0,2144,2165,3,300,150,0,2145,2165,3,302,151,
        0,2146,2165,3,304,152,0,2147,2165,3,332,166,0,2148,2165,3,334,167,
        0,2149,2165,3,342,171,0,2150,2165,3,350,175,0,2151,2165,3,362,181,
        0,2152,2165,3,374,187,0,2153,2165,3,376,188,0,2154,2165,3,378,189,
        0,2155,2165,3,380,190,0,2156,2165,3,382,191,0,2157,2165,3,384,192,
        0,2158,2165,3,322,161,0,2159,2165,3,386,193,0,2160,2165,3,388,194,
        0,2161,2165,3,390,195,0,2162,2165,3,392,196,0,2163,2165,3,398,199,
        0,2164,2144,1,0,0,0,2164,2145,1,0,0,0,2164,2146,1,0,0,0,2164,2147,
        1,0,0,0,2164,2148,1,0,0,0,2164,2149,1,0,0,0,2164,2150,1,0,0,0,2164,
        2151,1,0,0,0,2164,2152,1,0,0,0,2164,2153,1,0,0,0,2164,2154,1,0,0,
        0,2164,2155,1,0,0,0,2164,2156,1,0,0,0,2164,2157,1,0,0,0,2164,2158,
        1,0,0,0,2164,2159,1,0,0,0,2164,2160,1,0,0,0,2164,2161,1,0,0,0,2164,
        2162,1,0,0,0,2164,2163,1,0,0,0,2165,299,1,0,0,0,2166,2167,5,18,0,
        0,2167,2172,3,626,313,0,2168,2173,3,576,288,0,2169,2173,3,580,290,
        0,2170,2173,3,582,291,0,2171,2173,3,600,300,0,2172,2168,1,0,0,0,
        2172,2169,1,0,0,0,2172,2170,1,0,0,0,2172,2171,1,0,0,0,2173,2185,
        1,0,0,0,2174,2178,3,576,288,0,2175,2178,3,580,290,0,2176,2178,3,
        600,300,0,2177,2174,1,0,0,0,2177,2175,1,0,0,0,2177,2176,1,0,0,0,
        2178,2182,1,0,0,0,2179,2180,3,626,313,0,2180,2181,3,584,292,0,2181,
        2183,1,0,0,0,2182,2179,1,0,0,0,2182,2183,1,0,0,0,2183,2185,1,0,0,
        0,2184,2166,1,0,0,0,2184,2177,1,0,0,0,2185,301,1,0,0,0,2186,2187,
        5,201,0,0,2187,2188,3,626,313,0,2188,2190,3,610,305,0,2189,2191,
        3,278,139,0,2190,2189,1,0,0,0,2190,2191,1,0,0,0,2191,2193,1,0,0,
        0,2192,2194,3,632,316,0,2193,2192,1,0,0,0,2194,2195,1,0,0,0,2195,
        2193,1,0,0,0,2195,2196,1,0,0,0,2196,2197,1,0,0,0,2197,2198,5,200,
        0,0,2198,303,1,0,0,0,2199,2202,3,306,153,0,2200,2202,3,308,154,0,
        2201,2199,1,0,0,0,2201,2200,1,0,0,0,2202,305,1,0,0,0,2203,2205,3,
        312,156,0,2204,2206,3,278,139,0,2205,2204,1,0,0,0,2205,2206,1,0,
        0,0,2206,2208,1,0,0,0,2207,2209,3,632,316,0,2208,2207,1,0,0,0,2209,
        2210,1,0,0,0,2210,2208,1,0,0,0,2210,2211,1,0,0,0,2211,2212,1,0,0,
        0,2212,2213,5,121,0,0,2213,307,1,0,0,0,2214,2216,3,312,156,0,2215,
        2217,3,278,139,0,2216,2215,1,0,0,0,2216,2217,1,0,0,0,2217,2219,1,
        0,0,0,2218,2220,3,632,316,0,2219,2218,1,0,0,0,2220,2221,1,0,0,0,
        2221,2219,1,0,0,0,2221,2222,1,0,0,0,2222,2230,1,0,0,0,2223,2231,
        5,121,0,0,2224,2226,3,310,155,0,2225,2227,3,626,313,0,2226,2225,
        1,0,0,0,2226,2227,1,0,0,0,2227,2228,1,0,0,0,2228,2229,5,227,0,0,
        2229,2231,1,0,0,0,2230,2223,1,0,0,0,2230,2224,1,0,0,0,2231,2232,
        1,0,0,0,2232,2233,3,626,313,0,2233,2234,3,616,308,0,2234,309,1,0,
        0,0,2235,2238,3,308,154,0,2236,2238,3,326,163,0,2237,2235,1,0,0,
        0,2237,2236,1,0,0,0,2238,311,1,0,0,0,2239,2240,5,83,0,0,2240,2241,
        3,626,313,0,2241,2243,3,616,308,0,2242,2244,3,626,313,0,2243,2242,
        1,0,0,0,2243,2244,1,0,0,0,2244,2245,1,0,0,0,2245,2247,5,230,0,0,
        2246,2248,3,626,313,0,2247,2246,1,0,0,0,2247,2248,1,0,0,0,2248,2249,
        1,0,0,0,2249,2250,3,314,157,0,2250,2251,3,626,313,0,2251,2252,5,
        167,0,0,2252,2253,3,626,313,0,2253,2257,3,316,158,0,2254,2255,3,
        626,313,0,2255,2256,3,318,159,0,2256,2258,1,0,0,0,2257,2254,1,0,
        0,0,2257,2258,1,0,0,0,2258,313,1,0,0,0,2259,2260,3,560,280,0,2260,
        315,1,0,0,0,2261,2262,3,560,280,0,2262,317,1,0,0,0,2263,2264,5,160,
        0,0,2264,2265,3,626,313,0,2265,2266,3,320,160,0,2266,319,1,0,0,0,
        2267,2268,3,560,280,0,2268,321,1,0,0,0,2269,2272,3,324,162,0,2270,
        2272,3,326,163,0,2271,2269,1,0,0,0,2271,2270,1,0,0,0,2272,323,1,
        0,0,0,2273,2275,3,328,164,0,2274,2276,3,278,139,0,2275,2274,1,0,
        0,0,2275,2276,1,0,0,0,2276,2278,1,0,0,0,2277,2279,3,632,316,0,2278,
        2277,1,0,0,0,2279,2280,1,0,0,0,2280,2278,1,0,0,0,2280,2281,1,0,0,
        0,2281,2282,1,0,0,0,2282,2283,5,121,0,0,2283,325,1,0,0,0,2284,2286,
        3,328,164,0,2285,2287,3,278,139,0,2286,2285,1,0,0,0,2286,2287,1,
        0,0,0,2287,2288,1,0,0,0,2288,2296,3,632,316,0,2289,2297,5,121,0,
        0,2290,2292,3,310,155,0,2291,2293,3,626,313,0,2292,2291,1,0,0,0,
        2292,2293,1,0,0,0,2293,2294,1,0,0,0,2294,2295,5,227,0,0,2295,2297,
        1,0,0,0,2296,2289,1,0,0,0,2296,2290,1,0,0,0,2297,2298,1,0,0,0,2298,
        2299,3,626,313,0,2299,2300,3,616,308,0,2300,327,1,0,0,0,2301,2302,
        5,83,0,0,2302,2303,3,626,313,0,2303,2305,5,67,0,0,2304,2306,3,626,
        313,0,2305,2304,1,0,0,0,2305,2306,1,0,0,0,2306,2307,1,0,0,0,2307,
        2309,3,616,308,0,2308,2310,3,626,313,0,2309,2308,1,0,0,0,2309,2310,
        1,0,0,0,2310,2311,1,0,0,0,2311,2313,5,93,0,0,2312,2314,3,626,313,
        0,2313,2312,1,0,0,0,2313,2314,1,0,0,0,2314,2315,1,0,0,0,2315,2316,
        3,330,165,0,2316,329,1,0,0,0,2317,2318,3,560,280,0,2318,331,1,0,
        0,0,2319,2320,5,78,0,0,2320,2321,3,626,313,0,2321,2322,5,83,0,0,
        2322,333,1,0,0,0,2323,2328,5,64,0,0,2324,2326,3,626,313,0,2325,2324,
        1,0,0,0,2325,2326,1,0,0,0,2326,2327,1,0,0,0,2327,2329,3,336,168,
        0,2328,2325,1,0,0,0,2328,2329,1,0,0,0,2329,2331,1,0,0,0,2330,2332,
        3,278,139,0,2331,2330,1,0,0,0,2331,2332,1,0,0,0,2332,2334,1,0,0,
        0,2333,2335,3,632,316,0,2334,2333,1,0,0,0,2335,2336,1,0,0,0,2336,
        2334,1,0,0,0,2336,2337,1,0,0,0,2337,2338,1,0,0,0,2338,2343,5,112,
        0,0,2339,2341,3,626,313,0,2340,2339,1,0,0,0,2340,2341,1,0,0,0,2341,
        2342,1,0,0,0,2342,2344,3,336,168,0,2343,2340,1,0,0,0,2343,2344,1,
        0,0,0,2344,335,1,0,0,0,2345,2348,3,338,169,0,2346,2348,3,340,170,
        0,2347,2345,1,0,0,0,2347,2346,1,0,0,0,2348,337,1,0,0,0,2349,2351,
        5,201,0,0,2350,2352,3,626,313,0,2351,2350,1,0,0,0,2351,2352,1,0,
        0,0,2352,2353,1,0,0,0,2353,2354,3,610,305,0,2354,339,1,0,0,0,2355,
        2357,5,173,0,0,2356,2358,3,626,313,0,2357,2356,1,0,0,0,2357,2358,
        1,0,0,0,2358,2359,1,0,0,0,2359,2360,3,610,305,0,2360,341,1,0,0,0,
        2361,2362,5,78,0,0,2362,2363,3,626,313,0,2363,2364,5,64,0,0,2364,
        343,1,0,0,0,2365,2367,5,90,0,0,2366,2368,3,626,313,0,2367,2366,1,
        0,0,0,2367,2368,1,0,0,0,2368,2369,1,0,0,0,2369,2371,3,610,305,0,
        2370,2372,3,626,313,0,2371,2370,1,0,0,0,2371,2372,1,0,0,0,2372,2373,
        1,0,0,0,2373,2375,5,166,0,0,2374,2376,3,278,139,0,2375,2374,1,0,
        0,0,2375,2376,1,0,0,0,2376,2380,1,0,0,0,2377,2379,3,346,173,0,2378,
        2377,1,0,0,0,2379,2382,1,0,0,0,2380,2378,1,0,0,0,2380,2381,1,0,0,
        0,2381,2384,1,0,0,0,2382,2380,1,0,0,0,2383,2385,3,348,174,0,2384,
        2383,1,0,0,0,2384,2385,1,0,0,0,2385,2387,1,0,0,0,2386,2388,3,632,
        316,0,2387,2386,1,0,0,0,2388,2389,1,0,0,0,2389,2387,1,0,0,0,2389,
        2390,1,0,0,0,2390,2396,1,0,0,0,2391,2392,5,72,0,0,2392,2393,3,626,
        313,0,2393,2394,5,90,0,0,2394,2397,1,0,0,0,2395,2397,5,71,0,0,2396,
        2391,1,0,0,0,2396,2395,1,0,0,0,2397,345,1,0,0,0,2398,2400,3,632,
        316,0,2399,2398,1,0,0,0,2400,2403,1,0,0,0,2401,2399,1,0,0,0,2401,
        2402,1,0,0,0,2402,2404,1,0,0,0,2403,2401,1,0,0,0,2404,2405,3,628,
        314,0,2405,2407,5,69,0,0,2406,2408,3,626,313,0,2407,2406,1,0,0,0,
        2407,2408,1,0,0,0,2408,2409,1,0,0,0,2409,2411,3,610,305,0,2410,2412,
        3,626,313,0,2411,2410,1,0,0,0,2411,2412,1,0,0,0,2412,2413,1,0,0,
        0,2413,2415,5,166,0,0,2414,2416,3,628,314,0,2415,2414,1,0,0,0,2415,
        2416,1,0,0,0,2416,2418,1,0,0,0,2417,2419,3,278,139,0,2418,2417,1,
        0,0,0,2418,2419,1,0,0,0,2419,2439,1,0,0,0,2420,2422,3,632,316,0,
        2421,2420,1,0,0,0,2422,2425,1,0,0,0,2423,2421,1,0,0,0,2423,2424,
        1,0,0,0,2424,2426,1,0,0,0,2425,2423,1,0,0,0,2426,2428,5,69,0,0,2427,
        2429,3,626,313,0,2428,2427,1,0,0,0,2428,2429,1,0,0,0,2429,2430,1,
        0,0,0,2430,2432,3,610,305,0,2431,2433,3,626,313,0,2432,2431,1,0,
        0,0,2432,2433,1,0,0,0,2433,2434,1,0,0,0,2434,2436,5,166,0,0,2435,
        2437,3,278,139,0,2436,2435,1,0,0,0,2436,2437,1,0,0,0,2437,2439,1,
        0,0,0,2438,2401,1,0,0,0,2438,2423,1,0,0,0,2439,347,1,0,0,0,2440,
        2441,3,628,314,0,2441,2443,5,68,0,0,2442,2444,3,628,314,0,2443,2442,
        1,0,0,0,2443,2444,1,0,0,0,2444,2446,1,0,0,0,2445,2447,3,626,313,
        0,2446,2445,1,0,0,0,2446,2447,1,0,0,0,2447,2449,1,0,0,0,2448,2450,
        3,278,139,0,2449,2448,1,0,0,0,2449,2450,1,0,0,0,2450,349,1,0,0,0,
        2451,2454,3,352,176,0,2452,2454,3,354,177,0,2453,2451,1,0,0,0,2453,
        2452,1,0,0,0,2454,351,1,0,0,0,2455,2456,5,90,0,0,2456,2457,3,626,
        313,0,2457,2458,3,610,305,0,2458,2459,3,626,313,0,2459,2460,5,166,
        0,0,2460,2461,3,626,313,0,2461,2465,3,358,179,0,2462,2463,3,626,
        313,0,2463,2464,3,356,178,0,2464,2466,1,0,0,0,2465,2462,1,0,0,0,
        2465,2466,1,0,0,0,2466,353,1,0,0,0,2467,2468,5,90,0,0,2468,2469,
        3,626,313,0,2469,2470,3,610,305,0,2470,2471,3,626,313,0,2471,2472,
        5,166,0,0,2472,2473,3,626,313,0,2473,2474,3,356,178,0,2474,355,1,
        0,0,0,2475,2477,5,68,0,0,2476,2478,3,626,313,0,2477,2476,1,0,0,0,
        2477,2478,1,0,0,0,2478,2480,1,0,0,0,2479,2481,3,358,179,0,2480,2479,
        1,0,0,0,2480,2481,1,0,0,0,2481,357,1,0,0,0,2482,2492,3,286,143,0,
        2483,2485,5,263,0,0,2484,2486,3,626,313,0,2485,2484,1,0,0,0,2485,
        2486,1,0,0,0,2486,2488,1,0,0,0,2487,2489,3,360,180,0,2488,2487,1,
        0,0,0,2488,2489,1,0,0,0,2489,2491,1,0,0,0,2490,2483,1,0,0,0,2491,
        2494,1,0,0,0,2492,2490,1,0,0,0,2492,2493,1,0,0,0,2493,2512,1,0,0,
        0,2494,2492,1,0,0,0,2495,2497,5,263,0,0,2496,2495,1,0,0,0,2496,2497,
        1,0,0,0,2497,2498,1,0,0,0,2498,2508,3,360,180,0,2499,2501,5,263,
        0,0,2500,2502,3,626,313,0,2501,2500,1,0,0,0,2501,2502,1,0,0,0,2502,
        2504,1,0,0,0,2503,2505,3,360,180,0,2504,2503,1,0,0,0,2504,2505,1,
        0,0,0,2505,2507,1,0,0,0,2506,2499,1,0,0,0,2507,2510,1,0,0,0,2508,
        2506,1,0,0,0,2508,2509,1,0,0,0,2509,2512,1,0,0,0,2510,2508,1,0,0,
        0,2511,2482,1,0,0,0,2511,2496,1,0,0,0,2512,359,1,0,0,0,2513,2518,
        3,466,233,0,2514,2518,3,454,227,0,2515,2518,3,400,200,0,2516,2518,
        3,298,149,0,2517,2513,1,0,0,0,2517,2514,1,0,0,0,2517,2515,1,0,0,
        0,2517,2516,1,0,0,0,2518,361,1,0,0,0,2519,2520,5,153,0,0,2520,2521,
        3,626,313,0,2521,2522,5,19,0,0,2522,2523,3,626,313,0,2523,2527,3,
        370,185,0,2524,2526,3,364,182,0,2525,2524,1,0,0,0,2526,2529,1,0,
        0,0,2527,2525,1,0,0,0,2527,2528,1,0,0,0,2528,2531,1,0,0,0,2529,2527,
        1,0,0,0,2530,2532,3,366,183,0,2531,2530,1,0,0,0,2531,2532,1,0,0,
        0,2532,2534,1,0,0,0,2533,2535,3,632,316,0,2534,2533,1,0,0,0,2535,
        2536,1,0,0,0,2536,2534,1,0,0,0,2536,2537,1,0,0,0,2537,2538,1,0,0,
        0,2538,2539,5,72,0,0,2539,2540,3,626,313,0,2540,2541,5,153,0,0,2541,
        363,1,0,0,0,2542,2544,3,632,316,0,2543,2542,1,0,0,0,2544,2545,1,
        0,0,0,2545,2543,1,0,0,0,2545,2546,1,0,0,0,2546,2547,1,0,0,0,2547,
        2549,5,19,0,0,2548,2550,3,626,313,0,2549,2548,1,0,0,0,2549,2550,
        1,0,0,0,2550,2551,1,0,0,0,2551,2562,3,368,184,0,2552,2554,3,626,
        313,0,2553,2552,1,0,0,0,2553,2554,1,0,0,0,2554,2555,1,0,0,0,2555,
        2557,5,227,0,0,2556,2558,3,626,313,0,2557,2556,1,0,0,0,2557,2558,
        1,0,0,0,2558,2559,1,0,0,0,2559,2561,3,368,184,0,2560,2553,1,0,0,
        0,2561,2564,1,0,0,0,2562,2560,1,0,0,0,2562,2563,1,0,0,0,2563,2566,
        1,0,0,0,2564,2562,1,0,0,0,2565,2567,3,278,139,0,2566,2565,1,0,0,
        0,2566,2567,1,0,0,0,2567,365,1,0,0,0,2568,2570,3,632,316,0,2569,
        2568,1,0,0,0,2570,2571,1,0,0,0,2571,2569,1,0,0,0,2571,2572,1,0,0,
        0,2572,2573,1,0,0,0,2573,2574,5,19,0,0,2574,2575,3,626,313,0,2575,
        2577,5,68,0,0,2576,2578,3,278,139,0,2577,2576,1,0,0,0,2577,2578,
        1,0,0,0,2578,367,1,0,0,0,2579,2598,3,560,280,0,2580,2582,3,314,157,
        0,2581,2583,3,626,313,0,2582,2581,1,0,0,0,2582,2583,1,0,0,0,2583,
        2584,1,0,0,0,2584,2586,5,167,0,0,2585,2587,3,626,313,0,2586,2585,
        1,0,0,0,2586,2587,1,0,0,0,2587,2588,1,0,0,0,2588,2589,3,316,158,
        0,2589,2598,1,0,0,0,2590,2592,5,97,0,0,2591,2590,1,0,0,0,2591,2592,
        1,0,0,0,2592,2593,1,0,0,0,2593,2594,3,626,313,0,2594,2595,3,372,
        186,0,2595,2596,3,560,280,0,2596,2598,1,0,0,0,2597,2579,1,0,0,0,
        2597,2580,1,0,0,0,2597,2591,1,0,0,0,2598,369,1,0,0,0,2599,2600,3,
        560,280,0,2600,371,1,0,0,0,2601,2602,7,8,0,0,2602,373,1,0,0,0,2603,
        2604,5,161,0,0,2604,375,1,0,0,0,2605,2606,5,87,0,0,2606,2607,3,626,
        313,0,2607,2608,5,167,0,0,2608,2611,1,0,0,0,2609,2611,5,89,0,0,2610,
        2605,1,0,0,0,2610,2609,1,0,0,0,2611,2612,1,0,0,0,2612,2613,3,626,
        313,0,2613,2614,3,286,143,0,2614,377,1,0,0,0,2615,2617,5,127,0,0,
        2616,2618,3,626,313,0,2617,2616,1,0,0,0,2617,2618,1,0,0,0,2618,2619,
        1,0,0,0,2619,2620,3,560,280,0,2620,2621,5,89,0,0,2621,2622,3,626,
        313,0,2622,2623,3,288,144,0,2623,379,1,0,0,0,2624,2625,5,87,0,0,
        2625,2626,3,626,313,0,2626,2627,5,163,0,0,2627,2630,1,0,0,0,2628,
        2630,5,88,0,0,2629,2624,1,0,0,0,2629,2628,1,0,0,0,2630,2631,1,0,
        0,0,2631,2632,3,626,313,0,2632,2633,3,286,143,0,2633,381,1,0,0,0,
        2634,2635,5,149,0,0,2635,383,1,0,0,0,2636,2638,5,127,0,0,2637,2639,
        3,626,313,0,2638,2637,1,0,0,0,2638,2639,1,0,0,0,2639,2640,1,0,0,
        0,2640,2642,3,560,280,0,2641,2643,3,626,313,0,2642,2641,1,0,0,0,
        2642,2643,1,0,0,0,2643,2644,1,0,0,0,2644,2645,5,88,0,0,2645,2646,
        3,626,313,0,2646,2647,3,288,144,0,2647,385,1,0,0,0,2648,2649,5,78,
        0,0,2649,2650,3,626,313,0,2650,2651,5,163,0,0,2651,387,1,0,0,0,2652,
        2653,5,78,0,0,2653,2654,3,626,313,0,2654,2655,5,84,0,0,2655,389,
        1,0,0,0,2656,2657,5,78,0,0,2657,2658,3,626,313,0,2658,2659,5,137,
        0,0,2659,391,1,0,0,0,2660,2662,5,143,0,0,2661,2663,3,626,313,0,2662,
        2661,1,0,0,0,2662,2663,1,0,0,0,2663,2664,1,0,0,0,2664,2666,3,640,
        320,0,2665,2667,3,626,313,0,2666,2665,1,0,0,0,2666,2667,1,0,0,0,
        2667,2678,1,0,0,0,2668,2670,5,236,0,0,2669,2671,3,626,313,0,2670,
        2669,1,0,0,0,2670,2671,1,0,0,0,2671,2672,1,0,0,0,2672,2674,3,394,
        197,0,2673,2675,3,626,313,0,2674,2673,1,0,0,0,2674,2675,1,0,0,0,
        2675,2676,1,0,0,0,2676,2677,5,247,0,0,2677,2679,1,0,0,0,2678,2668,
        1,0,0,0,2678,2679,1,0,0,0,2679,393,1,0,0,0,2680,2691,3,396,198,0,
        2681,2683,3,626,313,0,2682,2681,1,0,0,0,2682,2683,1,0,0,0,2683,2684,
        1,0,0,0,2684,2686,5,227,0,0,2685,2687,3,626,313,0,2686,2685,1,0,
        0,0,2686,2687,1,0,0,0,2687,2688,1,0,0,0,2688,2690,3,396,198,0,2689,
        2682,1,0,0,0,2690,2693,1,0,0,0,2691,2689,1,0,0,0,2691,2692,1,0,0,
        0,2692,2695,1,0,0,0,2693,2691,1,0,0,0,2694,2680,1,0,0,0,2694,2695,
        1,0,0,0,2695,395,1,0,0,0,2696,2697,3,560,280,0,2697,397,1,0,0,0,
        2698,2700,5,203,0,0,2699,2701,3,626,313,0,2700,2699,1,0,0,0,2700,
        2701,1,0,0,0,2701,2702,1,0,0,0,2702,2704,3,560,280,0,2703,2705,3,
        278,139,0,2704,2703,1,0,0,0,2704,2705,1,0,0,0,2705,2707,1,0,0,0,
        2706,2708,3,632,316,0,2707,2706,1,0,0,0,2708,2709,1,0,0,0,2709,2707,
        1,0,0,0,2709,2710,1,0,0,0,2710,2711,1,0,0,0,2711,2712,5,72,0,0,2712,
        2713,3,626,313,0,2713,2714,5,203,0,0,2714,399,1,0,0,0,2715,2726,
        3,402,201,0,2716,2726,3,404,202,0,2717,2726,3,406,203,0,2718,2726,
        3,408,204,0,2719,2726,3,430,215,0,2720,2726,3,436,218,0,2721,2726,
        3,448,224,0,2722,2726,3,446,223,0,2723,2726,3,450,225,0,2724,2726,
        3,452,226,0,2725,2715,1,0,0,0,2725,2716,1,0,0,0,2725,2717,1,0,0,
        0,2725,2718,1,0,0,0,2725,2719,1,0,0,0,2725,2720,1,0,0,0,2725,2721,
        1,0,0,0,2725,2722,1,0,0,0,2725,2723,1,0,0,0,2725,2724,1,0,0,0,2726,
        401,1,0,0,0,2727,2729,5,63,0,0,2728,2730,3,626,313,0,2729,2728,1,
        0,0,0,2729,2730,1,0,0,0,2730,2732,1,0,0,0,2731,2733,5,156,0,0,2732,
        2731,1,0,0,0,2732,2733,1,0,0,0,2733,2735,1,0,0,0,2734,2736,3,626,
        313,0,2735,2734,1,0,0,0,2735,2736,1,0,0,0,2736,2737,1,0,0,0,2737,
        2738,3,86,43,0,2738,403,1,0,0,0,2739,2740,5,159,0,0,2740,2741,3,
        626,313,0,2741,2742,3,86,43,0,2742,405,1,0,0,0,2743,2744,3,130,65,
        0,2744,407,1,0,0,0,2745,2749,5,145,0,0,2746,2747,3,626,313,0,2747,
        2748,5,134,0,0,2748,2750,1,0,0,0,2749,2746,1,0,0,0,2749,2750,1,0,
        0,0,2750,2752,1,0,0,0,2751,2753,3,626,313,0,2752,2751,1,0,0,0,2752,
        2753,1,0,0,0,2753,2754,1,0,0,0,2754,2755,3,410,205,0,2755,409,1,
        0,0,0,2756,2767,3,412,206,0,2757,2759,3,626,313,0,2758,2757,1,0,
        0,0,2758,2759,1,0,0,0,2759,2760,1,0,0,0,2760,2762,5,227,0,0,2761,
        2763,3,626,313,0,2762,2761,1,0,0,0,2762,2763,1,0,0,0,2763,2764,1,
        0,0,0,2764,2766,3,412,206,0,2765,2758,1,0,0,0,2766,2769,1,0,0,0,
        2767,2765,1,0,0,0,2767,2768,1,0,0,0,2768,411,1,0,0,0,2769,2767,1,
        0,0,0,2770,2773,3,414,207,0,2771,2773,3,416,208,0,2772,2770,1,0,
        0,0,2772,2771,1,0,0,0,2773,413,1,0,0,0,2774,2775,3,676,338,0,2775,
        2776,3,418,209,0,2776,415,1,0,0,0,2777,2779,3,30,15,0,2778,2780,
        3,626,313,0,2779,2778,1,0,0,0,2779,2780,1,0,0,0,2780,2781,1,0,0,
        0,2781,2782,3,428,214,0,2782,417,1,0,0,0,2783,2785,5,236,0,0,2784,
        2786,3,626,313,0,2785,2784,1,0,0,0,2785,2786,1,0,0,0,2786,2787,1,
        0,0,0,2787,2789,3,420,210,0,2788,2790,3,626,313,0,2789,2788,1,0,
        0,0,2789,2790,1,0,0,0,2790,2791,1,0,0,0,2791,2792,5,247,0,0,2792,
        419,1,0,0,0,2793,2804,3,422,211,0,2794,2796,3,626,313,0,2795,2794,
        1,0,0,0,2795,2796,1,0,0,0,2796,2797,1,0,0,0,2797,2799,5,227,0,0,
        2798,2800,3,626,313,0,2799,2798,1,0,0,0,2799,2800,1,0,0,0,2800,2801,
        1,0,0,0,2801,2803,3,422,211,0,2802,2795,1,0,0,0,2803,2806,1,0,0,
        0,2804,2802,1,0,0,0,2804,2805,1,0,0,0,2805,421,1,0,0,0,2806,2804,
        1,0,0,0,2807,2808,3,424,212,0,2808,2809,3,626,313,0,2809,2811,1,
        0,0,0,2810,2807,1,0,0,0,2810,2811,1,0,0,0,2811,2812,1,0,0,0,2812,
        2813,3,426,213,0,2813,423,1,0,0,0,2814,2816,3,612,306,0,2815,2817,
        3,626,313,0,2816,2815,1,0,0,0,2816,2817,1,0,0,0,2817,2818,1,0,0,
        0,2818,2819,5,167,0,0,2819,425,1,0,0,0,2820,2821,3,612,306,0,2821,
        427,1,0,0,0,2822,2824,3,418,209,0,2823,2825,3,626,313,0,2824,2823,
        1,0,0,0,2824,2825,1,0,0,0,2825,2827,1,0,0,0,2826,2828,3,96,48,0,
        2827,2826,1,0,0,0,2827,2828,1,0,0,0,2828,429,1,0,0,0,2829,2831,5,
        75,0,0,2830,2832,3,626,313,0,2831,2830,1,0,0,0,2831,2832,1,0,0,0,
        2832,2833,1,0,0,0,2833,2834,3,432,216,0,2834,431,1,0,0,0,2835,2846,
        3,434,217,0,2836,2838,3,626,313,0,2837,2836,1,0,0,0,2837,2838,1,
        0,0,0,2838,2839,1,0,0,0,2839,2841,5,227,0,0,2840,2842,3,626,313,
        0,2841,2840,1,0,0,0,2841,2842,1,0,0,0,2842,2843,1,0,0,0,2843,2845,
        3,434,217,0,2844,2837,1,0,0,0,2845,2848,1,0,0,0,2846,2844,1,0,0,
        0,2846,2847,1,0,0,0,2847,433,1,0,0,0,2848,2846,1,0,0,0,2849,2850,
        3,562,281,0,2850,435,1,0,0,0,2851,2853,3,438,219,0,2852,2854,3,626,
        313,0,2853,2852,1,0,0,0,2853,2854,1,0,0,0,2854,2855,1,0,0,0,2855,
        2857,5,236,0,0,2856,2858,3,626,313,0,2857,2856,1,0,0,0,2857,2858,
        1,0,0,0,2858,2859,1,0,0,0,2859,2861,3,440,220,0,2860,2862,3,626,
        313,0,2861,2860,1,0,0,0,2861,2862,1,0,0,0,2862,2863,1,0,0,0,2863,
        2865,5,227,0,0,2864,2866,3,626,313,0,2865,2864,1,0,0,0,2865,2866,
        1,0,0,0,2866,2867,1,0,0,0,2867,2869,3,442,221,0,2868,2870,3,626,
        313,0,2869,2868,1,0,0,0,2869,2870,1,0,0,0,2870,2876,1,0,0,0,2871,
        2873,5,227,0,0,2872,2874,3,626,313,0,2873,2872,1,0,0,0,2873,2874,
        1,0,0,0,2874,2875,1,0,0,0,2875,2877,3,444,222,0,2876,2871,1,0,0,
        0,2876,2877,1,0,0,0,2877,2878,1,0,0,0,2878,2880,5,247,0,0,2879,2881,
        3,626,313,0,2880,2879,1,0,0,0,2880,2881,1,0,0,0,2881,2882,1,0,0,
        0,2882,2884,5,230,0,0,2883,2885,3,626,313,0,2884,2883,1,0,0,0,2884,
        2885,1,0,0,0,2885,2886,1,0,0,0,2886,2887,3,560,280,0,2887,437,1,
        0,0,0,2888,2889,7,9,0,0,2889,439,1,0,0,0,2890,2891,3,616,308,0,2891,
        441,1,0,0,0,2892,2893,3,612,306,0,2893,443,1,0,0,0,2894,2895,3,612,
        306,0,2895,445,1,0,0,0,2896,2898,5,113,0,0,2897,2899,3,626,313,0,
        2898,2897,1,0,0,0,2898,2899,1,0,0,0,2899,2900,1,0,0,0,2900,2902,
        3,616,308,0,2901,2903,3,626,313,0,2902,2901,1,0,0,0,2902,2903,1,
        0,0,0,2903,2904,1,0,0,0,2904,2906,5,230,0,0,2905,2907,3,626,313,
        0,2906,2905,1,0,0,0,2906,2907,1,0,0,0,2907,2908,1,0,0,0,2908,2909,
        3,560,280,0,2909,447,1,0,0,0,2910,2912,5,150,0,0,2911,2913,3,626,
        313,0,2912,2911,1,0,0,0,2912,2913,1,0,0,0,2913,2914,1,0,0,0,2914,
        2916,3,616,308,0,2915,2917,3,626,313,0,2916,2915,1,0,0,0,2916,2917,
        1,0,0,0,2917,2918,1,0,0,0,2918,2920,5,230,0,0,2919,2921,3,626,313,
        0,2920,2919,1,0,0,0,2920,2921,1,0,0,0,2921,2922,1,0,0,0,2922,2923,
        3,560,280,0,2923,449,1,0,0,0,2924,2925,5,103,0,0,2925,2927,3,626,
        313,0,2926,2924,1,0,0,0,2926,2927,1,0,0,0,2927,2928,1,0,0,0,2928,
        2930,3,562,281,0,2929,2931,3,626,313,0,2930,2929,1,0,0,0,2930,2931,
        1,0,0,0,2931,2932,1,0,0,0,2932,2934,5,230,0,0,2933,2935,3,626,313,
        0,2934,2933,1,0,0,0,2934,2935,1,0,0,0,2935,2936,1,0,0,0,2936,2937,
        3,560,280,0,2937,451,1,0,0,0,2938,2939,5,154,0,0,2939,2940,3,626,
        313,0,2940,2942,3,562,281,0,2941,2943,3,626,313,0,2942,2941,1,0,
        0,0,2942,2943,1,0,0,0,2943,2944,1,0,0,0,2944,2946,5,230,0,0,2945,
        2947,3,626,313,0,2946,2945,1,0,0,0,2946,2947,1,0,0,0,2947,2948,1,
        0,0,0,2948,2949,3,560,280,0,2949,453,1,0,0,0,2950,2954,3,456,228,
        0,2951,2954,3,460,230,0,2952,2954,3,462,231,0,2953,2950,1,0,0,0,
        2953,2951,1,0,0,0,2953,2952,1,0,0,0,2954,455,1,0,0,0,2955,2956,5,
        127,0,0,2956,2957,3,626,313,0,2957,2959,5,76,0,0,2958,2960,3,626,
        313,0,2959,2958,1,0,0,0,2959,2960,1,0,0,0,2960,2961,1,0,0,0,2961,
        2962,3,458,229,0,2962,457,1,0,0,0,2963,2964,5,148,0,0,2964,2965,
        3,626,313,0,2965,2966,5,121,0,0,2966,2973,1,0,0,0,2967,2969,5,89,
        0,0,2968,2970,3,626,313,0,2969,2968,1,0,0,0,2969,2970,1,0,0,0,2970,
        2971,1,0,0,0,2971,2973,3,286,143,0,2972,2963,1,0,0,0,2972,2967,1,
        0,0,0,2973,459,1,0,0,0,2974,2976,5,148,0,0,2975,2977,3,626,313,0,
        2976,2975,1,0,0,0,2976,2977,1,0,0,0,2977,2980,1,0,0,0,2978,2981,
        5,121,0,0,2979,2981,3,286,143,0,2980,2978,1,0,0,0,2980,2979,1,0,
        0,0,2980,2981,1,0,0,0,2981,461,1,0,0,0,2982,2983,5,76,0,0,2983,2984,
        3,626,313,0,2984,2985,3,464,232,0,2985,463,1,0,0,0,2986,2987,3,612,
        306,0,2987,465,1,0,0,0,2988,3001,3,468,234,0,2989,3001,3,492,246,
        0,2990,3001,3,496,248,0,2991,3001,3,500,250,0,2992,3001,3,508,254,
        0,2993,3001,3,510,255,0,2994,3001,3,514,257,0,2995,3001,3,518,259,
        0,2996,3001,3,538,269,0,2997,3001,3,540,270,0,2998,3001,3,546,273,
        0,2999,3001,3,552,276,0,3000,2988,1,0,0,0,3000,2989,1,0,0,0,3000,
        2990,1,0,0,0,3000,2991,1,0,0,0,3000,2992,1,0,0,0,3000,2993,1,0,0,
        0,3000,2994,1,0,0,0,3000,2995,1,0,0,0,3000,2996,1,0,0,0,3000,2997,
        1,0,0,0,3000,2998,1,0,0,0,3000,2999,1,0,0,0,3001,467,1,0,0,0,3002,
        3004,5,128,0,0,3003,3005,3,626,313,0,3004,3003,1,0,0,0,3004,3005,
        1,0,0,0,3005,3006,1,0,0,0,3006,3008,3,470,235,0,3007,3009,3,626,
        313,0,3008,3007,1,0,0,0,3008,3009,1,0,0,0,3009,3011,1,0,0,0,3010,
        3012,3,472,236,0,3011,3010,1,0,0,0,3011,3012,1,0,0,0,3012,3014,1,
        0,0,0,3013,3015,3,626,313,0,3014,3013,1,0,0,0,3014,3015,1,0,0,0,
        3015,3017,1,0,0,0,3016,3018,3,476,238,0,3017,3016,1,0,0,0,3017,3018,
        1,0,0,0,3018,3020,1,0,0,0,3019,3021,3,626,313,0,3020,3019,1,0,0,
        0,3020,3021,1,0,0,0,3021,3023,1,0,0,0,3022,3024,3,480,240,0,3023,
        3022,1,0,0,0,3023,3024,1,0,0,0,3024,3026,1,0,0,0,3025,3027,3,626,
        313,0,3026,3025,1,0,0,0,3026,3027,1,0,0,0,3027,3028,1,0,0,0,3028,
        3030,5,10,0,0,3029,3031,3,626,313,0,3030,3029,1,0,0,0,3030,3031,
        1,0,0,0,3031,3032,1,0,0,0,3032,3034,3,486,243,0,3033,3035,3,626,
        313,0,3034,3033,1,0,0,0,3034,3035,1,0,0,0,3035,3037,1,0,0,0,3036,
        3038,3,482,241,0,3037,3036,1,0,0,0,3037,3038,1,0,0,0,3038,469,1,
        0,0,0,3039,3040,3,560,280,0,3040,471,1,0,0,0,3041,3043,5,83,0,0,
        3042,3044,3,626,313,0,3043,3042,1,0,0,0,3043,3044,1,0,0,0,3044,3045,
        1,0,0,0,3045,3046,3,474,237,0,3046,473,1,0,0,0,3047,3048,7,10,0,
        0,3048,475,1,0,0,0,3049,3050,5,2,0,0,3050,3051,3,478,239,0,3051,
        477,1,0,0,0,3052,3059,5,144,0,0,3053,3059,5,205,0,0,3054,3055,5,
        144,0,0,3055,3056,3,626,313,0,3056,3057,5,205,0,0,3057,3059,1,0,
        0,0,3058,3052,1,0,0,0,3058,3053,1,0,0,0,3058,3054,1,0,0,0,3059,479,
        1,0,0,0,3060,3076,5,156,0,0,3061,3062,5,108,0,0,3062,3063,3,626,
        313,0,3063,3064,5,144,0,0,3064,3076,1,0,0,0,3065,3066,5,108,0,0,
        3066,3067,3,626,313,0,3067,3068,5,205,0,0,3068,3076,1,0,0,0,3069,
        3070,5,108,0,0,3070,3071,3,626,313,0,3071,3072,5,144,0,0,3072,3073,
        3,626,313,0,3073,3074,5,205,0,0,3074,3076,1,0,0,0,3075,3060,1,0,
        0,0,3075,3061,1,0,0,0,3075,3065,1,0,0,0,3075,3069,1,0,0,0,3076,481,
        1,0,0,0,3077,3078,5,101,0,0,3078,3079,3,626,313,0,3079,3080,5,230,
        0,0,3080,3081,3,626,313,0,3081,3082,3,484,242,0,3082,483,1,0,0,0,
        3083,3084,3,560,280,0,3084,485,1,0,0,0,3085,3088,3,488,244,0,3086,
        3088,3,490,245,0,3087,3085,1,0,0,0,3087,3086,1,0,0,0,3088,487,1,
        0,0,0,3089,3090,5,234,0,0,3090,3091,3,560,280,0,3091,489,1,0,0,0,
        3092,3093,3,560,280,0,3093,491,1,0,0,0,3094,3103,5,147,0,0,3095,
        3097,5,37,0,0,3096,3098,3,626,313,0,3097,3096,1,0,0,0,3097,3098,
        1,0,0,0,3098,3100,1,0,0,0,3099,3101,3,494,247,0,3100,3099,1,0,0,
        0,3100,3101,1,0,0,0,3101,3103,1,0,0,0,3102,3094,1,0,0,0,3102,3095,
        1,0,0,0,3103,493,1,0,0,0,3104,3115,3,486,243,0,3105,3107,3,626,313,
        0,3106,3105,1,0,0,0,3106,3107,1,0,0,0,3107,3108,1,0,0,0,3108,3110,
        5,227,0,0,3109,3111,3,626,313,0,3110,3109,1,0,0,0,3110,3111,1,0,
        0,0,3111,3112,1,0,0,0,3112,3114,3,486,243,0,3113,3106,1,0,0,0,3114,
        3117,1,0,0,0,3115,3113,1,0,0,0,3115,3116,1,0,0,0,3116,495,1,0,0,
        0,3117,3115,1,0,0,0,3118,3119,5,152,0,0,3119,3120,3,626,313,0,3120,
        3122,3,486,243,0,3121,3123,3,626,313,0,3122,3121,1,0,0,0,3122,3123,
        1,0,0,0,3123,3124,1,0,0,0,3124,3126,5,227,0,0,3125,3127,3,626,313,
        0,3126,3125,1,0,0,0,3126,3127,1,0,0,0,3127,3128,1,0,0,0,3128,3129,
        3,498,249,0,3129,497,1,0,0,0,3130,3131,3,560,280,0,3131,499,1,0,
        0,0,3132,3133,5,108,0,0,3133,3134,3,626,313,0,3134,3136,3,486,243,
        0,3135,3137,3,626,313,0,3136,3135,1,0,0,0,3136,3137,1,0,0,0,3137,
        3138,1,0,0,0,3138,3140,5,227,0,0,3139,3141,3,626,313,0,3140,3139,
        1,0,0,0,3140,3141,1,0,0,0,3141,3142,1,0,0,0,3142,3143,3,502,251,
        0,3143,501,1,0,0,0,3144,3154,3,504,252,0,3145,3147,3,504,252,0,3146,
        3145,1,0,0,0,3146,3147,1,0,0,0,3147,3148,1,0,0,0,3148,3149,3,626,
        313,0,3149,3150,5,167,0,0,3150,3151,3,626,313,0,3151,3152,3,506,
        253,0,3152,3154,1,0,0,0,3153,3144,1,0,0,0,3153,3146,1,0,0,0,3154,
        503,1,0,0,0,3155,3156,3,560,280,0,3156,505,1,0,0,0,3157,3158,3,560,
        280,0,3158,507,1,0,0,0,3159,3160,5,172,0,0,3160,3161,3,626,313,0,
        3161,3170,3,486,243,0,3162,3164,3,626,313,0,3163,3162,1,0,0,0,3163,
        3164,1,0,0,0,3164,3165,1,0,0,0,3165,3167,5,227,0,0,3166,3168,3,626,
        313,0,3167,3166,1,0,0,0,3167,3168,1,0,0,0,3168,3169,1,0,0,0,3169,
        3171,3,502,251,0,3170,3163,1,0,0,0,3170,3171,1,0,0,0,3171,509,1,
        0,0,0,3172,3173,5,106,0,0,3173,3174,3,626,313,0,3174,3175,5,94,0,
        0,3175,3176,3,626,313,0,3176,3178,3,488,244,0,3177,3179,3,626,313,
        0,3178,3177,1,0,0,0,3178,3179,1,0,0,0,3179,3180,1,0,0,0,3180,3182,
        5,227,0,0,3181,3183,3,626,313,0,3182,3181,1,0,0,0,3182,3183,1,0,
        0,0,3183,3184,1,0,0,0,3184,3185,3,512,256,0,3185,511,1,0,0,0,3186,
        3187,3,614,307,0,3187,513,1,0,0,0,3188,3189,5,202,0,0,3189,3190,
        3,626,313,0,3190,3192,3,488,244,0,3191,3193,3,626,313,0,3192,3191,
        1,0,0,0,3192,3193,1,0,0,0,3193,3194,1,0,0,0,3194,3196,5,227,0,0,
        3195,3197,3,626,313,0,3196,3195,1,0,0,0,3196,3197,1,0,0,0,3197,3198,
        1,0,0,0,3198,3199,3,516,258,0,3199,515,1,0,0,0,3200,3201,3,560,280,
        0,3201,517,1,0,0,0,3202,3203,5,135,0,0,3203,3204,3,626,313,0,3204,
        3206,3,488,244,0,3205,3207,3,626,313,0,3206,3205,1,0,0,0,3206,3207,
        1,0,0,0,3207,3208,1,0,0,0,3208,3210,5,227,0,0,3209,3211,3,626,313,
        0,3210,3209,1,0,0,0,3210,3211,1,0,0,0,3211,3213,1,0,0,0,3212,3214,
        3,520,260,0,3213,3212,1,0,0,0,3213,3214,1,0,0,0,3214,519,1,0,0,0,
        3215,3217,3,522,261,0,3216,3215,1,0,0,0,3217,3218,1,0,0,0,3218,3216,
        1,0,0,0,3218,3219,1,0,0,0,3219,521,1,0,0,0,3220,3222,3,524,262,0,
        3221,3223,3,526,263,0,3222,3221,1,0,0,0,3222,3223,1,0,0,0,3223,3226,
        1,0,0,0,3224,3226,3,526,263,0,3225,3220,1,0,0,0,3225,3224,1,0,0,
        0,3226,523,1,0,0,0,3227,3231,3,530,265,0,3228,3231,3,534,267,0,3229,
        3231,3,528,264,0,3230,3227,1,0,0,0,3230,3228,1,0,0,0,3230,3229,1,
        0,0,0,3231,525,1,0,0,0,3232,3233,7,11,0,0,3233,527,1,0,0,0,3234,
        3235,3,560,280,0,3235,529,1,0,0,0,3236,3237,5,158,0,0,3237,3238,
        3,626,313,0,3238,3240,5,236,0,0,3239,3241,3,626,313,0,3240,3239,
        1,0,0,0,3240,3241,1,0,0,0,3241,3242,1,0,0,0,3242,3244,3,532,266,
        0,3243,3245,3,626,313,0,3244,3243,1,0,0,0,3244,3245,1,0,0,0,3245,
        3246,1,0,0,0,3246,3247,5,247,0,0,3247,531,1,0,0,0,3248,3249,3,560,
        280,0,3249,533,1,0,0,0,3250,3251,5,164,0,0,3251,3252,3,626,313,0,
        3252,3254,5,236,0,0,3253,3255,3,626,313,0,3254,3253,1,0,0,0,3254,
        3255,1,0,0,0,3255,3256,1,0,0,0,3256,3258,3,536,268,0,3257,3259,3,
        626,313,0,3258,3257,1,0,0,0,3258,3259,1,0,0,0,3259,3260,1,0,0,0,
        3260,3261,5,247,0,0,3261,535,1,0,0,0,3262,3263,3,560,280,0,3263,
        537,1,0,0,0,3264,3265,5,205,0,0,3265,3266,3,626,313,0,3266,3268,
        3,488,244,0,3267,3269,3,626,313,0,3268,3267,1,0,0,0,3268,3269,1,
        0,0,0,3269,3270,1,0,0,0,3270,3272,5,227,0,0,3271,3273,3,626,313,
        0,3272,3271,1,0,0,0,3272,3273,1,0,0,0,3273,3275,1,0,0,0,3274,3276,
        3,520,260,0,3275,3274,1,0,0,0,3275,3276,1,0,0,0,3276,539,1,0,0,0,
        3277,3278,5,94,0,0,3278,3279,3,626,313,0,3279,3281,3,488,244,0,3280,
        3282,3,626,313,0,3281,3280,1,0,0,0,3281,3282,1,0,0,0,3282,3283,1,
        0,0,0,3283,3285,5,227,0,0,3284,3286,3,626,313,0,3285,3284,1,0,0,
        0,3285,3286,1,0,0,0,3286,3287,1,0,0,0,3287,3288,3,542,271,0,3288,
        541,1,0,0,0,3289,3300,3,544,272,0,3290,3292,3,626,313,0,3291,3290,
        1,0,0,0,3291,3292,1,0,0,0,3292,3293,1,0,0,0,3293,3295,5,227,0,0,
        3294,3296,3,626,313,0,3295,3294,1,0,0,0,3295,3296,1,0,0,0,3296,3297,
        1,0,0,0,3297,3299,3,544,272,0,3298,3291,1,0,0,0,3299,3302,1,0,0,
        0,3300,3298,1,0,0,0,3300,3301,1,0,0,0,3301,543,1,0,0,0,3302,3300,
        1,0,0,0,3303,3304,3,616,308,0,3304,545,1,0,0,0,3305,3306,5,141,0,
        0,3306,3307,3,626,313,0,3307,3309,3,486,243,0,3308,3310,3,626,313,
        0,3309,3308,1,0,0,0,3309,3310,1,0,0,0,3310,3311,1,0,0,0,3311,3313,
        5,227,0,0,3312,3314,3,626,313,0,3313,3312,1,0,0,0,3313,3314,1,0,
        0,0,3314,3316,1,0,0,0,3315,3317,3,548,274,0,3316,3315,1,0,0,0,3316,
        3317,1,0,0,0,3317,3319,1,0,0,0,3318,3320,3,626,313,0,3319,3318,1,
        0,0,0,3319,3320,1,0,0,0,3320,3321,1,0,0,0,3321,3322,5,227,0,0,3322,
        3323,3,550,275,0,3323,547,1,0,0,0,3324,3325,3,560,280,0,3325,549,
        1,0,0,0,3326,3327,3,560,280,0,3327,551,1,0,0,0,3328,3329,5,85,0,
        0,3329,3330,3,626,313,0,3330,3332,3,486,243,0,3331,3333,3,626,313,
        0,3332,3331,1,0,0,0,3332,3333,1,0,0,0,3333,3334,1,0,0,0,3334,3336,
        5,227,0,0,3335,3337,3,626,313,0,3336,3335,1,0,0,0,3336,3337,1,0,
        0,0,3337,3339,1,0,0,0,3338,3340,3,548,274,0,3339,3338,1,0,0,0,3339,
        3340,1,0,0,0,3340,3342,1,0,0,0,3341,3343,3,626,313,0,3342,3341,1,
        0,0,0,3342,3343,1,0,0,0,3343,3344,1,0,0,0,3344,3346,5,227,0,0,3345,
        3347,3,626,313,0,3346,3345,1,0,0,0,3346,3347,1,0,0,0,3347,3348,1,
        0,0,0,3348,3349,3,554,277,0,3349,553,1,0,0,0,3350,3351,3,614,307,
        0,3351,555,1,0,0,0,3352,3353,5,7,0,0,3353,3354,5,265,0,0,3354,3355,
        3,640,320,0,3355,3356,5,243,0,0,3356,3358,3,558,279,0,3357,3359,
        5,265,0,0,3358,3357,1,0,0,0,3358,3359,1,0,0,0,3359,3360,1,0,0,0,
        3360,3362,5,230,0,0,3361,3363,5,265,0,0,3362,3361,1,0,0,0,3362,3363,
        1,0,0,0,3363,3364,1,0,0,0,3364,3365,3,564,282,0,3365,3379,1,0,0,
        0,3366,3367,5,7,0,0,3367,3368,5,265,0,0,3368,3369,3,640,320,0,3369,
        3370,5,243,0,0,3370,3371,5,190,0,0,3371,3372,5,243,0,0,3372,3373,
        5,183,0,0,3373,3374,5,265,0,0,3374,3375,5,230,0,0,3375,3376,5,265,
        0,0,3376,3377,5,252,0,0,3377,3379,1,0,0,0,3378,3352,1,0,0,0,3378,
        3366,1,0,0,0,3379,557,1,0,0,0,3380,3381,7,12,0,0,3381,559,1,0,0,
        0,3382,3383,6,280,-1,0,3383,3391,3,564,282,0,3384,3391,3,566,283,
        0,3385,3391,3,568,284,0,3386,3391,3,570,285,0,3387,3391,3,574,287,
        0,3388,3391,3,572,286,0,3389,3391,3,562,281,0,3390,3382,1,0,0,0,
        3390,3384,1,0,0,0,3390,3385,1,0,0,0,3390,3386,1,0,0,0,3390,3387,
        1,0,0,0,3390,3388,1,0,0,0,3390,3389,1,0,0,0,3391,3457,1,0,0,0,3392,
        3394,10,10,0,0,3393,3395,3,626,313,0,3394,3393,1,0,0,0,3394,3395,
        1,0,0,0,3395,3396,1,0,0,0,3396,3398,5,246,0,0,3397,3399,3,626,313,
        0,3398,3397,1,0,0,0,3398,3399,1,0,0,0,3399,3400,1,0,0,0,3400,3456,
        3,560,280,11,3401,3403,10,8,0,0,3402,3404,3,626,313,0,3403,3402,
        1,0,0,0,3403,3404,1,0,0,0,3404,3405,1,0,0,0,3405,3407,7,13,0,0,3406,
        3408,3,626,313,0,3407,3406,1,0,0,0,3407,3408,1,0,0,0,3408,3409,1,
        0,0,0,3409,3456,3,560,280,9,3410,3412,10,7,0,0,3411,3413,3,626,313,
        0,3412,3411,1,0,0,0,3412,3413,1,0,0,0,3413,3414,1,0,0,0,3414,3416,
        5,119,0,0,3415,3417,3,626,313,0,3416,3415,1,0,0,0,3416,3417,1,0,
        0,0,3417,3418,1,0,0,0,3418,3456,3,560,280,8,3419,3421,10,6,0,0,3420,
        3422,3,626,313,0,3421,3420,1,0,0,0,3421,3422,1,0,0,0,3422,3423,1,
        0,0,0,3423,3425,7,14,0,0,3424,3426,3,626,313,0,3425,3424,1,0,0,0,
        3425,3426,1,0,0,0,3426,3427,1,0,0,0,3427,3456,3,560,280,7,3428,3430,
        10,5,0,0,3429,3431,3,626,313,0,3430,3429,1,0,0,0,3430,3431,1,0,0,
        0,3431,3432,1,0,0,0,3432,3434,5,224,0,0,3433,3435,3,626,313,0,3434,
        3433,1,0,0,0,3434,3435,1,0,0,0,3435,3436,1,0,0,0,3436,3456,3,560,
        280,6,3437,3439,10,4,0,0,3438,3440,3,626,313,0,3439,3438,1,0,0,0,
        3439,3440,1,0,0,0,3440,3441,1,0,0,0,3441,3443,7,15,0,0,3442,3444,
        3,626,313,0,3443,3442,1,0,0,0,3443,3444,1,0,0,0,3444,3445,1,0,0,
        0,3445,3456,3,560,280,5,3446,3448,10,2,0,0,3447,3449,3,626,313,0,
        3448,3447,1,0,0,0,3448,3449,1,0,0,0,3449,3450,1,0,0,0,3450,3452,
        7,16,0,0,3451,3453,3,626,313,0,3452,3451,1,0,0,0,3452,3453,1,0,0,
        0,3453,3454,1,0,0,0,3454,3456,3,560,280,3,3455,3392,1,0,0,0,3455,
        3401,1,0,0,0,3455,3410,1,0,0,0,3455,3419,1,0,0,0,3455,3428,1,0,0,
        0,3455,3437,1,0,0,0,3455,3446,1,0,0,0,3456,3459,1,0,0,0,3457,3455,
        1,0,0,0,3457,3458,1,0,0,0,3458,561,1,0,0,0,3459,3457,1,0,0,0,3460,
        3461,6,281,-1,0,3461,3465,3,576,288,0,3462,3465,3,578,289,0,3463,
        3465,3,600,300,0,3464,3460,1,0,0,0,3464,3462,1,0,0,0,3464,3463,1,
        0,0,0,3465,3531,1,0,0,0,3466,3467,10,7,0,0,3467,3469,5,243,0,0,3468,
        3470,3,626,313,0,3469,3468,1,0,0,0,3469,3470,1,0,0,0,3470,3471,1,
        0,0,0,3471,3530,3,26,13,0,3472,3474,10,6,0,0,3473,3475,3,626,313,
        0,3474,3473,1,0,0,0,3474,3475,1,0,0,0,3475,3476,1,0,0,0,3476,3478,
        5,258,0,0,3477,3479,3,626,313,0,3478,3477,1,0,0,0,3478,3479,1,0,
        0,0,3479,3480,1,0,0,0,3480,3482,5,243,0,0,3481,3483,3,626,313,0,
        3482,3481,1,0,0,0,3482,3483,1,0,0,0,3483,3484,1,0,0,0,3484,3530,
        3,26,13,0,3485,3487,10,5,0,0,3486,3488,3,626,313,0,3487,3486,1,0,
        0,0,3487,3488,1,0,0,0,3488,3489,1,0,0,0,3489,3491,5,236,0,0,3490,
        3492,3,626,313,0,3491,3490,1,0,0,0,3491,3492,1,0,0,0,3492,3493,1,
        0,0,0,3493,3495,3,584,292,0,3494,3496,3,626,313,0,3495,3494,1,0,
        0,0,3495,3496,1,0,0,0,3496,3497,1,0,0,0,3497,3498,5,247,0,0,3498,
        3530,1,0,0,0,3499,3500,10,4,0,0,3500,3501,5,231,0,0,3501,3530,3,
        26,13,0,3502,3504,10,3,0,0,3503,3505,3,626,313,0,3504,3503,1,0,0,
        0,3504,3505,1,0,0,0,3505,3506,1,0,0,0,3506,3508,5,258,0,0,3507,3509,
        3,626,313,0,3508,3507,1,0,0,0,3508,3509,1,0,0,0,3509,3510,1,0,0,
        0,3510,3511,5,231,0,0,3511,3530,3,26,13,0,3512,3514,10,2,0,0,3513,
        3515,3,626,313,0,3514,3513,1,0,0,0,3514,3515,1,0,0,0,3515,3516,1,
        0,0,0,3516,3518,5,258,0,0,3517,3519,3,626,313,0,3518,3517,1,0,0,
        0,3518,3519,1,0,0,0,3519,3520,1,0,0,0,3520,3522,5,231,0,0,3521,3523,
        3,626,313,0,3522,3521,1,0,0,0,3522,3523,1,0,0,0,3523,3524,1,0,0,
        0,3524,3526,5,258,0,0,3525,3527,3,626,313,0,3526,3525,1,0,0,0,3526,
        3527,1,0,0,0,3527,3528,1,0,0,0,3528,3530,3,26,13,0,3529,3466,1,0,
        0,0,3529,3472,1,0,0,0,3529,3485,1,0,0,0,3529,3499,1,0,0,0,3529,3502,
        1,0,0,0,3529,3512,1,0,0,0,3530,3533,1,0,0,0,3531,3529,1,0,0,0,3531,
        3532,1,0,0,0,3532,563,1,0,0,0,3533,3531,1,0,0,0,3534,3545,5,254,
        0,0,3535,3545,5,253,0,0,3536,3545,5,257,0,0,3537,3545,5,256,0,0,
        3538,3545,5,255,0,0,3539,3545,5,252,0,0,3540,3542,3,658,329,0,3541,
        3543,3,678,339,0,3542,3541,1,0,0,0,3542,3543,1,0,0,0,3543,3545,1,
        0,0,0,3544,3534,1,0,0,0,3544,3535,1,0,0,0,3544,3536,1,0,0,0,3544,
        3537,1,0,0,0,3544,3538,1,0,0,0,3544,3539,1,0,0,0,3544,3540,1,0,0,
        0,3545,565,1,0,0,0,3546,3548,5,236,0,0,3547,3549,3,626,313,0,3548,
        3547,1,0,0,0,3548,3549,1,0,0,0,3549,3550,1,0,0,0,3550,3552,3,560,
        280,0,3551,3553,3,626,313,0,3552,3551,1,0,0,0,3552,3553,1,0,0,0,
        3553,3554,1,0,0,0,3554,3555,5,247,0,0,3555,567,1,0,0,0,3556,3558,
        5,170,0,0,3557,3559,3,626,313,0,3558,3557,1,0,0,0,3558,3559,1,0,
        0,0,3559,3560,1,0,0,0,3560,3562,3,560,280,0,3561,3563,3,626,313,
        0,3562,3561,1,0,0,0,3562,3563,1,0,0,0,3563,3564,1,0,0,0,3564,3566,
        5,97,0,0,3565,3567,3,626,313,0,3566,3565,1,0,0,0,3566,3567,1,0,0,
        0,3567,3568,1,0,0,0,3568,3569,3,618,309,0,3569,569,1,0,0,0,3570,
        3572,5,122,0,0,3571,3573,3,626,313,0,3572,3571,1,0,0,0,3572,3573,
        1,0,0,0,3573,3574,1,0,0,0,3574,3575,3,560,280,0,3575,571,1,0,0,0,
        3576,3578,5,123,0,0,3577,3579,3,626,313,0,3578,3577,1,0,0,0,3578,
        3579,1,0,0,0,3579,3580,1,0,0,0,3580,3581,3,560,280,0,3581,573,1,
        0,0,0,3582,3584,5,238,0,0,3583,3585,3,626,313,0,3584,3583,1,0,0,
        0,3584,3585,1,0,0,0,3585,3586,1,0,0,0,3586,3587,3,560,280,0,3587,
        575,1,0,0,0,3588,3592,3,28,14,0,3589,3592,3,650,325,0,3590,3592,
        3,652,326,0,3591,3588,1,0,0,0,3591,3589,1,0,0,0,3591,3590,1,0,0,
        0,3592,577,1,0,0,0,3593,3594,5,114,0,0,3594,579,1,0,0,0,3595,3596,
        3,562,281,0,3596,3598,5,243,0,0,3597,3599,3,626,313,0,3598,3597,
        1,0,0,0,3598,3599,1,0,0,0,3599,3600,1,0,0,0,3600,3601,3,26,13,0,
        3601,3617,1,0,0,0,3602,3604,3,562,281,0,3603,3605,3,626,313,0,3604,
        3603,1,0,0,0,3604,3605,1,0,0,0,3605,3606,1,0,0,0,3606,3608,5,258,
        0,0,3607,3609,3,626,313,0,3608,3607,1,0,0,0,3608,3609,1,0,0,0,3609,
        3610,1,0,0,0,3610,3612,5,243,0,0,3611,3613,3,626,313,0,3612,3611,
        1,0,0,0,3612,3613,1,0,0,0,3613,3614,1,0,0,0,3614,3615,3,26,13,0,
        3615,3617,1,0,0,0,3616,3595,1,0,0,0,3616,3602,1,0,0,0,3617,581,1,
        0,0,0,3618,3620,3,562,281,0,3619,3621,5,265,0,0,3620,3619,1,0,0,
        0,3620,3621,1,0,0,0,3621,3622,1,0,0,0,3622,3624,5,236,0,0,3623,3625,
        3,626,313,0,3624,3623,1,0,0,0,3624,3625,1,0,0,0,3625,3626,1,0,0,
        0,3626,3628,3,584,292,0,3627,3629,3,626,313,0,3628,3627,1,0,0,0,
        3628,3629,1,0,0,0,3629,3630,1,0,0,0,3630,3631,5,247,0,0,3631,583,
        1,0,0,0,3632,3634,3,586,293,0,3633,3632,1,0,0,0,3633,3634,1,0,0,
        0,3634,585,1,0,0,0,3635,3637,3,588,294,0,3636,3638,3,626,313,0,3637,
        3636,1,0,0,0,3637,3638,1,0,0,0,3638,3639,1,0,0,0,3639,3641,5,227,
        0,0,3640,3642,3,626,313,0,3641,3640,1,0,0,0,3641,3642,1,0,0,0,3642,
        3644,1,0,0,0,3643,3635,1,0,0,0,3644,3647,1,0,0,0,3645,3643,1,0,0,
        0,3645,3646,1,0,0,0,3646,3648,1,0,0,0,3647,3645,1,0,0,0,3648,3664,
        3,590,295,0,3649,3651,3,588,294,0,3650,3652,3,626,313,0,3651,3650,
        1,0,0,0,3651,3652,1,0,0,0,3652,3653,1,0,0,0,3653,3655,5,227,0,0,
        3654,3656,3,626,313,0,3655,3654,1,0,0,0,3655,3656,1,0,0,0,3656,3658,
        1,0,0,0,3657,3649,1,0,0,0,3658,3661,1,0,0,0,3659,3657,1,0,0,0,3659,
        3660,1,0,0,0,3660,3662,1,0,0,0,3661,3659,1,0,0,0,3662,3664,3,592,
        296,0,3663,3645,1,0,0,0,3663,3659,1,0,0,0,3664,587,1,0,0,0,3665,
        3667,3,596,298,0,3666,3665,1,0,0,0,3666,3667,1,0,0,0,3667,589,1,
        0,0,0,3668,3669,3,596,298,0,3669,591,1,0,0,0,3670,3681,3,594,297,
        0,3671,3673,3,626,313,0,3672,3671,1,0,0,0,3672,3673,1,0,0,0,3673,
        3674,1,0,0,0,3674,3676,5,227,0,0,3675,3677,3,626,313,0,3676,3675,
        1,0,0,0,3676,3677,1,0,0,0,3677,3678,1,0,0,0,3678,3680,3,594,297,
        0,3679,3672,1,0,0,0,3680,3683,1,0,0,0,3681,3679,1,0,0,0,3681,3682,
        1,0,0,0,3682,593,1,0,0,0,3683,3681,1,0,0,0,3684,3686,3,26,13,0,3685,
        3687,3,626,313,0,3686,3685,1,0,0,0,3686,3687,1,0,0,0,3687,3688,1,
        0,0,0,3688,3690,5,226,0,0,3689,3691,3,626,313,0,3690,3689,1,0,0,
        0,3690,3691,1,0,0,0,3691,3692,1,0,0,0,3692,3693,3,596,298,0,3693,
        595,1,0,0,0,3694,3695,5,15,0,0,3695,3697,3,626,313,0,3696,3694,1,
        0,0,0,3696,3697,1,0,0,0,3697,3698,1,0,0,0,3698,3701,3,560,280,0,
        3699,3701,3,622,311,0,3700,3696,1,0,0,0,3700,3699,1,0,0,0,3701,597,
        1,0,0,0,3702,3703,3,562,281,0,3703,3704,5,231,0,0,3704,3705,3,26,
        13,0,3705,3736,1,0,0,0,3706,3708,3,562,281,0,3707,3709,3,626,313,
        0,3708,3707,1,0,0,0,3708,3709,1,0,0,0,3709,3710,1,0,0,0,3710,3712,
        5,258,0,0,3711,3713,3,626,313,0,3712,3711,1,0,0,0,3712,3713,1,0,
        0,0,3713,3714,1,0,0,0,3714,3715,5,231,0,0,3715,3716,3,26,13,0,3716,
        3736,1,0,0,0,3717,3719,3,562,281,0,3718,3720,3,626,313,0,3719,3718,
        1,0,0,0,3719,3720,1,0,0,0,3720,3721,1,0,0,0,3721,3723,5,258,0,0,
        3722,3724,3,626,313,0,3723,3722,1,0,0,0,3723,3724,1,0,0,0,3724,3725,
        1,0,0,0,3725,3727,5,231,0,0,3726,3728,3,626,313,0,3727,3726,1,0,
        0,0,3727,3728,1,0,0,0,3728,3729,1,0,0,0,3729,3731,5,258,0,0,3730,
        3732,3,626,313,0,3731,3730,1,0,0,0,3731,3732,1,0,0,0,3732,3733,1,
        0,0,0,3733,3734,3,26,13,0,3734,3736,1,0,0,0,3735,3702,1,0,0,0,3735,
        3706,1,0,0,0,3735,3717,1,0,0,0,3736,599,1,0,0,0,3737,3740,3,602,
        301,0,3738,3740,3,604,302,0,3739,3737,1,0,0,0,3739,3738,1,0,0,0,
        3740,601,1,0,0,0,3741,3742,5,243,0,0,3742,3743,3,26,13,0,3743,603,
        1,0,0,0,3744,3745,5,231,0,0,3745,3746,3,26,13,0,3746,605,1,0,0,0,
        3747,3748,3,560,280,0,3748,607,1,0,0,0,3749,3750,3,560,280,0,3750,
        609,1,0,0,0,3751,3752,3,560,280,0,3752,611,1,0,0,0,3753,3754,3,560,
        280,0,3754,613,1,0,0,0,3755,3756,3,562,281,0,3756,615,1,0,0,0,3757,
        3758,3,562,281,0,3758,617,1,0,0,0,3759,3762,3,674,337,0,3760,3762,
        3,620,310,0,3761,3759,1,0,0,0,3761,3760,1,0,0,0,3762,619,1,0,0,0,
        3763,3766,3,576,288,0,3764,3766,3,580,290,0,3765,3763,1,0,0,0,3765,
        3764,1,0,0,0,3766,621,1,0,0,0,3767,3768,5,3,0,0,3768,3769,3,624,
        312,0,3769,623,1,0,0,0,3770,3773,3,576,288,0,3771,3773,3,580,290,
        0,3772,3770,1,0,0,0,3772,3771,1,0,0,0,3773,625,1,0,0,0,3774,3776,
        7,17,0,0,3775,3774,1,0,0,0,3776,3777,1,0,0,0,3777,3775,1,0,0,0,3777,
        3778,1,0,0,0,3778,627,1,0,0,0,3779,3781,5,265,0,0,3780,3779,1,0,
        0,0,3780,3781,1,0,0,0,3781,3785,1,0,0,0,3782,3786,5,259,0,0,3783,
        3786,3,636,318,0,3784,3786,3,294,147,0,3785,3782,1,0,0,0,3785,3783,
        1,0,0,0,3785,3784,1,0,0,0,3786,3788,1,0,0,0,3787,3789,5,265,0,0,
        3788,3787,1,0,0,0,3788,3789,1,0,0,0,3789,629,1,0,0,0,3790,3792,5,
        265,0,0,3791,3790,1,0,0,0,3791,3792,1,0,0,0,3792,3796,1,0,0,0,3793,
        3797,5,259,0,0,3794,3797,3,636,318,0,3795,3797,3,294,147,0,3796,
        3793,1,0,0,0,3796,3794,1,0,0,0,3796,3795,1,0,0,0,3797,631,1,0,0,
        0,3798,3807,3,628,314,0,3799,3801,5,265,0,0,3800,3799,1,0,0,0,3800,
        3801,1,0,0,0,3801,3802,1,0,0,0,3802,3804,5,263,0,0,3803,3805,5,265,
        0,0,3804,3803,1,0,0,0,3804,3805,1,0,0,0,3805,3807,1,0,0,0,3806,3798,
        1,0,0,0,3806,3800,1,0,0,0,3807,3808,1,0,0,0,3808,3806,1,0,0,0,3808,
        3809,1,0,0,0,3809,633,1,0,0,0,3810,3816,3,630,315,0,3811,3813,5,
        265,0,0,3812,3811,1,0,0,0,3812,3813,1,0,0,0,3813,3814,1,0,0,0,3814,
        3816,5,263,0,0,3815,3810,1,0,0,0,3815,3812,1,0,0,0,3816,3817,1,0,
        0,0,3817,3815,1,0,0,0,3817,3818,1,0,0,0,3818,635,1,0,0,0,3819,3820,
        5,261,0,0,3820,637,1,0,0,0,3821,3832,3,642,321,0,3822,3832,3,646,
        323,0,3823,3832,3,648,324,0,3824,3832,3,652,326,0,3825,3832,3,650,
        325,0,3826,3832,3,654,327,0,3827,3832,3,658,329,0,3828,3832,3,644,
        322,0,3829,3832,3,666,333,0,3830,3832,3,668,334,0,3831,3821,1,0,
        0,0,3831,3822,1,0,0,0,3831,3823,1,0,0,0,3831,3824,1,0,0,0,3831,3825,
        1,0,0,0,3831,3826,1,0,0,0,3831,3827,1,0,0,0,3831,3828,1,0,0,0,3831,
        3829,1,0,0,0,3831,3830,1,0,0,0,3832,639,1,0,0,0,3833,3836,5,267,
        0,0,3834,3836,3,680,340,0,3835,3833,1,0,0,0,3835,3834,1,0,0,0,3836,
        641,1,0,0,0,3837,3838,7,18,0,0,3838,643,1,0,0,0,3839,3840,5,146,
        0,0,3840,645,1,0,0,0,3841,3842,7,19,0,0,3842,647,1,0,0,0,3843,3844,
        7,20,0,0,3844,649,1,0,0,0,3845,3846,7,21,0,0,3846,651,1,0,0,0,3847,
        3848,7,22,0,0,3848,653,1,0,0,0,3849,3850,7,23,0,0,3850,655,1,0,0,
        0,3851,3852,7,24,0,0,3852,657,1,0,0,0,3853,3857,3,660,330,0,3854,
        3857,3,662,331,0,3855,3857,3,664,332,0,3856,3853,1,0,0,0,3856,3854,
        1,0,0,0,3856,3855,1,0,0,0,3857,659,1,0,0,0,3858,3859,7,25,0,0,3859,
        661,1,0,0,0,3860,3861,5,124,0,0,3861,663,1,0,0,0,3862,3863,7,26,
        0,0,3863,665,1,0,0,0,3864,3865,7,27,0,0,3865,667,1,0,0,0,3866,3867,
        7,28,0,0,3867,669,1,0,0,0,3868,3869,5,249,0,0,3869,3870,3,672,336,
        0,3870,3871,5,250,0,0,3871,671,1,0,0,0,3872,3873,8,29,0,0,3873,673,
        1,0,0,0,3874,3884,3,654,327,0,3875,3876,5,249,0,0,3876,3877,3,654,
        327,0,3877,3878,5,250,0,0,3878,3884,1,0,0,0,3879,3884,5,126,0,0,
        3880,3881,5,249,0,0,3881,3882,5,126,0,0,3882,3884,5,250,0,0,3883,
        3874,1,0,0,0,3883,3875,1,0,0,0,3883,3879,1,0,0,0,3883,3880,1,0,0,
        0,3884,675,1,0,0,0,3885,3886,3,640,320,0,3886,3887,3,678,339,0,3887,
        3892,1,0,0,0,3888,3889,3,656,328,0,3889,3890,3,678,339,0,3890,3892,
        1,0,0,0,3891,3885,1,0,0,0,3891,3888,1,0,0,0,3892,677,1,0,0,0,3893,
        3894,7,30,0,0,3894,679,1,0,0,0,3895,3896,7,31,0,0,3896,681,1,0,0,
        0,568,688,695,700,704,714,722,727,733,740,744,747,752,757,764,773,
        781,786,790,794,801,807,810,814,818,822,827,831,835,840,844,848,
        853,857,861,866,870,874,879,883,887,890,893,898,904,910,914,921,
        927,932,938,944,953,956,962,966,972,976,985,989,992,997,1007,1012,
        1018,1024,1057,1063,1095,1099,1108,1118,1124,1127,1131,1135,1139,
        1144,1148,1153,1158,1162,1165,1169,1173,1179,1183,1191,1199,1202,
        1205,1211,1215,1220,1224,1227,1250,1260,1270,1282,1286,1291,1296,
        1300,1304,1312,1315,1319,1341,1347,1359,1364,1368,1378,1391,1399,
        1413,1419,1431,1436,1440,1444,1447,1451,1463,1467,1477,1487,1492,
        1498,1513,1520,1524,1527,1530,1538,1543,1550,1555,1562,1566,1572,
        1577,1582,1588,1591,1597,1600,1603,1607,1610,1613,1618,1628,1633,
        1639,1642,1645,1648,1654,1657,1660,1663,1666,1670,1673,1676,1681,
        1691,1696,1704,1707,1710,1713,1721,1724,1727,1730,1734,1737,1740,
        1745,1755,1760,1768,1779,1783,1786,1789,1794,1804,1811,1815,1819,
        1823,1826,1836,1841,1846,1852,1855,1859,1865,1868,1871,1877,1881,
        1885,1887,1891,1897,1901,1907,1911,1914,1918,1922,1926,1931,1936,
        1940,1945,1953,1961,1964,1971,1981,1983,1987,1991,1995,2001,2007,
        2012,2019,2023,2038,2043,2052,2060,2066,2072,2079,2086,2090,2097,
        2099,2103,2107,2111,2114,2125,2131,2138,2142,2164,2172,2177,2182,
        2184,2190,2195,2201,2205,2210,2216,2221,2226,2230,2237,2243,2247,
        2257,2271,2275,2280,2286,2292,2296,2305,2309,2313,2325,2328,2331,
        2336,2340,2343,2347,2351,2357,2367,2371,2375,2380,2384,2389,2396,
        2401,2407,2411,2415,2418,2423,2428,2432,2436,2438,2443,2446,2449,
        2453,2465,2477,2480,2485,2488,2492,2496,2501,2504,2508,2511,2517,
        2527,2531,2536,2545,2549,2553,2557,2562,2566,2571,2577,2582,2586,
        2591,2597,2610,2617,2629,2638,2642,2662,2666,2670,2674,2678,2682,
        2686,2691,2694,2700,2704,2709,2725,2729,2732,2735,2749,2752,2758,
        2762,2767,2772,2779,2785,2789,2795,2799,2804,2810,2816,2824,2827,
        2831,2837,2841,2846,2853,2857,2861,2865,2869,2873,2876,2880,2884,
        2898,2902,2906,2912,2916,2920,2926,2930,2934,2942,2946,2953,2959,
        2969,2972,2976,2980,3000,3004,3008,3011,3014,3017,3020,3023,3026,
        3030,3034,3037,3043,3058,3075,3087,3097,3100,3102,3106,3110,3115,
        3122,3126,3136,3140,3146,3153,3163,3167,3170,3178,3182,3192,3196,
        3206,3210,3213,3218,3222,3225,3230,3240,3244,3254,3258,3268,3272,
        3275,3281,3285,3291,3295,3300,3309,3313,3316,3319,3332,3336,3339,
        3342,3346,3358,3362,3378,3390,3394,3398,3403,3407,3412,3416,3421,
        3425,3430,3434,3439,3443,3448,3452,3455,3457,3464,3469,3474,3478,
        3482,3487,3491,3495,3504,3508,3514,3518,3522,3526,3529,3531,3542,
        3544,3548,3552,3558,3562,3566,3572,3578,3584,3591,3598,3604,3608,
        3612,3616,3620,3624,3628,3633,3637,3641,3645,3651,3655,3659,3663,
        3666,3672,3676,3681,3686,3690,3696,3700,3708,3712,3719,3723,3727,
        3731,3735,3739,3761,3765,3772,3777,3780,3785,3788,3791,3796,3800,
        3804,3806,3808,3812,3815,3817,3831,3835,3856,3883,3891
    ]

class vbaParser ( Parser ):

    grammarFileName = "vbaParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ABS'", "'ACCESS'", "'ADDRESSOF'", "'ALIAS'", 
                     "'AND'", "'ANY'", "'ATTRIBUTE'", "'APPEND'", "'ARRAY'", 
                     "'AS'", "'BASE'", "'BEGIN'", "'BINARY'", "'BOOLEAN'", 
                     "'BYVAL'", "'BYREF'", "'BYTE'", "'CALL'", "'CASE'", 
                     "'CBOOL'", "'CBYTE'", "'CCUR'", "'CDATE'", "'CDBL'", 
                     "'CDEC'", "'CDECL'", "'CHDIR'", "'CHDRIVE'", "'CINT'", 
                     "'CIRCLE'", "'CLASS'", "'CLASS_INITIALIZE'", "'CLASS_TERMINATE'", 
                     "'CLNG'", "'CLNGLNG'", "'CLNGPTR'", "'CLOSE'", "'COMPARE'", 
                     "'CONST'", "'CSNG'", "'CSTR'", "'CVAR'", "'CVERR'", 
                     "'CURRENCY'", "'DATE'", "'DEBUG'", "'DECLARE'", "'DECIMAL'", 
                     "'DEFBOOL'", "'DEFBYTE'", "'DEFCUR'", "'DEFDATE'", 
                     "'DEFDBL'", "'DEFDEC'", "'DEFINT'", "'DEFLNG'", "'DEFLNGLNG'", 
                     "'DEFLNGPTR'", "'DEFOBJ'", "'DEFSNG'", "'DEFSTR'", 
                     "'DEFVAR'", "'DIM'", "'DO'", "'DOEVENTS'", "'DOUBLE'", 
                     "'EACH'", "'ELSE'", "'ELSEIF'", "'EMPTY'", "'ENDIF'", 
                     "'END'", "'ENUM'", "'EQV'", "'ERASE'", "'ERROR'", "'EVENT'", 
                     "'EXIT'", "'EXPLICIT'", "'FALSE'", "'FIX'", "'FRIEND'", 
                     "'FOR'", "'FUNCTION'", "'GET'", "'GLOBAL'", "'GO'", 
                     "'GOSUB'", "'GOTO'", "'IF'", "'IMP'", "'IMPLEMENTS'", 
                     "'IN'", "'INPUT'", "'INPUTB'", "'INT'", "'IS'", "'INTEGER'", 
                     "'KILL'", "'LBOUND'", "'LEN'", "'LENB'", "'LET'", "'LIB'", 
                     "'LIKE'", "'LINE'", "'LINEINPUT'", "'LOCK'", "'LONG'", 
                     "'LONGLONG'", "'LONGPTR'", "'LOOP'", "'LSET'", "'ME'", 
                     "'MID'", "'MIDB'", "'MID$'", "'MIDB$'", "'MOD'", "'MODULE'", 
                     "'NEXT'", "'NEW'", "'NOT'", "'NOTHING'", "'NULL'", 
                     "'OBJECT'", "'ON'", "'OPEN'", "'OPTION'", "'OPTIONAL'", 
                     "'OR'", "'OUTPUT'", "'PARAMARRAY'", "'PRESERVE'", "'PRINT'", 
                     "'PRIVATE'", "'PROPERTY'", "'PSET'", "'PTRSAFE'", "'PUBLIC'", 
                     "'PUT'", "'RANDOM'", "'RAISEEVENT'", "'READ'", "'REDIM'", 
                     "'REM'", "'RESET'", "'RESUME'", "'RETURN'", "'RSET'", 
                     "'SCALE'", "'SEEK'", "'SELECT'", "'SET'", "'SGN'", 
                     "'SHARED'", "'SINGLE'", "'SPC'", "'STATIC'", "'STEP'", 
                     "'STOP'", "'STRING'", "'SUB'", "'TAB'", "'TEXT'", "'THEN'", 
                     "'TO'", "'TRUE'", "'TYPE'", "'TYPEOF'", "'UBOUND'", 
                     "'UNLOCK'", "'UNTIL'", "'VB_BASE'", "'VB_CONTROL'", 
                     "'VB_CREATABLE'", "'VB_CUSTOMIZABLE'", "'VB_DESCRIPTION'", 
                     "'VB_EXPOSED'", "'VB_EXT_KEY '", "'VB_GLOBALNAMESPACE'", 
                     "'VB_HELPID'", "'VB_INVOKE_FUNC'", "'VB_INVOKE_PROPERTY '", 
                     "'VB_INVOKE_PROPERTYPUT'", "'VB_INVOKE_PROPERTYPUTREF'", 
                     "'VB_MEMBERFLAGS'", "'VB_NAME'", "'VB_PREDECLAREDID'", 
                     "'VB_PROCDATA'", "'VB_TEMPLATEDERIVED'", "'VB_USERMEMID'", 
                     "'VB_VARDESCRIPTION'", "'VB_VARHELPID'", "'VB_VARMEMBERFLAGS'", 
                     "'VB_VARPROCDATA '", "'VB_VARUSERMEMID'", "'VARIANT'", 
                     "'VERSION'", "'WEND'", "'WHILE'", "'WIDTH'", "'WITH'", 
                     "'WITHEVENTS'", "'WRITE'", "'XOR'", "'APPACTIVATE'", 
                     "'BEEP'", "'COLLECTION'", "'DATABASE'", "'DELETESETTING'", 
                     "'FILECOPY'", "'MKDIR'", "'NAME'", "'RANDOMIZE'", "'RMDIR'", 
                     "'SAVEPICTURE'", "'SAVESETTING'", "'SENDKEYS'", "'SETATTR'", 
                     "'TIME'", "'LOAD'", "'UNLOAD'", "'&'", "'@'", "':='", 
                     "','", "<INVALID>", "'$'", "'='", "'!'", "'>='", "'>'", 
                     "'#'", "'<='", "'('", "'<'", "'-'", "'-='", "'*'", 
                     "'<>'", "'%'", "'.'", "'+'", "'+='", "'^'", "')'", 
                     "';'", "'['", "']'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'''", "':'", "'_'" ]

    symbolicNames = [ "<INVALID>", "ABS", "ACCESS", "ADDRESSOF", "ALIAS", 
                      "AND", "ANY", "ATTRIBUTE", "APPEND", "ARRAY", "AS", 
                      "BASE", "BEGIN", "BINARY", "BOOLEAN", "BYVAL", "BYREF", 
                      "BYTE", "CALL", "CASE", "CBOOL", "CBYTE", "CCUR", 
                      "CDATE", "CDBL", "CDEC", "CDECL", "CHDIR", "CHDRIVE", 
                      "CINT", "CIRCLE", "CLASS", "CLASS_INITIALIZE", "CLASS_TERMINATE", 
                      "CLNG", "CLNGLNG", "CLNGPTR", "CLOSE", "COMPARE", 
                      "CONST", "CSNG", "CSTR", "CVAR", "CVERR", "CURRENCY", 
                      "DATE", "DEBUG", "DECLARE", "DECIMAL", "DEFBOOL", 
                      "DEFBYTE", "DEFCUR", "DEFDATE", "DEFDBL", "DEFDEC", 
                      "DEFINT", "DEFLNG", "DEFLNGLNG", "DEFLNGPTR", "DEFOBJ", 
                      "DEFSNG", "DEFSTR", "DEFVAR", "DIM", "DO", "DOEVENTS", 
                      "DOUBLE", "EACH", "ELSE", "ELSEIF", "EMPTY_X", "ENDIF", 
                      "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", "EXIT", 
                      "EXPLICIT", "FALSE", "FIX", "FRIEND", "FOR", "FUNCTION", 
                      "GET", "GLOBAL", "GO", "GOSUB", "GOTO", "IF", "IMP", 
                      "IMPLEMENTS", "IN", "INPUT", "INPUTB", "INT", "IS", 
                      "INTEGER", "KILL", "LBOUND", "LEN", "LENB", "LET", 
                      "LIB", "LIKE", "LINE", "LINEINPUT", "LOCK", "LONG", 
                      "LONGLONG", "LONGPTR", "LOOP", "LSET", "ME", "MID", 
                      "MIDB", "MID_D", "MIDB_D", "MOD", "MODULE", "NEXT", 
                      "NEW", "NOT", "NOTHING", "NULL_", "OBJECT", "ON", 
                      "OPEN", "OPTION", "OPTIONAL", "OR", "OUTPUT", "PARAMARRAY", 
                      "PRESERVE", "PRINT", "PRIVATE", "PROPERTY", "PSET", 
                      "PTRSAFE", "PUBLIC", "PUT", "RANDOM", "RAISEEVENT", 
                      "READ", "REDIM", "REM", "RESET", "RESUME", "RETURN", 
                      "RSET", "SCALE", "SEEK", "SELECT", "SET", "SGN", "SHARED", 
                      "SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", 
                      "SUB", "TAB", "TEXT", "THEN", "TO", "TRUE", "TYPE", 
                      "TYPEOF", "UBOUND", "UNLOCK", "UNTIL", "VB_BASE", 
                      "VB_CONTROL", "VB_CREATABLE", "VB_CUSTOMIZABLE", "VB_DESCRIPTION", 
                      "VB_EXPOSED", "VB_EXT_KEY", "VB_GLOBALNAMESPACE", 
                      "VB_HELPID", "VB_INVOKE_FUNC", "VB_INVOKE_PROPERTY", 
                      "VB_INVOKE_PROPERTYPUT", "VB_INVOKE_PROPERTYPUTREF", 
                      "VB_MEMBERFLAGS", "VB_NAME", "VB_PREDECLAREDID", "VB_PROCDATA", 
                      "VB_TEMPLATEDERIVED", "VB_USERMEMID", "VB_VARDESCRIPTION", 
                      "VB_VARHELPID", "VB_VARMEMBERFLAGS", "VB_VARPROCDATA", 
                      "VB_VARUSERMEMID", "VARIANT", "VERSION", "WEND", "WHILE", 
                      "WIDTH", "WITH", "WITHEVENTS", "WRITE", "XOR", "APPACTIVATE", 
                      "BEEP", "COLLECTION", "DATABASE", "DELETESETTING", 
                      "FILECOPY", "MKDIR", "NAME", "RANDOMIZE", "RMDIR", 
                      "SAVEPICTURE", "SAVESETTING", "SENDKEYS", "SETATTR", 
                      "TIME", "LOAD", "UNLOAD", "AMPERSAND", "ASPERAND", 
                      "ASSIGN", "COMMA", "DIV", "Dollar", "EQ", "EXCLAM", 
                      "GEQ", "GT", "HASH", "LEQ", "LPAREN", "LT", "MINUS", 
                      "MINUS_EQ", "MULT", "NEQ", "PERCENT", "PERIOD", "PLUS", 
                      "PLUS_EQ", "POW", "RPAREN", "SEMICOLON", "L_SQUARE_BRACKET", 
                      "R_SQUARE_BRACKET", "GUID", "STRINGLITERAL", "OCTLITERAL", 
                      "HEXLITERAL", "INTEGERLITERAL", "FLOATLITERAL", "DATELITERAL", 
                      "LINE_CONTINUATION", "NEWLINE", "REMCOMMENT", "COMMENT", 
                      "SINGLEQUOTE", "COLON", "UNDERSCORE", "WS", "MACRO_LINE", 
                      "IDENTIFIER" ]

    RULE_startRule = 0
    RULE_module = 1
    RULE_classFileHeader = 2
    RULE_classVersionIdentification = 3
    RULE_classBeginBlock = 4
    RULE_beginBlockConfigElement = 5
    RULE_proceduralModule = 6
    RULE_classModule = 7
    RULE_proceduralModuleHeader = 8
    RULE_classModuleHeader = 9
    RULE_classAttr = 10
    RULE_proceduralModuleBody = 11
    RULE_classModuleBody = 12
    RULE_unrestrictedName = 13
    RULE_name = 14
    RULE_untypedName = 15
    RULE_proceduralModuleDeclarationSection = 16
    RULE_classModuleDeclarationSection = 17
    RULE_proceduralModuleDirectiveElement = 18
    RULE_proceduralModuleDeclarationElement = 19
    RULE_classModuleDirectiveElement = 20
    RULE_classModuleDeclarationElement = 21
    RULE_commonOptionDirective = 22
    RULE_optionCompareDirective = 23
    RULE_optionBaseDirective = 24
    RULE_optionExplicitDirective = 25
    RULE_optionPrivateDirective = 26
    RULE_defDirective = 27
    RULE_letterSpec = 28
    RULE_singleLetter = 29
    RULE_universalLetterRange = 30
    RULE_upperCaseA = 31
    RULE_upperCaseZ = 32
    RULE_letterRange = 33
    RULE_firstLetter = 34
    RULE_lastLetter = 35
    RULE_defType = 36
    RULE_commonModuleDeclarationElement = 37
    RULE_moduleVariableDeclaration = 38
    RULE_globalVariableDeclaration = 39
    RULE_publicVariableDecalation = 40
    RULE_privateVariableDeclaration = 41
    RULE_moduleVariableDeclarationList = 42
    RULE_variableDeclarationList = 43
    RULE_variableDcl = 44
    RULE_typedVariableDcl = 45
    RULE_untypedVariableDcl = 46
    RULE_arrayClause = 47
    RULE_asClause = 48
    RULE_witheventsVariableDcl = 49
    RULE_classTypeName = 50
    RULE_arrayDim = 51
    RULE_boundsList = 52
    RULE_dimSpec = 53
    RULE_lowerBound = 54
    RULE_upperBound = 55
    RULE_asAutoObject = 56
    RULE_asType = 57
    RULE_typeSpec = 58
    RULE_fixedLengthStringSpec = 59
    RULE_stringLength = 60
    RULE_constantName = 61
    RULE_publicConstDeclaration = 62
    RULE_privateConstDeclaration = 63
    RULE_moduleConstDeclaration = 64
    RULE_constDeclaration = 65
    RULE_constItemList = 66
    RULE_constItem = 67
    RULE_typedNameConstItem = 68
    RULE_untypedNameConstItem = 69
    RULE_constAsClause = 70
    RULE_publicTypeDeclaration = 71
    RULE_privateTypeDeclaration = 72
    RULE_udtDeclaration = 73
    RULE_udtMemberList = 74
    RULE_udtElement = 75
    RULE_udtMember = 76
    RULE_untypedNameMemberDcl = 77
    RULE_reservedNameMemberDcl = 78
    RULE_optionalArrayClause = 79
    RULE_reservedMemberName = 80
    RULE_globalEnumDeclaration = 81
    RULE_publicEnumDeclaration = 82
    RULE_privateEnumDeclaration = 83
    RULE_enumDeclaration = 84
    RULE_enumMemberList = 85
    RULE_enumElement = 86
    RULE_enumMember = 87
    RULE_publicExternalProcedureDeclaration = 88
    RULE_privateExternalProcedureDeclaration = 89
    RULE_externalProcDcl = 90
    RULE_externalSub = 91
    RULE_externalFunction = 92
    RULE_libInfo = 93
    RULE_libClause = 94
    RULE_aliasClause = 95
    RULE_implementsDirective = 96
    RULE_eventDeclaration = 97
    RULE_eventParameterList = 98
    RULE_proceduralModuleCode = 99
    RULE_classModuleCode = 100
    RULE_proceduralModuleCodeElement = 101
    RULE_classModuleCodeElement = 102
    RULE_commonModuleCodeElement = 103
    RULE_procedureDeclaration = 104
    RULE_subroutineDeclaration = 105
    RULE_functionDeclaration = 106
    RULE_propertyGetDeclaration = 107
    RULE_propertyLhsDeclaration = 108
    RULE_endLabel = 109
    RULE_procedureTail = 110
    RULE_procedureScope = 111
    RULE_initialStatic = 112
    RULE_trailingStatic = 113
    RULE_subroutineName = 114
    RULE_functionName = 115
    RULE_prefixedName = 116
    RULE_functionType = 117
    RULE_arrayDesignator = 118
    RULE_procedureParameters = 119
    RULE_propertyParameters = 120
    RULE_parameterList = 121
    RULE_positionalParameters = 122
    RULE_optionalParameters = 123
    RULE_valueParam = 124
    RULE_positionalParam = 125
    RULE_optionalParam = 126
    RULE_paramArray = 127
    RULE_paramDcl = 128
    RULE_untypedNameParamDcl = 129
    RULE_typedNameParamDcl = 130
    RULE_optionalPrefix = 131
    RULE_parameterMechanism = 132
    RULE_parameterType = 133
    RULE_defaultValue = 134
    RULE_eventHandlerName = 135
    RULE_implementedName = 136
    RULE_lifecycleHandlerName = 137
    RULE_procedureBody = 138
    RULE_statementBlock = 139
    RULE_blockStatement = 140
    RULE_statement = 141
    RULE_statementLabelDefinition = 142
    RULE_statementLabel = 143
    RULE_statementLabelList = 144
    RULE_identifierStatementLabel = 145
    RULE_lineNumberLabel = 146
    RULE_remStatement = 147
    RULE_controlStatement = 148
    RULE_controlStatementExceptMultilineIf = 149
    RULE_callStatement = 150
    RULE_whileStatement = 151
    RULE_forStatement = 152
    RULE_simpleForStatement = 153
    RULE_explicitForStatement = 154
    RULE_nestedForStatement = 155
    RULE_forClause = 156
    RULE_startValue = 157
    RULE_endValue = 158
    RULE_stepClause = 159
    RULE_stepIncrement = 160
    RULE_forEachStatement = 161
    RULE_simpleForEachStatement = 162
    RULE_explicitForEachStatement = 163
    RULE_forEachClause = 164
    RULE_collection = 165
    RULE_exitForStatement = 166
    RULE_doStatement = 167
    RULE_conditionClause = 168
    RULE_whileClause = 169
    RULE_untilClause = 170
    RULE_exitDoStatement = 171
    RULE_ifStatement = 172
    RULE_elseIfBlock = 173
    RULE_elseBlock = 174
    RULE_singleLineIfStatement = 175
    RULE_ifWithNonEmptyThen = 176
    RULE_ifWithEmptyThen = 177
    RULE_singleLineElseClause = 178
    RULE_listOrLabel = 179
    RULE_sameLineStatement = 180
    RULE_selectCaseStatement = 181
    RULE_caseClause = 182
    RULE_caseElseClause = 183
    RULE_rangeClause = 184
    RULE_selectExpression = 185
    RULE_comparisonOperator = 186
    RULE_stopStatement = 187
    RULE_gotoStatement = 188
    RULE_onGotoStatement = 189
    RULE_gosubStatement = 190
    RULE_returnStatement = 191
    RULE_onGosubStatement = 192
    RULE_exitSubStatement = 193
    RULE_exitFunctionStatement = 194
    RULE_exitPropertyStatement = 195
    RULE_raiseeventStatement = 196
    RULE_eventArgumentList = 197
    RULE_eventArgument = 198
    RULE_withStatement = 199
    RULE_dataManipulationStatement = 200
    RULE_localVariableDeclaration = 201
    RULE_staticVariableDeclaration = 202
    RULE_localConstDeclaration = 203
    RULE_redimStatement = 204
    RULE_redimDeclarationList = 205
    RULE_redimVariableDcl = 206
    RULE_redimTypedVariableDcl = 207
    RULE_redimUntypedDcl = 208
    RULE_dynamicArrayDim = 209
    RULE_dynamicBoundsList = 210
    RULE_dynamicDimSpec = 211
    RULE_dynamicLowerBound = 212
    RULE_dynamicUpperBound = 213
    RULE_dynamicArrayClause = 214
    RULE_eraseStatement = 215
    RULE_eraseList = 216
    RULE_eraseElement = 217
    RULE_midStatement = 218
    RULE_modeSpecifier = 219
    RULE_stringArgument = 220
    RULE_startMid = 221
    RULE_length = 222
    RULE_lsetStatement = 223
    RULE_rsetStatement = 224
    RULE_letStatement = 225
    RULE_setStatement = 226
    RULE_errorHandlingStatement = 227
    RULE_onErrorStatement = 228
    RULE_errorBehavior = 229
    RULE_resumeStatement = 230
    RULE_errorStatement = 231
    RULE_errorNumber = 232
    RULE_fileStatement = 233
    RULE_openStatement = 234
    RULE_pathName = 235
    RULE_modeClause = 236
    RULE_modeOpt = 237
    RULE_accessClause = 238
    RULE_access = 239
    RULE_lock = 240
    RULE_lenClause = 241
    RULE_recLength = 242
    RULE_fileNumber = 243
    RULE_markedFileNumber = 244
    RULE_unmarkedFileNumber = 245
    RULE_closeStatement = 246
    RULE_fileNumberList = 247
    RULE_seekStatement = 248
    RULE_position = 249
    RULE_lockStatement = 250
    RULE_recordRange = 251
    RULE_startRecordNumber = 252
    RULE_endRecordNumber = 253
    RULE_unlockStatement = 254
    RULE_lineInputStatement = 255
    RULE_variableName = 256
    RULE_widthStatement = 257
    RULE_lineWidth = 258
    RULE_printStatement = 259
    RULE_outputList = 260
    RULE_outputItem = 261
    RULE_outputClause = 262
    RULE_charPosition = 263
    RULE_outputExpression = 264
    RULE_spcClause = 265
    RULE_spcNumber = 266
    RULE_tabClause = 267
    RULE_tabNumber = 268
    RULE_writeStatement = 269
    RULE_inputStatement = 270
    RULE_inputList = 271
    RULE_inputVariable = 272
    RULE_putStatement = 273
    RULE_recordNumber = 274
    RULE_data = 275
    RULE_getStatement = 276
    RULE_variable = 277
    RULE_attributeStatement = 278
    RULE_attributeName = 279
    RULE_expression = 280
    RULE_lExpression = 281
    RULE_literalExpression = 282
    RULE_parenthesizedExpression = 283
    RULE_typeofIsExpression = 284
    RULE_newExpress = 285
    RULE_notOperatorExpression = 286
    RULE_unaryMinusExpression = 287
    RULE_simpleNameExpression = 288
    RULE_instanceExpression = 289
    RULE_memberAccessExpression = 290
    RULE_indexExpression = 291
    RULE_argumentList = 292
    RULE_positionalOrNamedArgumentList = 293
    RULE_positionalArgument = 294
    RULE_requiredPositionalArgument = 295
    RULE_namedArgumentList = 296
    RULE_namedArgument = 297
    RULE_argumentExpression = 298
    RULE_dictionaryAccessExpression = 299
    RULE_withExpression = 300
    RULE_withMemberAccessExpression = 301
    RULE_withDictionaryAccessExpression = 302
    RULE_constantExpression = 303
    RULE_ccExpression = 304
    RULE_booleanExpression = 305
    RULE_integerExpression = 306
    RULE_variableExpression = 307
    RULE_boundVariableExpression = 308
    RULE_typeExpression = 309
    RULE_definedTypeExpression = 310
    RULE_addressofExpression = 311
    RULE_procedurePointerExpression = 312
    RULE_wsc = 313
    RULE_endOfLine = 314
    RULE_endOfLineNoWs = 315
    RULE_endOfStatement = 316
    RULE_endOfStatementNoWs = 317
    RULE_commentBody = 318
    RULE_reservedIdentifier = 319
    RULE_ambiguousIdentifier = 320
    RULE_statementKeyword = 321
    RULE_remKeyword = 322
    RULE_markerKeyword = 323
    RULE_operatorIdentifier = 324
    RULE_reservedName = 325
    RULE_specialForm = 326
    RULE_reservedTypeIdentifier = 327
    RULE_typeableReservedName = 328
    RULE_literalIdentifier = 329
    RULE_booleanLiteralIdentifier = 330
    RULE_objectLiteralIdentifier = 331
    RULE_variantLiteralIdentifier = 332
    RULE_reservedForImplementationUse = 333
    RULE_futureReserved = 334
    RULE_foreignName = 335
    RULE_foreignIdentifier = 336
    RULE_builtinType = 337
    RULE_typedName = 338
    RULE_typeSuffix = 339
    RULE_ambiguousKeyword = 340

    ruleNames =  [ "startRule", "module", "classFileHeader", "classVersionIdentification", 
                   "classBeginBlock", "beginBlockConfigElement", "proceduralModule", 
                   "classModule", "proceduralModuleHeader", "classModuleHeader", 
                   "classAttr", "proceduralModuleBody", "classModuleBody", 
                   "unrestrictedName", "name", "untypedName", "proceduralModuleDeclarationSection", 
                   "classModuleDeclarationSection", "proceduralModuleDirectiveElement", 
                   "proceduralModuleDeclarationElement", "classModuleDirectiveElement", 
                   "classModuleDeclarationElement", "commonOptionDirective", 
                   "optionCompareDirective", "optionBaseDirective", "optionExplicitDirective", 
                   "optionPrivateDirective", "defDirective", "letterSpec", 
                   "singleLetter", "universalLetterRange", "upperCaseA", 
                   "upperCaseZ", "letterRange", "firstLetter", "lastLetter", 
                   "defType", "commonModuleDeclarationElement", "moduleVariableDeclaration", 
                   "globalVariableDeclaration", "publicVariableDecalation", 
                   "privateVariableDeclaration", "moduleVariableDeclarationList", 
                   "variableDeclarationList", "variableDcl", "typedVariableDcl", 
                   "untypedVariableDcl", "arrayClause", "asClause", "witheventsVariableDcl", 
                   "classTypeName", "arrayDim", "boundsList", "dimSpec", 
                   "lowerBound", "upperBound", "asAutoObject", "asType", 
                   "typeSpec", "fixedLengthStringSpec", "stringLength", 
                   "constantName", "publicConstDeclaration", "privateConstDeclaration", 
                   "moduleConstDeclaration", "constDeclaration", "constItemList", 
                   "constItem", "typedNameConstItem", "untypedNameConstItem", 
                   "constAsClause", "publicTypeDeclaration", "privateTypeDeclaration", 
                   "udtDeclaration", "udtMemberList", "udtElement", "udtMember", 
                   "untypedNameMemberDcl", "reservedNameMemberDcl", "optionalArrayClause", 
                   "reservedMemberName", "globalEnumDeclaration", "publicEnumDeclaration", 
                   "privateEnumDeclaration", "enumDeclaration", "enumMemberList", 
                   "enumElement", "enumMember", "publicExternalProcedureDeclaration", 
                   "privateExternalProcedureDeclaration", "externalProcDcl", 
                   "externalSub", "externalFunction", "libInfo", "libClause", 
                   "aliasClause", "implementsDirective", "eventDeclaration", 
                   "eventParameterList", "proceduralModuleCode", "classModuleCode", 
                   "proceduralModuleCodeElement", "classModuleCodeElement", 
                   "commonModuleCodeElement", "procedureDeclaration", "subroutineDeclaration", 
                   "functionDeclaration", "propertyGetDeclaration", "propertyLhsDeclaration", 
                   "endLabel", "procedureTail", "procedureScope", "initialStatic", 
                   "trailingStatic", "subroutineName", "functionName", "prefixedName", 
                   "functionType", "arrayDesignator", "procedureParameters", 
                   "propertyParameters", "parameterList", "positionalParameters", 
                   "optionalParameters", "valueParam", "positionalParam", 
                   "optionalParam", "paramArray", "paramDcl", "untypedNameParamDcl", 
                   "typedNameParamDcl", "optionalPrefix", "parameterMechanism", 
                   "parameterType", "defaultValue", "eventHandlerName", 
                   "implementedName", "lifecycleHandlerName", "procedureBody", 
                   "statementBlock", "blockStatement", "statement", "statementLabelDefinition", 
                   "statementLabel", "statementLabelList", "identifierStatementLabel", 
                   "lineNumberLabel", "remStatement", "controlStatement", 
                   "controlStatementExceptMultilineIf", "callStatement", 
                   "whileStatement", "forStatement", "simpleForStatement", 
                   "explicitForStatement", "nestedForStatement", "forClause", 
                   "startValue", "endValue", "stepClause", "stepIncrement", 
                   "forEachStatement", "simpleForEachStatement", "explicitForEachStatement", 
                   "forEachClause", "collection", "exitForStatement", "doStatement", 
                   "conditionClause", "whileClause", "untilClause", "exitDoStatement", 
                   "ifStatement", "elseIfBlock", "elseBlock", "singleLineIfStatement", 
                   "ifWithNonEmptyThen", "ifWithEmptyThen", "singleLineElseClause", 
                   "listOrLabel", "sameLineStatement", "selectCaseStatement", 
                   "caseClause", "caseElseClause", "rangeClause", "selectExpression", 
                   "comparisonOperator", "stopStatement", "gotoStatement", 
                   "onGotoStatement", "gosubStatement", "returnStatement", 
                   "onGosubStatement", "exitSubStatement", "exitFunctionStatement", 
                   "exitPropertyStatement", "raiseeventStatement", "eventArgumentList", 
                   "eventArgument", "withStatement", "dataManipulationStatement", 
                   "localVariableDeclaration", "staticVariableDeclaration", 
                   "localConstDeclaration", "redimStatement", "redimDeclarationList", 
                   "redimVariableDcl", "redimTypedVariableDcl", "redimUntypedDcl", 
                   "dynamicArrayDim", "dynamicBoundsList", "dynamicDimSpec", 
                   "dynamicLowerBound", "dynamicUpperBound", "dynamicArrayClause", 
                   "eraseStatement", "eraseList", "eraseElement", "midStatement", 
                   "modeSpecifier", "stringArgument", "startMid", "length", 
                   "lsetStatement", "rsetStatement", "letStatement", "setStatement", 
                   "errorHandlingStatement", "onErrorStatement", "errorBehavior", 
                   "resumeStatement", "errorStatement", "errorNumber", "fileStatement", 
                   "openStatement", "pathName", "modeClause", "modeOpt", 
                   "accessClause", "access", "lock", "lenClause", "recLength", 
                   "fileNumber", "markedFileNumber", "unmarkedFileNumber", 
                   "closeStatement", "fileNumberList", "seekStatement", 
                   "position", "lockStatement", "recordRange", "startRecordNumber", 
                   "endRecordNumber", "unlockStatement", "lineInputStatement", 
                   "variableName", "widthStatement", "lineWidth", "printStatement", 
                   "outputList", "outputItem", "outputClause", "charPosition", 
                   "outputExpression", "spcClause", "spcNumber", "tabClause", 
                   "tabNumber", "writeStatement", "inputStatement", "inputList", 
                   "inputVariable", "putStatement", "recordNumber", "data", 
                   "getStatement", "variable", "attributeStatement", "attributeName", 
                   "expression", "lExpression", "literalExpression", "parenthesizedExpression", 
                   "typeofIsExpression", "newExpress", "notOperatorExpression", 
                   "unaryMinusExpression", "simpleNameExpression", "instanceExpression", 
                   "memberAccessExpression", "indexExpression", "argumentList", 
                   "positionalOrNamedArgumentList", "positionalArgument", 
                   "requiredPositionalArgument", "namedArgumentList", "namedArgument", 
                   "argumentExpression", "dictionaryAccessExpression", "withExpression", 
                   "withMemberAccessExpression", "withDictionaryAccessExpression", 
                   "constantExpression", "ccExpression", "booleanExpression", 
                   "integerExpression", "variableExpression", "boundVariableExpression", 
                   "typeExpression", "definedTypeExpression", "addressofExpression", 
                   "procedurePointerExpression", "wsc", "endOfLine", "endOfLineNoWs", 
                   "endOfStatement", "endOfStatementNoWs", "commentBody", 
                   "reservedIdentifier", "ambiguousIdentifier", "statementKeyword", 
                   "remKeyword", "markerKeyword", "operatorIdentifier", 
                   "reservedName", "specialForm", "reservedTypeIdentifier", 
                   "typeableReservedName", "literalIdentifier", "booleanLiteralIdentifier", 
                   "objectLiteralIdentifier", "variantLiteralIdentifier", 
                   "reservedForImplementationUse", "futureReserved", "foreignName", 
                   "foreignIdentifier", "builtinType", "typedName", "typeSuffix", 
                   "ambiguousKeyword" ]

    EOF = Token.EOF
    ABS=1
    ACCESS=2
    ADDRESSOF=3
    ALIAS=4
    AND=5
    ANY=6
    ATTRIBUTE=7
    APPEND=8
    ARRAY=9
    AS=10
    BASE=11
    BEGIN=12
    BINARY=13
    BOOLEAN=14
    BYVAL=15
    BYREF=16
    BYTE=17
    CALL=18
    CASE=19
    CBOOL=20
    CBYTE=21
    CCUR=22
    CDATE=23
    CDBL=24
    CDEC=25
    CDECL=26
    CHDIR=27
    CHDRIVE=28
    CINT=29
    CIRCLE=30
    CLASS=31
    CLASS_INITIALIZE=32
    CLASS_TERMINATE=33
    CLNG=34
    CLNGLNG=35
    CLNGPTR=36
    CLOSE=37
    COMPARE=38
    CONST=39
    CSNG=40
    CSTR=41
    CVAR=42
    CVERR=43
    CURRENCY=44
    DATE=45
    DEBUG=46
    DECLARE=47
    DECIMAL=48
    DEFBOOL=49
    DEFBYTE=50
    DEFCUR=51
    DEFDATE=52
    DEFDBL=53
    DEFDEC=54
    DEFINT=55
    DEFLNG=56
    DEFLNGLNG=57
    DEFLNGPTR=58
    DEFOBJ=59
    DEFSNG=60
    DEFSTR=61
    DEFVAR=62
    DIM=63
    DO=64
    DOEVENTS=65
    DOUBLE=66
    EACH=67
    ELSE=68
    ELSEIF=69
    EMPTY_X=70
    ENDIF=71
    END=72
    ENUM=73
    EQV=74
    ERASE=75
    ERROR=76
    EVENT=77
    EXIT=78
    EXPLICIT=79
    FALSE=80
    FIX=81
    FRIEND=82
    FOR=83
    FUNCTION=84
    GET=85
    GLOBAL=86
    GO=87
    GOSUB=88
    GOTO=89
    IF=90
    IMP=91
    IMPLEMENTS=92
    IN=93
    INPUT=94
    INPUTB=95
    INT=96
    IS=97
    INTEGER=98
    KILL=99
    LBOUND=100
    LEN=101
    LENB=102
    LET=103
    LIB=104
    LIKE=105
    LINE=106
    LINEINPUT=107
    LOCK=108
    LONG=109
    LONGLONG=110
    LONGPTR=111
    LOOP=112
    LSET=113
    ME=114
    MID=115
    MIDB=116
    MID_D=117
    MIDB_D=118
    MOD=119
    MODULE=120
    NEXT=121
    NEW=122
    NOT=123
    NOTHING=124
    NULL_=125
    OBJECT=126
    ON=127
    OPEN=128
    OPTION=129
    OPTIONAL=130
    OR=131
    OUTPUT=132
    PARAMARRAY=133
    PRESERVE=134
    PRINT=135
    PRIVATE=136
    PROPERTY=137
    PSET=138
    PTRSAFE=139
    PUBLIC=140
    PUT=141
    RANDOM=142
    RAISEEVENT=143
    READ=144
    REDIM=145
    REM=146
    RESET=147
    RESUME=148
    RETURN=149
    RSET=150
    SCALE=151
    SEEK=152
    SELECT=153
    SET=154
    SGN=155
    SHARED=156
    SINGLE=157
    SPC=158
    STATIC=159
    STEP=160
    STOP=161
    STRING=162
    SUB=163
    TAB=164
    TEXT=165
    THEN=166
    TO=167
    TRUE=168
    TYPE=169
    TYPEOF=170
    UBOUND=171
    UNLOCK=172
    UNTIL=173
    VB_BASE=174
    VB_CONTROL=175
    VB_CREATABLE=176
    VB_CUSTOMIZABLE=177
    VB_DESCRIPTION=178
    VB_EXPOSED=179
    VB_EXT_KEY=180
    VB_GLOBALNAMESPACE=181
    VB_HELPID=182
    VB_INVOKE_FUNC=183
    VB_INVOKE_PROPERTY=184
    VB_INVOKE_PROPERTYPUT=185
    VB_INVOKE_PROPERTYPUTREF=186
    VB_MEMBERFLAGS=187
    VB_NAME=188
    VB_PREDECLAREDID=189
    VB_PROCDATA=190
    VB_TEMPLATEDERIVED=191
    VB_USERMEMID=192
    VB_VARDESCRIPTION=193
    VB_VARHELPID=194
    VB_VARMEMBERFLAGS=195
    VB_VARPROCDATA=196
    VB_VARUSERMEMID=197
    VARIANT=198
    VERSION=199
    WEND=200
    WHILE=201
    WIDTH=202
    WITH=203
    WITHEVENTS=204
    WRITE=205
    XOR=206
    APPACTIVATE=207
    BEEP=208
    COLLECTION=209
    DATABASE=210
    DELETESETTING=211
    FILECOPY=212
    MKDIR=213
    NAME=214
    RANDOMIZE=215
    RMDIR=216
    SAVEPICTURE=217
    SAVESETTING=218
    SENDKEYS=219
    SETATTR=220
    TIME=221
    LOAD=222
    UNLOAD=223
    AMPERSAND=224
    ASPERAND=225
    ASSIGN=226
    COMMA=227
    DIV=228
    Dollar=229
    EQ=230
    EXCLAM=231
    GEQ=232
    GT=233
    HASH=234
    LEQ=235
    LPAREN=236
    LT=237
    MINUS=238
    MINUS_EQ=239
    MULT=240
    NEQ=241
    PERCENT=242
    PERIOD=243
    PLUS=244
    PLUS_EQ=245
    POW=246
    RPAREN=247
    SEMICOLON=248
    L_SQUARE_BRACKET=249
    R_SQUARE_BRACKET=250
    GUID=251
    STRINGLITERAL=252
    OCTLITERAL=253
    HEXLITERAL=254
    INTEGERLITERAL=255
    FLOATLITERAL=256
    DATELITERAL=257
    LINE_CONTINUATION=258
    NEWLINE=259
    REMCOMMENT=260
    COMMENT=261
    SINGLEQUOTE=262
    COLON=263
    UNDERSCORE=264
    WS=265
    MACRO_LINE=266
    IDENTIFIER=267

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(vbaParser.ModuleContext,0)


        def EOF(self):
            return self.getToken(vbaParser.EOF, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_startRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRule" ):
                listener.enterStartRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRule" ):
                listener.exitStartRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartRule" ):
                return visitor.visitStartRule(self)
            else:
                return visitor.visitChildren(self)




    def startRule(self):

        localctx = vbaParser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.module()
            self.state = 683
            self.match(vbaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModule(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleContext,0)


        def classFileHeader(self):
            return self.getTypedRuleContext(vbaParser.ClassFileHeaderContext,0)


        def classModule(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleContext,0)


        def endOfLineNoWs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineNoWsContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule" ):
                return visitor.visitModule(self)
            else:
                return visitor.visitChildren(self)




    def module(self):

        localctx = vbaParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 685
                    self.endOfLineNoWs() 
                self.state = 690
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 259, 260, 261, 265]:
                self.state = 691
                self.proceduralModule()
                pass
            elif token in [199]:
                self.state = 692
                self.classFileHeader()
                self.state = 693
                self.classModule()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 700
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 697
                    self.endOfLine() 
                self.state = 702
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==265:
                self.state = 703
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassFileHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classVersionIdentification(self):
            return self.getTypedRuleContext(vbaParser.ClassVersionIdentificationContext,0)


        def classBeginBlock(self):
            return self.getTypedRuleContext(vbaParser.ClassBeginBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classFileHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassFileHeader" ):
                listener.enterClassFileHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassFileHeader" ):
                listener.exitClassFileHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassFileHeader" ):
                return visitor.visitClassFileHeader(self)
            else:
                return visitor.visitChildren(self)




    def classFileHeader(self):

        localctx = vbaParser.ClassFileHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_classFileHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.classVersionIdentification()
            self.state = 707
            self.classBeginBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassVersionIdentificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(vbaParser.VERSION, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def FLOATLITERAL(self):
            return self.getToken(vbaParser.FLOATLITERAL, 0)

        def CLASS(self):
            return self.getToken(vbaParser.CLASS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_classVersionIdentification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassVersionIdentification" ):
                listener.enterClassVersionIdentification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassVersionIdentification" ):
                listener.exitClassVersionIdentification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassVersionIdentification" ):
                return visitor.visitClassVersionIdentification(self)
            else:
                return visitor.visitChildren(self)




    def classVersionIdentification(self):

        localctx = vbaParser.ClassVersionIdentificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_classVersionIdentification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(vbaParser.VERSION)
            self.state = 710
            self.match(vbaParser.WS)
            self.state = 711
            self.match(vbaParser.FLOATLITERAL)
            self.state = 714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 712
                self.match(vbaParser.WS)
                self.state = 713
                self.match(vbaParser.CLASS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBeginBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def BEGIN(self):
            return self.getToken(vbaParser.BEGIN, 0)

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def GUID(self):
            return self.getToken(vbaParser.GUID, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def beginBlockConfigElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BeginBlockConfigElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.BeginBlockConfigElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classBeginBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBeginBlock" ):
                listener.enterClassBeginBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBeginBlock" ):
                listener.exitClassBeginBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBeginBlock" ):
                return visitor.visitClassBeginBlock(self)
            else:
                return visitor.visitChildren(self)




    def classBeginBlock(self):

        localctx = vbaParser.ClassBeginBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_classBeginBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.endOfLine()
            self.state = 717
            self.match(vbaParser.BEGIN)
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 718
                self.match(vbaParser.WS)
                self.state = 719
                self.match(vbaParser.GUID)
                self.state = 720
                self.match(vbaParser.WS)
                self.state = 721
                self.ambiguousIdentifier()


            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 71) != 0):
                self.state = 724
                self.endOfLine()
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 731 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 730
                self.beginBlockConfigElement()
                self.state = 733 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 290312960276) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 2379052343032285185) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 1297036692691353637) != 0) or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & 1152921504606978047) != 0)):
                    break

            self.state = 735
            self.endOfLine()
            self.state = 736
            self.match(vbaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginBlockConfigElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def literalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.LiteralExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.LiteralExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def COLON(self):
            return self.getToken(vbaParser.COLON, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_beginBlockConfigElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginBlockConfigElement" ):
                listener.enterBeginBlockConfigElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginBlockConfigElement" ):
                listener.exitBeginBlockConfigElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeginBlockConfigElement" ):
                return visitor.visitBeginBlockConfigElement(self)
            else:
                return visitor.visitChildren(self)




    def beginBlockConfigElement(self):

        localctx = vbaParser.BeginBlockConfigElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_beginBlockConfigElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.ambiguousIdentifier()
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==265:
                self.state = 739
                self.match(vbaParser.WS)


            self.state = 742
            self.match(vbaParser.EQ)
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==265:
                self.state = 743
                self.match(vbaParser.WS)


            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==238:
                self.state = 746
                self.match(vbaParser.MINUS)


            self.state = 749
            self.literalExpression()
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 750
                self.match(vbaParser.COLON)
                self.state = 751
                self.literalExpression()


            self.state = 757
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 754
                    self.endOfLine() 
                self.state = 759
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModuleHeader(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleHeaderContext,0)


        def proceduralModuleBody(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleBodyContext,0)


        def endOfLineNoWs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineNoWsContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModule" ):
                listener.enterProceduralModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModule" ):
                listener.exitProceduralModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModule" ):
                return visitor.visitProceduralModule(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModule(self):

        localctx = vbaParser.ProceduralModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_proceduralModule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.proceduralModuleHeader()
            self.state = 764
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 761
                    self.endOfLineNoWs() 
                self.state = 766
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

            self.state = 767
            self.proceduralModuleBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModuleHeader(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleHeaderContext,0)


        def classModuleBody(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleBodyContext,0)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classModule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModule" ):
                listener.enterClassModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModule" ):
                listener.exitClassModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModule" ):
                return visitor.visitClassModule(self)
            else:
                return visitor.visitChildren(self)




    def classModule(self):

        localctx = vbaParser.ClassModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_classModule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.classModuleHeader()
            self.state = 773
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 770
                    self.endOfLine() 
                self.state = 775
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 776
            self.classModuleBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def VB_NAME(self):
            return self.getToken(vbaParser.VB_NAME, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleHeader" ):
                listener.enterProceduralModuleHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleHeader" ):
                listener.exitProceduralModuleHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleHeader" ):
                return visitor.visitProceduralModuleHeader(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleHeader(self):

        localctx = vbaParser.ProceduralModuleHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proceduralModuleHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 71) != 0):
                self.state = 778
                self.endOfLine()
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 784
            self.match(vbaParser.ATTRIBUTE)
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==265:
                self.state = 785
                self.match(vbaParser.WS)


            self.state = 788
            self.match(vbaParser.VB_NAME)
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==265:
                self.state = 789
                self.match(vbaParser.WS)


            self.state = 792
            self.match(vbaParser.EQ)
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==265:
                self.state = 793
                self.match(vbaParser.WS)


            self.state = 796
            self.match(vbaParser.STRINGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ClassAttrContext)
            else:
                return self.getTypedRuleContext(vbaParser.ClassAttrContext,i)


        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleHeader" ):
                listener.enterClassModuleHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleHeader" ):
                listener.exitClassModuleHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleHeader" ):
                return visitor.visitClassModuleHeader(self)
            else:
                return visitor.visitChildren(self)




    def classModuleHeader(self):

        localctx = vbaParser.ClassModuleHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_classModuleHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 799 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 798
                        self.endOfLine()
                        self.state = 801 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 71) != 0)):
                            break

                    self.state = 803
                    self.classAttr()

                else:
                    raise NoViableAltException(self)
                self.state = 807 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

            self.state = 810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 809
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def VB_NAME(self):
            return self.getToken(vbaParser.VB_NAME, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def VB_GLOBALNAMESPACE(self):
            return self.getToken(vbaParser.VB_GLOBALNAMESPACE, 0)

        def FALSE(self):
            return self.getToken(vbaParser.FALSE, 0)

        def VB_CREATABLE(self):
            return self.getToken(vbaParser.VB_CREATABLE, 0)

        def VB_PREDECLAREDID(self):
            return self.getToken(vbaParser.VB_PREDECLAREDID, 0)

        def booleanLiteralIdentifier(self):
            return self.getTypedRuleContext(vbaParser.BooleanLiteralIdentifierContext,0)


        def VB_EXPOSED(self):
            return self.getToken(vbaParser.VB_EXPOSED, 0)

        def VB_CUSTOMIZABLE(self):
            return self.getToken(vbaParser.VB_CUSTOMIZABLE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_classAttr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassAttr" ):
                listener.enterClassAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassAttr" ):
                listener.exitClassAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassAttr" ):
                return visitor.visitClassAttr(self)
            else:
                return visitor.visitChildren(self)




    def classAttr(self):

        localctx = vbaParser.ClassAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classAttr)
        self._la = 0 # Token type
        try:
            self.state = 890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 812
                self.match(vbaParser.ATTRIBUTE)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 813
                    self.match(vbaParser.WS)


                self.state = 816
                self.match(vbaParser.VB_NAME)
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 817
                    self.match(vbaParser.WS)


                self.state = 820
                self.match(vbaParser.EQ)
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 821
                    self.match(vbaParser.WS)


                self.state = 824
                self.match(vbaParser.STRINGLITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 825
                self.match(vbaParser.ATTRIBUTE)
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 826
                    self.match(vbaParser.WS)


                self.state = 829
                self.match(vbaParser.VB_GLOBALNAMESPACE)
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 830
                    self.match(vbaParser.WS)


                self.state = 833
                self.match(vbaParser.EQ)
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 834
                    self.match(vbaParser.WS)


                self.state = 837
                self.match(vbaParser.FALSE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 838
                self.match(vbaParser.ATTRIBUTE)
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 839
                    self.match(vbaParser.WS)


                self.state = 842
                self.match(vbaParser.VB_CREATABLE)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 843
                    self.match(vbaParser.WS)


                self.state = 846
                self.match(vbaParser.EQ)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 847
                    self.match(vbaParser.WS)


                self.state = 850
                self.match(vbaParser.FALSE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 851
                self.match(vbaParser.ATTRIBUTE)
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 852
                    self.match(vbaParser.WS)


                self.state = 855
                self.match(vbaParser.VB_PREDECLAREDID)
                self.state = 857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 856
                    self.match(vbaParser.WS)


                self.state = 859
                self.match(vbaParser.EQ)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 860
                    self.match(vbaParser.WS)


                self.state = 863
                self.booleanLiteralIdentifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 864
                self.match(vbaParser.ATTRIBUTE)
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 865
                    self.match(vbaParser.WS)


                self.state = 868
                self.match(vbaParser.VB_EXPOSED)
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 869
                    self.match(vbaParser.WS)


                self.state = 872
                self.match(vbaParser.EQ)
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 873
                    self.match(vbaParser.WS)


                self.state = 876
                self.booleanLiteralIdentifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 877
                self.match(vbaParser.ATTRIBUTE)
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 878
                    self.match(vbaParser.WS)


                self.state = 881
                self.match(vbaParser.VB_CUSTOMIZABLE)
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 882
                    self.match(vbaParser.WS)


                self.state = 885
                self.match(vbaParser.EQ)
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 886
                    self.match(vbaParser.WS)


                self.state = 889
                self.booleanLiteralIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModuleCode(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleCodeContext,0)


        def proceduralModuleDeclarationSection(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleDeclarationSectionContext,0)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleBody" ):
                listener.enterProceduralModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleBody" ):
                listener.exitProceduralModuleBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleBody" ):
                return visitor.visitProceduralModuleBody(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleBody(self):

        localctx = vbaParser.ProceduralModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_proceduralModuleBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 892
                self.proceduralModuleDeclarationSection()


            self.state = 898
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 895
                    self.endOfLine() 
                self.state = 900
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 901
            self.proceduralModuleCode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModuleCode(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleCodeContext,0)


        def classModuleDeclarationSection(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleDeclarationSectionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleBody" ):
                listener.enterClassModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleBody" ):
                listener.exitClassModuleBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleBody" ):
                return visitor.visitClassModuleBody(self)
            else:
                return visitor.visitChildren(self)




    def classModuleBody(self):

        localctx = vbaParser.ClassModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_classModuleBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 903
                self.classModuleDeclarationSection()


            self.state = 906
            self.classModuleCode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnrestrictedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedIdentifier(self):
            return self.getTypedRuleContext(vbaParser.ReservedIdentifierContext,0)


        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unrestrictedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnrestrictedName" ):
                listener.enterUnrestrictedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnrestrictedName" ):
                listener.exitUnrestrictedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnrestrictedName" ):
                return visitor.visitUnrestrictedName(self)
            else:
                return visitor.visitChildren(self)




    def unrestrictedName(self):

        localctx = vbaParser.UnrestrictedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_unrestrictedName)
        try:
            self.state = 910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 5, 6, 7, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 140, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206]:
                self.enterOuterAlt(localctx, 1)
                self.state = 908
                self.reservedIdentifier()
                pass
            elif token in [2, 4, 8, 11, 12, 13, 27, 28, 31, 32, 33, 38, 76, 87, 99, 104, 106, 115, 116, 117, 118, 120, 126, 132, 137, 142, 144, 147, 160, 165, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 267]:
                self.enterOuterAlt(localctx, 2)
                self.state = 909
                self.ambiguousIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = vbaParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_name)
        try:
            self.state = 914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 912
                self.untypedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 913
                self.typedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untypedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedName" ):
                listener.enterUntypedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedName" ):
                listener.exitUntypedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedName" ):
                return visitor.visitUntypedName(self)
            else:
                return visitor.visitChildren(self)




    def untypedName(self):

        localctx = vbaParser.UntypedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_untypedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleDeclarationSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModuleDeclarationElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ProceduralModuleDeclarationElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ProceduralModuleDeclarationElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def defDirective(self):
            return self.getTypedRuleContext(vbaParser.DefDirectiveContext,0)


        def endOfLineNoWs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineNoWsContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,i)


        def proceduralModuleDirectiveElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ProceduralModuleDirectiveElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ProceduralModuleDirectiveElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleDeclarationSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleDeclarationSection" ):
                listener.enterProceduralModuleDeclarationSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleDeclarationSection" ):
                listener.exitProceduralModuleDeclarationSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleDeclarationSection" ):
                return visitor.visitProceduralModuleDeclarationSection(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleDeclarationSection(self):

        localctx = vbaParser.ProceduralModuleDeclarationSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_proceduralModuleDeclarationSection)
        self._la = 0 # Token type
        try:
            self.state = 956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 925 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 919 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 918
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 921 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

                        self.state = 923
                        self.proceduralModuleDeclarationElement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 927 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 938
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 930 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 929
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 932 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

                        self.state = 934
                        self.proceduralModuleDirectiveElement() 
                    self.state = 940
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                self.state = 942 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 941
                    self.endOfLine()
                    self.state = 944 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 71) != 0)):
                        break

                self.state = 946
                self.defDirective()
                self.state = 953
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 948
                        self.proceduralModuleDeclarationElement()
                        self.state = 949
                        self.endOfLineNoWs() 
                    self.state = 955
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleDeclarationSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModuleDeclarationElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ClassModuleDeclarationElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ClassModuleDeclarationElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def defDirective(self):
            return self.getTypedRuleContext(vbaParser.DefDirectiveContext,0)


        def classModuleDirectiveElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ClassModuleDirectiveElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ClassModuleDirectiveElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleDeclarationSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleDeclarationSection" ):
                listener.enterClassModuleDeclarationSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleDeclarationSection" ):
                listener.exitClassModuleDeclarationSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleDeclarationSection" ):
                return visitor.visitClassModuleDeclarationSection(self)
            else:
                return visitor.visitChildren(self)




    def classModuleDeclarationSection(self):

        localctx = vbaParser.ClassModuleDeclarationSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_classModuleDeclarationSection)
        try:
            self.state = 992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 964 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 958
                        self.classModuleDeclarationElement()
                        self.state = 960 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 959
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 962 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 966 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 976
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 968
                        self.classModuleDirectiveElement()
                        self.state = 970 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 969
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 972 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
                 
                    self.state = 978
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

                self.state = 979
                self.defDirective()
                self.state = 989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 981
                        self.classModuleDeclarationElement()
                        self.state = 983 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 982
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 985 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
                 
                    self.state = 991
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleDirectiveElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonOptionDirective(self):
            return self.getTypedRuleContext(vbaParser.CommonOptionDirectiveContext,0)


        def optionPrivateDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionPrivateDirectiveContext,0)


        def defDirective(self):
            return self.getTypedRuleContext(vbaParser.DefDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleDirectiveElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleDirectiveElement" ):
                listener.enterProceduralModuleDirectiveElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleDirectiveElement" ):
                listener.exitProceduralModuleDirectiveElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleDirectiveElement" ):
                return visitor.visitProceduralModuleDirectiveElement(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleDirectiveElement(self):

        localctx = vbaParser.ProceduralModuleDirectiveElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_proceduralModuleDirectiveElement)
        try:
            self.state = 997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 994
                self.commonOptionDirective()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 995
                self.optionPrivateDirective()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 996
                self.defDirective()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleDeclarationElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonModuleDeclarationElement(self):
            return self.getTypedRuleContext(vbaParser.CommonModuleDeclarationElementContext,0)


        def globalVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.GlobalVariableDeclarationContext,0)


        def publicConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PublicConstDeclarationContext,0)


        def publicTypeDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PublicTypeDeclarationContext,0)


        def publicExternalProcedureDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PublicExternalProcedureDeclarationContext,0)


        def globalEnumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.GlobalEnumDeclarationContext,0)


        def commonOptionDirective(self):
            return self.getTypedRuleContext(vbaParser.CommonOptionDirectiveContext,0)


        def optionPrivateDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionPrivateDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleDeclarationElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleDeclarationElement" ):
                listener.enterProceduralModuleDeclarationElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleDeclarationElement" ):
                listener.exitProceduralModuleDeclarationElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleDeclarationElement" ):
                return visitor.visitProceduralModuleDeclarationElement(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleDeclarationElement(self):

        localctx = vbaParser.ProceduralModuleDeclarationElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_proceduralModuleDeclarationElement)
        try:
            self.state = 1007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 999
                self.commonModuleDeclarationElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1000
                self.globalVariableDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1001
                self.publicConstDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1002
                self.publicTypeDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1003
                self.publicExternalProcedureDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1004
                self.globalEnumDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1005
                self.commonOptionDirective()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1006
                self.optionPrivateDirective()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleDirectiveElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonOptionDirective(self):
            return self.getTypedRuleContext(vbaParser.CommonOptionDirectiveContext,0)


        def defDirective(self):
            return self.getTypedRuleContext(vbaParser.DefDirectiveContext,0)


        def implementsDirective(self):
            return self.getTypedRuleContext(vbaParser.ImplementsDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleDirectiveElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleDirectiveElement" ):
                listener.enterClassModuleDirectiveElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleDirectiveElement" ):
                listener.exitClassModuleDirectiveElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleDirectiveElement" ):
                return visitor.visitClassModuleDirectiveElement(self)
            else:
                return visitor.visitChildren(self)




    def classModuleDirectiveElement(self):

        localctx = vbaParser.ClassModuleDirectiveElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_classModuleDirectiveElement)
        try:
            self.state = 1012
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [129, 260]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.commonOptionDirective()
                pass
            elif token in [49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1010
                self.defDirective()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1011
                self.implementsDirective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleDeclarationElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonModuleDeclarationElement(self):
            return self.getTypedRuleContext(vbaParser.CommonModuleDeclarationElementContext,0)


        def eventDeclaration(self):
            return self.getTypedRuleContext(vbaParser.EventDeclarationContext,0)


        def commonOptionDirective(self):
            return self.getTypedRuleContext(vbaParser.CommonOptionDirectiveContext,0)


        def implementsDirective(self):
            return self.getTypedRuleContext(vbaParser.ImplementsDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleDeclarationElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleDeclarationElement" ):
                listener.enterClassModuleDeclarationElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleDeclarationElement" ):
                listener.exitClassModuleDeclarationElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleDeclarationElement" ):
                return visitor.visitClassModuleDeclarationElement(self)
            else:
                return visitor.visitChildren(self)




    def classModuleDeclarationElement(self):

        localctx = vbaParser.ClassModuleDeclarationElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_classModuleDeclarationElement)
        try:
            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1014
                self.commonModuleDeclarationElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.eventDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1016
                self.commonOptionDirective()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1017
                self.implementsDirective()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonOptionDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionCompareDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionCompareDirectiveContext,0)


        def optionBaseDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionBaseDirectiveContext,0)


        def optionExplicitDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionExplicitDirectiveContext,0)


        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_commonOptionDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonOptionDirective" ):
                listener.enterCommonOptionDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonOptionDirective" ):
                listener.exitCommonOptionDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommonOptionDirective" ):
                return visitor.visitCommonOptionDirective(self)
            else:
                return visitor.visitChildren(self)




    def commonOptionDirective(self):

        localctx = vbaParser.CommonOptionDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_commonOptionDirective)
        try:
            self.state = 1024
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1020
                self.optionCompareDirective()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1021
                self.optionBaseDirective()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1022
                self.optionExplicitDirective()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1023
                self.remStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionCompareDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def COMPARE(self):
            return self.getToken(vbaParser.COMPARE, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def TEXT(self):
            return self.getToken(vbaParser.TEXT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_optionCompareDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionCompareDirective" ):
                listener.enterOptionCompareDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionCompareDirective" ):
                listener.exitOptionCompareDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionCompareDirective" ):
                return visitor.visitOptionCompareDirective(self)
            else:
                return visitor.visitChildren(self)




    def optionCompareDirective(self):

        localctx = vbaParser.OptionCompareDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_optionCompareDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.match(vbaParser.OPTION)
            self.state = 1027
            self.wsc()
            self.state = 1028
            self.match(vbaParser.COMPARE)
            self.state = 1029
            self.wsc()
            self.state = 1030
            _la = self._input.LA(1)
            if not(_la==13 or _la==165):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionBaseDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def BASE(self):
            return self.getToken(vbaParser.BASE, 0)

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_optionBaseDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionBaseDirective" ):
                listener.enterOptionBaseDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionBaseDirective" ):
                listener.exitOptionBaseDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionBaseDirective" ):
                return visitor.visitOptionBaseDirective(self)
            else:
                return visitor.visitChildren(self)




    def optionBaseDirective(self):

        localctx = vbaParser.OptionBaseDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_optionBaseDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(vbaParser.OPTION)
            self.state = 1033
            self.wsc()
            self.state = 1034
            self.match(vbaParser.BASE)
            self.state = 1035
            self.wsc()
            self.state = 1036
            self.match(vbaParser.INTEGERLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionExplicitDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def EXPLICIT(self):
            return self.getToken(vbaParser.EXPLICIT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_optionExplicitDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionExplicitDirective" ):
                listener.enterOptionExplicitDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionExplicitDirective" ):
                listener.exitOptionExplicitDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionExplicitDirective" ):
                return visitor.visitOptionExplicitDirective(self)
            else:
                return visitor.visitChildren(self)




    def optionExplicitDirective(self):

        localctx = vbaParser.OptionExplicitDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_optionExplicitDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(vbaParser.OPTION)
            self.state = 1039
            self.wsc()
            self.state = 1040
            self.match(vbaParser.EXPLICIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionPrivateDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def MODULE(self):
            return self.getToken(vbaParser.MODULE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_optionPrivateDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionPrivateDirective" ):
                listener.enterOptionPrivateDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionPrivateDirective" ):
                listener.exitOptionPrivateDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionPrivateDirective" ):
                return visitor.visitOptionPrivateDirective(self)
            else:
                return visitor.visitChildren(self)




    def optionPrivateDirective(self):

        localctx = vbaParser.OptionPrivateDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_optionPrivateDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(vbaParser.OPTION)
            self.state = 1043
            self.wsc()
            self.state = 1044
            self.match(vbaParser.PRIVATE)
            self.state = 1045
            self.wsc()
            self.state = 1046
            self.match(vbaParser.MODULE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defType(self):
            return self.getTypedRuleContext(vbaParser.DefTypeContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def letterSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.LetterSpecContext)
            else:
                return self.getTypedRuleContext(vbaParser.LetterSpecContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def getRuleIndex(self):
            return vbaParser.RULE_defDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefDirective" ):
                listener.enterDefDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefDirective" ):
                listener.exitDefDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefDirective" ):
                return visitor.visitDefDirective(self)
            else:
                return visitor.visitChildren(self)




    def defDirective(self):

        localctx = vbaParser.DefDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_defDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.defType()
            self.state = 1049
            self.match(vbaParser.WS)
            self.state = 1050
            self.letterSpec()
            self.state = 1057
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1051
                    self.match(vbaParser.WS)
                    self.state = 1052
                    self.match(vbaParser.COMMA)
                    self.state = 1053
                    self.match(vbaParser.WS)
                    self.state = 1054
                    self.letterSpec() 
                self.state = 1059
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetterSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleLetter(self):
            return self.getTypedRuleContext(vbaParser.SingleLetterContext,0)


        def universalLetterRange(self):
            return self.getTypedRuleContext(vbaParser.UniversalLetterRangeContext,0)


        def letterRange(self):
            return self.getTypedRuleContext(vbaParser.LetterRangeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_letterSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetterSpec" ):
                listener.enterLetterSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetterSpec" ):
                listener.exitLetterSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetterSpec" ):
                return visitor.visitLetterSpec(self)
            else:
                return visitor.visitChildren(self)




    def letterSpec(self):

        localctx = vbaParser.LetterSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_letterSpec)
        try:
            self.state = 1063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1060
                self.singleLetter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1061
                self.universalLetterRange()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1062
                self.letterRange()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleLetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_singleLetter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleLetter" ):
                listener.enterSingleLetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleLetter" ):
                listener.exitSingleLetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleLetter" ):
                return visitor.visitSingleLetter(self)
            else:
                return visitor.visitChildren(self)




    def singleLetter(self):

        localctx = vbaParser.SingleLetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_singleLetter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniversalLetterRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def upperCaseA(self):
            return self.getTypedRuleContext(vbaParser.UpperCaseAContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def upperCaseZ(self):
            return self.getTypedRuleContext(vbaParser.UpperCaseZContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_universalLetterRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniversalLetterRange" ):
                listener.enterUniversalLetterRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniversalLetterRange" ):
                listener.exitUniversalLetterRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniversalLetterRange" ):
                return visitor.visitUniversalLetterRange(self)
            else:
                return visitor.visitChildren(self)




    def universalLetterRange(self):

        localctx = vbaParser.UniversalLetterRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_universalLetterRange)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.upperCaseA()
            self.state = 1068
            self.match(vbaParser.WS)
            self.state = 1069
            self.match(vbaParser.MINUS)
            self.state = 1070
            self.match(vbaParser.WS)
            self.state = 1071
            self.upperCaseZ()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpperCaseAContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_upperCaseA

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpperCaseA" ):
                listener.enterUpperCaseA(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpperCaseA" ):
                listener.exitUpperCaseA(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpperCaseA" ):
                return visitor.visitUpperCaseA(self)
            else:
                return visitor.visitChildren(self)




    def upperCaseA(self):

        localctx = vbaParser.UpperCaseAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_upperCaseA)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpperCaseZContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_upperCaseZ

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpperCaseZ" ):
                listener.enterUpperCaseZ(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpperCaseZ" ):
                listener.exitUpperCaseZ(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpperCaseZ" ):
                return visitor.visitUpperCaseZ(self)
            else:
                return visitor.visitChildren(self)




    def upperCaseZ(self):

        localctx = vbaParser.UpperCaseZContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_upperCaseZ)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetterRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def firstLetter(self):
            return self.getTypedRuleContext(vbaParser.FirstLetterContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def lastLetter(self):
            return self.getTypedRuleContext(vbaParser.LastLetterContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_letterRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetterRange" ):
                listener.enterLetterRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetterRange" ):
                listener.exitLetterRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetterRange" ):
                return visitor.visitLetterRange(self)
            else:
                return visitor.visitChildren(self)




    def letterRange(self):

        localctx = vbaParser.LetterRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_letterRange)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.firstLetter()
            self.state = 1078
            self.match(vbaParser.WS)
            self.state = 1079
            self.match(vbaParser.MINUS)
            self.state = 1080
            self.match(vbaParser.WS)
            self.state = 1081
            self.lastLetter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FirstLetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_firstLetter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirstLetter" ):
                listener.enterFirstLetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirstLetter" ):
                listener.exitFirstLetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFirstLetter" ):
                return visitor.visitFirstLetter(self)
            else:
                return visitor.visitChildren(self)




    def firstLetter(self):

        localctx = vbaParser.FirstLetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_firstLetter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastLetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lastLetter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastLetter" ):
                listener.enterLastLetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastLetter" ):
                listener.exitLastLetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastLetter" ):
                return visitor.visitLastLetter(self)
            else:
                return visitor.visitChildren(self)




    def lastLetter(self):

        localctx = vbaParser.LastLetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_lastLetter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFBOOL(self):
            return self.getToken(vbaParser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(vbaParser.DEFBYTE, 0)

        def DEFCUR(self):
            return self.getToken(vbaParser.DEFCUR, 0)

        def DEFDATE(self):
            return self.getToken(vbaParser.DEFDATE, 0)

        def DEFDBL(self):
            return self.getToken(vbaParser.DEFDBL, 0)

        def DEFINT(self):
            return self.getToken(vbaParser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(vbaParser.DEFLNG, 0)

        def DEFLNGLNG(self):
            return self.getToken(vbaParser.DEFLNGLNG, 0)

        def DEFLNGPTR(self):
            return self.getToken(vbaParser.DEFLNGPTR, 0)

        def DEFOBJ(self):
            return self.getToken(vbaParser.DEFOBJ, 0)

        def DEFSNG(self):
            return self.getToken(vbaParser.DEFSNG, 0)

        def DEFSTR(self):
            return self.getToken(vbaParser.DEFSTR, 0)

        def DEFVAR(self):
            return self.getToken(vbaParser.DEFVAR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_defType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefType" ):
                listener.enterDefType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefType" ):
                listener.exitDefType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefType" ):
                return visitor.visitDefType(self)
            else:
                return visitor.visitChildren(self)




    def defType(self):

        localctx = vbaParser.DefTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_defType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 9204794688391872512) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonModuleDeclarationElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ModuleVariableDeclarationContext,0)


        def privateConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateConstDeclarationContext,0)


        def privateTypeDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateTypeDeclarationContext,0)


        def privateEnumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateEnumDeclarationContext,0)


        def publicEnumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PublicEnumDeclarationContext,0)


        def privateExternalProcedureDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateExternalProcedureDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_commonModuleDeclarationElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonModuleDeclarationElement" ):
                listener.enterCommonModuleDeclarationElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonModuleDeclarationElement" ):
                listener.exitCommonModuleDeclarationElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommonModuleDeclarationElement" ):
                return visitor.visitCommonModuleDeclarationElement(self)
            else:
                return visitor.visitChildren(self)




    def commonModuleDeclarationElement(self):

        localctx = vbaParser.CommonModuleDeclarationElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_commonModuleDeclarationElement)
        try:
            self.state = 1095
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1089
                self.moduleVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1090
                self.privateConstDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1091
                self.privateTypeDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1092
                self.privateEnumDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1093
                self.publicEnumDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1094
                self.privateExternalProcedureDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def publicVariableDecalation(self):
            return self.getTypedRuleContext(vbaParser.PublicVariableDecalationContext,0)


        def privateVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateVariableDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleVariableDeclaration" ):
                listener.enterModuleVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleVariableDeclaration" ):
                listener.exitModuleVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleVariableDeclaration" ):
                return visitor.visitModuleVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def moduleVariableDeclaration(self):

        localctx = vbaParser.ModuleVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_moduleVariableDeclaration)
        try:
            self.state = 1099
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1097
                self.publicVariableDecalation()
                pass
            elif token in [63, 136]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098
                self.privateVariableDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.VariableDeclarationListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_globalVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalVariableDeclaration" ):
                listener.enterGlobalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalVariableDeclaration" ):
                listener.exitGlobalVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalVariableDeclaration" ):
                return visitor.visitGlobalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def globalVariableDeclaration(self):

        localctx = vbaParser.GlobalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_globalVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(vbaParser.GLOBAL)
            self.state = 1102
            self.match(vbaParser.WS)
            self.state = 1103
            self.variableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicVariableDecalationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def moduleVariableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.ModuleVariableDeclarationListContext,0)


        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_publicVariableDecalation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicVariableDecalation" ):
                listener.enterPublicVariableDecalation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicVariableDecalation" ):
                listener.exitPublicVariableDecalation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicVariableDecalation" ):
                return visitor.visitPublicVariableDecalation(self)
            else:
                return visitor.visitChildren(self)




    def publicVariableDecalation(self):

        localctx = vbaParser.PublicVariableDecalationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_publicVariableDecalation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.match(vbaParser.PUBLIC)
            self.state = 1108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 1106
                self.match(vbaParser.WS)
                self.state = 1107
                self.match(vbaParser.SHARED)


            self.state = 1110
            self.match(vbaParser.WS)
            self.state = 1111
            self.moduleVariableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleVariableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.ModuleVariableDeclarationListContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_privateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateVariableDeclaration" ):
                listener.enterPrivateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateVariableDeclaration" ):
                listener.exitPrivateVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateVariableDeclaration" ):
                return visitor.visitPrivateVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateVariableDeclaration(self):

        localctx = vbaParser.PrivateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_privateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            _la = self._input.LA(1)
            if not(_la==63 or _la==136):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1114
            self.wsc()
            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 1116
                self.match(vbaParser.SHARED)
                self.state = 1117
                self.wsc()


            self.state = 1120
            self.moduleVariableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleVariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def witheventsVariableDcl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WitheventsVariableDclContext)
            else:
                return self.getTypedRuleContext(vbaParser.WitheventsVariableDclContext,i)


        def variableDcl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.VariableDclContext)
            else:
                return self.getTypedRuleContext(vbaParser.VariableDclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleVariableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleVariableDeclarationList" ):
                listener.enterModuleVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleVariableDeclarationList" ):
                listener.exitModuleVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleVariableDeclarationList" ):
                return visitor.visitModuleVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def moduleVariableDeclarationList(self):

        localctx = vbaParser.ModuleVariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_moduleVariableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [204]:
                self.state = 1122
                self.witheventsVariableDcl()
                pass
            elif token in [2, 4, 8, 11, 12, 13, 27, 28, 31, 32, 33, 38, 45, 76, 87, 99, 104, 106, 115, 116, 117, 118, 120, 126, 132, 137, 142, 144, 147, 160, 162, 165, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 267]:
                self.state = 1123
                self.variableDcl()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1139
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1127
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1126
                        self.wsc()


                    self.state = 1129
                    self.match(vbaParser.COMMA)
                    self.state = 1131
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1130
                        self.wsc()


                    self.state = 1135
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [204]:
                        self.state = 1133
                        self.witheventsVariableDcl()
                        pass
                    elif token in [2, 4, 8, 11, 12, 13, 27, 28, 31, 32, 33, 38, 45, 76, 87, 99, 104, 106, 115, 116, 117, 118, 120, 126, 132, 137, 142, 144, 147, 160, 162, 165, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 267]:
                        self.state = 1134
                        self.variableDcl()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1141
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDcl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.VariableDclContext)
            else:
                return self.getTypedRuleContext(vbaParser.VariableDclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationList" ):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationList(self):

        localctx = vbaParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.variableDcl()
            self.state = 1153
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1144
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1143
                        self.wsc()


                    self.state = 1146
                    self.match(vbaParser.COMMA)
                    self.state = 1148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1147
                        self.wsc()


                    self.state = 1150
                    self.variableDcl() 
                self.state = 1155
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedVariableDcl(self):
            return self.getTypedRuleContext(vbaParser.TypedVariableDclContext,0)


        def untypedVariableDcl(self):
            return self.getTypedRuleContext(vbaParser.UntypedVariableDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDcl" ):
                listener.enterVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDcl" ):
                listener.exitVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDcl" ):
                return visitor.visitVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def variableDcl(self):

        localctx = vbaParser.VariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_variableDcl)
        try:
            self.state = 1158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1156
                self.typedVariableDcl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1157
                self.untypedVariableDcl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def arrayDim(self):
            return self.getTypedRuleContext(vbaParser.ArrayDimContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typedVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedVariableDcl" ):
                listener.enterTypedVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedVariableDcl" ):
                listener.exitTypedVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedVariableDcl" ):
                return visitor.visitTypedVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def typedVariableDcl(self):

        localctx = vbaParser.TypedVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_typedVariableDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.typedName()
            self.state = 1162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 1161
                self.wsc()


            self.state = 1165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==236:
                self.state = 1164
                self.arrayDim()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def arrayClause(self):
            return self.getTypedRuleContext(vbaParser.ArrayClauseContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untypedVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedVariableDcl" ):
                listener.enterUntypedVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedVariableDcl" ):
                listener.exitUntypedVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedVariableDcl" ):
                return visitor.visitUntypedVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def untypedVariableDcl(self):

        localctx = vbaParser.UntypedVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_untypedVariableDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.ambiguousIdentifier()
            self.state = 1169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 1168
                self.wsc()


            self.state = 1173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [236]:
                self.state = 1171
                self.arrayClause()
                pass
            elif token in [10]:
                self.state = 1172
                self.asClause()
                pass
            elif token in [-1, 69, 82, 84, 86, 136, 137, 140, 159, 163, 227, 258, 259, 260, 261, 263, 265]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayDim(self):
            return self.getTypedRuleContext(vbaParser.ArrayDimContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_arrayClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayClause" ):
                listener.enterArrayClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayClause" ):
                listener.exitArrayClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayClause" ):
                return visitor.visitArrayClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayClause(self):

        localctx = vbaParser.ArrayClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_arrayClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.arrayDim()
            self.state = 1179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 1176
                self.wsc()
                self.state = 1177
                self.asClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asAutoObject(self):
            return self.getTypedRuleContext(vbaParser.AsAutoObjectContext,0)


        def asType(self):
            return self.getTypedRuleContext(vbaParser.AsTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_asClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsClause" ):
                listener.enterAsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsClause" ):
                listener.exitAsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsClause" ):
                return visitor.visitAsClause(self)
            else:
                return visitor.visitChildren(self)




    def asClause(self):

        localctx = vbaParser.AsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_asClause)
        try:
            self.state = 1183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1181
                self.asAutoObject()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1182
                self.asType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WitheventsVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHEVENTS(self):
            return self.getToken(vbaParser.WITHEVENTS, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def classTypeName(self):
            return self.getTypedRuleContext(vbaParser.ClassTypeNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_witheventsVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWitheventsVariableDcl" ):
                listener.enterWitheventsVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWitheventsVariableDcl" ):
                listener.exitWitheventsVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWitheventsVariableDcl" ):
                return visitor.visitWitheventsVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def witheventsVariableDcl(self):

        localctx = vbaParser.WitheventsVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_witheventsVariableDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.match(vbaParser.WITHEVENTS)
            self.state = 1186
            self.wsc()
            self.state = 1187
            self.ambiguousIdentifier()
            self.state = 1188
            self.wsc()
            self.state = 1189
            self.match(vbaParser.AS)
            self.state = 1191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 1190
                self.wsc()


            self.state = 1193
            self.classTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def definedTypeExpression(self):
            return self.getTypedRuleContext(vbaParser.DefinedTypeExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTypeName" ):
                listener.enterClassTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTypeName" ):
                listener.exitClassTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassTypeName" ):
                return visitor.visitClassTypeName(self)
            else:
                return visitor.visitChildren(self)




    def classTypeName(self):

        localctx = vbaParser.ClassTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_classTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self.definedTypeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDimContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def boundsList(self):
            return self.getTypedRuleContext(vbaParser.BoundsListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_arrayDim

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDim" ):
                listener.enterArrayDim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDim" ):
                listener.exitArrayDim(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDim" ):
                return visitor.visitArrayDim(self)
            else:
                return visitor.visitChildren(self)




    def arrayDim(self):

        localctx = vbaParser.ArrayDimContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_arrayDim)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.match(vbaParser.LPAREN)
            self.state = 1199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 1198
                self.wsc()


            self.state = 1202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 1201
                self.boundsList()


            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 1204
                self.wsc()


            self.state = 1207
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoundsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dimSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.DimSpecContext)
            else:
                return self.getTypedRuleContext(vbaParser.DimSpecContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_boundsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundsList" ):
                listener.enterBoundsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundsList" ):
                listener.exitBoundsList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoundsList" ):
                return visitor.visitBoundsList(self)
            else:
                return visitor.visitChildren(self)




    def boundsList(self):

        localctx = vbaParser.BoundsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_boundsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1209
            self.dimSpec()
            self.state = 1220
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1210
                        self.wsc()


                    self.state = 1213
                    self.match(vbaParser.COMMA)
                    self.state = 1215
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                    if la_ == 1:
                        self.state = 1214
                        self.wsc()


                    self.state = 1217
                    self.dimSpec() 
                self.state = 1222
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def upperBound(self):
            return self.getTypedRuleContext(vbaParser.UpperBoundContext,0)


        def lowerBound(self):
            return self.getTypedRuleContext(vbaParser.LowerBoundContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dimSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimSpec" ):
                listener.enterDimSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimSpec" ):
                listener.exitDimSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDimSpec" ):
                return visitor.visitDimSpec(self)
            else:
                return visitor.visitChildren(self)




    def dimSpec(self):

        localctx = vbaParser.DimSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_dimSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 1223
                self.lowerBound()


            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 1226
                self.wsc()


            self.state = 1229
            self.upperBound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LowerBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lowerBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLowerBound" ):
                listener.enterLowerBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLowerBound" ):
                listener.exitLowerBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLowerBound" ):
                return visitor.visitLowerBound(self)
            else:
                return visitor.visitChildren(self)




    def lowerBound(self):

        localctx = vbaParser.LowerBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_lowerBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.constantExpression()
            self.state = 1232
            self.wsc()
            self.state = 1233
            self.match(vbaParser.TO)
            self.state = 1234
            self.wsc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpperBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_upperBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpperBound" ):
                listener.enterUpperBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpperBound" ):
                listener.exitUpperBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpperBound" ):
                return visitor.visitUpperBound(self)
            else:
                return visitor.visitChildren(self)




    def upperBound(self):

        localctx = vbaParser.UpperBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_upperBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.constantExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsAutoObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def classTypeName(self):
            return self.getTypedRuleContext(vbaParser.ClassTypeNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_asAutoObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsAutoObject" ):
                listener.enterAsAutoObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsAutoObject" ):
                listener.exitAsAutoObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsAutoObject" ):
                return visitor.visitAsAutoObject(self)
            else:
                return visitor.visitChildren(self)




    def asAutoObject(self):

        localctx = vbaParser.AsAutoObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_asAutoObject)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.match(vbaParser.AS)
            self.state = 1239
            self.match(vbaParser.WS)
            self.state = 1240
            self.match(vbaParser.NEW)
            self.state = 1241
            self.match(vbaParser.WS)
            self.state = 1242
            self.classTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def typeSpec(self):
            return self.getTypedRuleContext(vbaParser.TypeSpecContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_asType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsType" ):
                listener.enterAsType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsType" ):
                listener.exitAsType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsType" ):
                return visitor.visitAsType(self)
            else:
                return visitor.visitChildren(self)




    def asType(self):

        localctx = vbaParser.AsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_asType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.match(vbaParser.AS)
            self.state = 1245
            self.match(vbaParser.WS)
            self.state = 1246
            self.typeSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixedLengthStringSpec(self):
            return self.getTypedRuleContext(vbaParser.FixedLengthStringSpecContext,0)


        def typeExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typeSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpec" ):
                listener.enterTypeSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpec" ):
                listener.exitTypeSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpec" ):
                return visitor.visitTypeSpec(self)
            else:
                return visitor.visitChildren(self)




    def typeSpec(self):

        localctx = vbaParser.TypeSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_typeSpec)
        try:
            self.state = 1250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1248
                self.fixedLengthStringSpec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1249
                self.typeExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FixedLengthStringSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def MULT(self):
            return self.getToken(vbaParser.MULT, 0)

        def stringLength(self):
            return self.getTypedRuleContext(vbaParser.StringLengthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_fixedLengthStringSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixedLengthStringSpec" ):
                listener.enterFixedLengthStringSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixedLengthStringSpec" ):
                listener.exitFixedLengthStringSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFixedLengthStringSpec" ):
                return visitor.visitFixedLengthStringSpec(self)
            else:
                return visitor.visitChildren(self)




    def fixedLengthStringSpec(self):

        localctx = vbaParser.FixedLengthStringSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_fixedLengthStringSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(vbaParser.STRING)
            self.state = 1253
            self.match(vbaParser.WS)
            self.state = 1254
            self.match(vbaParser.MULT)
            self.state = 1255
            self.match(vbaParser.WS)
            self.state = 1256
            self.stringLength()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def constantName(self):
            return self.getTypedRuleContext(vbaParser.ConstantNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_stringLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLength" ):
                listener.enterStringLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLength" ):
                listener.exitStringLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLength" ):
                return visitor.visitStringLength(self)
            else:
                return visitor.visitChildren(self)




    def stringLength(self):

        localctx = vbaParser.StringLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_stringLength)
        try:
            self.state = 1260
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [255]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1258
                self.match(vbaParser.INTEGERLITERAL)
                pass
            elif token in [1, 2, 4, 8, 9, 11, 12, 13, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 46, 65, 76, 81, 87, 94, 95, 96, 99, 100, 101, 102, 104, 106, 114, 115, 116, 117, 118, 120, 126, 132, 137, 138, 142, 144, 147, 151, 155, 160, 162, 165, 171, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 267]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1259
                self.constantName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constantName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantName" ):
                listener.enterConstantName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantName" ):
                listener.exitConstantName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantName" ):
                return visitor.visitConstantName(self)
            else:
                return visitor.visitChildren(self)




    def constantName(self):

        localctx = vbaParser.ConstantNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_constantName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self.simpleNameExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def moduleConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ModuleConstDeclarationContext,0)


        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_publicConstDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicConstDeclaration" ):
                listener.enterPublicConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicConstDeclaration" ):
                listener.exitPublicConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicConstDeclaration" ):
                return visitor.visitPublicConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def publicConstDeclaration(self):

        localctx = vbaParser.PublicConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_publicConstDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            _la = self._input.LA(1)
            if not(_la==86 or _la==140):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1265
            self.wsc()
            self.state = 1266
            self.moduleConstDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ModuleConstDeclarationContext,0)


        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_privateConstDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateConstDeclaration" ):
                listener.enterPrivateConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateConstDeclaration" ):
                listener.exitPrivateConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateConstDeclaration" ):
                return visitor.visitPrivateConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateConstDeclaration(self):

        localctx = vbaParser.PrivateConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_privateConstDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1268
                self.match(vbaParser.PRIVATE)
                self.state = 1269
                self.wsc()


            self.state = 1272
            self.moduleConstDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ConstDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleConstDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleConstDeclaration" ):
                listener.enterModuleConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleConstDeclaration" ):
                listener.exitModuleConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleConstDeclaration" ):
                return visitor.visitModuleConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def moduleConstDeclaration(self):

        localctx = vbaParser.ModuleConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_moduleConstDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.constDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(vbaParser.CONST, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def constItemList(self):
            return self.getTypedRuleContext(vbaParser.ConstItemListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclaration" ):
                listener.enterConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclaration" ):
                listener.exitConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDeclaration" ):
                return visitor.visitConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constDeclaration(self):

        localctx = vbaParser.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_constDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self.match(vbaParser.CONST)
            self.state = 1277
            self.wsc()
            self.state = 1278
            self.constItemList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ConstItemContext)
            else:
                return self.getTypedRuleContext(vbaParser.ConstItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_constItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstItemList" ):
                listener.enterConstItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstItemList" ):
                listener.exitConstItemList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstItemList" ):
                return visitor.visitConstItemList(self)
            else:
                return visitor.visitChildren(self)




    def constItemList(self):

        localctx = vbaParser.ConstItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_constItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.constItem()
            self.state = 1291
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1281
                        self.wsc()


                    self.state = 1284
                    self.match(vbaParser.COMMA)
                    self.state = 1286
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1285
                        self.wsc()


                    self.state = 1288
                    self.constItem() 
                self.state = 1293
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameConstItem(self):
            return self.getTypedRuleContext(vbaParser.TypedNameConstItemContext,0)


        def untypedNameConstItem(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameConstItemContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstItem" ):
                listener.enterConstItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstItem" ):
                listener.exitConstItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstItem" ):
                return visitor.visitConstItem(self)
            else:
                return visitor.visitChildren(self)




    def constItem(self):

        localctx = vbaParser.ConstItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_constItem)
        try:
            self.state = 1296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1294
                self.typedNameConstItem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1295
                self.untypedNameConstItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedNameConstItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_typedNameConstItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedNameConstItem" ):
                listener.enterTypedNameConstItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedNameConstItem" ):
                listener.exitTypedNameConstItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedNameConstItem" ):
                return visitor.visitTypedNameConstItem(self)
            else:
                return visitor.visitChildren(self)




    def typedNameConstItem(self):

        localctx = vbaParser.TypedNameConstItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_typedNameConstItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.typedName()
            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 1299
                self.wsc()


            self.state = 1302
            self.match(vbaParser.EQ)
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 1303
                self.wsc()


            self.state = 1306
            self.constantExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedNameConstItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def constAsClause(self):
            return self.getTypedRuleContext(vbaParser.ConstAsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untypedNameConstItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedNameConstItem" ):
                listener.enterUntypedNameConstItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedNameConstItem" ):
                listener.exitUntypedNameConstItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedNameConstItem" ):
                return visitor.visitUntypedNameConstItem(self)
            else:
                return visitor.visitChildren(self)




    def untypedNameConstItem(self):

        localctx = vbaParser.UntypedNameConstItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_untypedNameConstItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1308
            self.ambiguousIdentifier()
            self.state = 1312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 1309
                self.wsc()
                self.state = 1310
                self.constAsClause()


            self.state = 1315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 1314
                self.wsc()


            self.state = 1317
            self.match(vbaParser.EQ)
            self.state = 1319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 1318
                self.wsc()


            self.state = 1321
            self.constantExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstAsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def builtinType(self):
            return self.getTypedRuleContext(vbaParser.BuiltinTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constAsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstAsClause" ):
                listener.enterConstAsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstAsClause" ):
                listener.exitConstAsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstAsClause" ):
                return visitor.visitConstAsClause(self)
            else:
                return visitor.visitChildren(self)




    def constAsClause(self):

        localctx = vbaParser.ConstAsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_constAsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.match(vbaParser.AS)
            self.state = 1324
            self.wsc()
            self.state = 1325
            self.builtinType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def udtDeclaration(self):
            return self.getTypedRuleContext(vbaParser.UdtDeclarationContext,0)


        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_publicTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicTypeDeclaration" ):
                listener.enterPublicTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicTypeDeclaration" ):
                listener.exitPublicTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicTypeDeclaration" ):
                return visitor.visitPublicTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def publicTypeDeclaration(self):

        localctx = vbaParser.PublicTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_publicTypeDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            _la = self._input.LA(1)
            if not(_la==86 or _la==140):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1328
            self.wsc()
            self.state = 1329
            self.udtDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def udtDeclaration(self):
            return self.getTypedRuleContext(vbaParser.UdtDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_privateTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateTypeDeclaration" ):
                listener.enterPrivateTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateTypeDeclaration" ):
                listener.exitPrivateTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateTypeDeclaration" ):
                return visitor.visitPrivateTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateTypeDeclaration(self):

        localctx = vbaParser.PrivateTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_privateTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            self.match(vbaParser.PRIVATE)
            self.state = 1332
            self.wsc()
            self.state = 1333
            self.udtDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdtDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.TYPE)
            else:
                return self.getToken(vbaParser.TYPE, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def udtMemberList(self):
            return self.getTypedRuleContext(vbaParser.UdtMemberListContext,0)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_udtDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdtDeclaration" ):
                listener.enterUdtDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdtDeclaration" ):
                listener.exitUdtDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdtDeclaration" ):
                return visitor.visitUdtDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def udtDeclaration(self):

        localctx = vbaParser.UdtDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_udtDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            self.match(vbaParser.TYPE)
            self.state = 1336
            self.wsc()
            self.state = 1337
            self.untypedName()
            self.state = 1339 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1338
                    self.endOfStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 1341 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

            self.state = 1343
            self.udtMemberList()
            self.state = 1345 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1344
                self.endOfStatement()
                self.state = 1347 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 1349
            self.match(vbaParser.END)
            self.state = 1350
            self.wsc()
            self.state = 1351
            self.match(vbaParser.TYPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdtMemberListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def udtElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.UdtElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.UdtElementContext,i)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_udtMemberList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdtMemberList" ):
                listener.enterUdtMemberList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdtMemberList" ):
                listener.exitUdtMemberList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdtMemberList" ):
                return visitor.visitUdtMemberList(self)
            else:
                return visitor.visitChildren(self)




    def udtMemberList(self):

        localctx = vbaParser.UdtMemberListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_udtMemberList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            self.udtElement()
            self.state = 1359
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1354
                    self.endOfStatement()
                    self.state = 1355
                    self.udtElement() 
                self.state = 1361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdtElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def udtMember(self):
            return self.getTypedRuleContext(vbaParser.UdtMemberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_udtElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdtElement" ):
                listener.enterUdtElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdtElement" ):
                listener.exitUdtElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdtElement" ):
                return visitor.visitUdtElement(self)
            else:
                return visitor.visitChildren(self)




    def udtElement(self):

        localctx = vbaParser.UdtElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_udtElement)
        try:
            self.state = 1364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [260]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1362
                self.remStatement()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 267]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1363
                self.udtMember()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdtMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedNameMemberDcl(self):
            return self.getTypedRuleContext(vbaParser.ReservedNameMemberDclContext,0)


        def untypedNameMemberDcl(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameMemberDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_udtMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdtMember" ):
                listener.enterUdtMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdtMember" ):
                listener.exitUdtMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdtMember" ):
                return visitor.visitUdtMember(self)
            else:
                return visitor.visitChildren(self)




    def udtMember(self):

        localctx = vbaParser.UdtMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_udtMember)
        try:
            self.state = 1368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 5, 6, 7, 9, 10, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 105, 107, 108, 112, 113, 114, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 140, 141, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 203, 204, 205, 206]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1366
                self.reservedNameMemberDcl()
                pass
            elif token in [2, 4, 8, 11, 12, 13, 27, 28, 31, 32, 33, 38, 76, 87, 99, 104, 106, 115, 116, 117, 118, 120, 126, 132, 137, 142, 144, 147, 160, 165, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 267]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1367
                self.untypedNameMemberDcl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedNameMemberDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def optionalArrayClause(self):
            return self.getTypedRuleContext(vbaParser.OptionalArrayClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untypedNameMemberDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedNameMemberDcl" ):
                listener.enterUntypedNameMemberDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedNameMemberDcl" ):
                listener.exitUntypedNameMemberDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedNameMemberDcl" ):
                return visitor.visitUntypedNameMemberDcl(self)
            else:
                return visitor.visitChildren(self)




    def untypedNameMemberDcl(self):

        localctx = vbaParser.UntypedNameMemberDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_untypedNameMemberDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1370
            self.ambiguousIdentifier()
            self.state = 1371
            self.optionalArrayClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedNameMemberDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedMemberName(self):
            return self.getTypedRuleContext(vbaParser.ReservedMemberNameContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_reservedNameMemberDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedNameMemberDcl" ):
                listener.enterReservedNameMemberDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedNameMemberDcl" ):
                listener.exitReservedNameMemberDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedNameMemberDcl" ):
                return visitor.visitReservedNameMemberDcl(self)
            else:
                return visitor.visitChildren(self)




    def reservedNameMemberDcl(self):

        localctx = vbaParser.ReservedNameMemberDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_reservedNameMemberDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1373
            self.reservedMemberName()
            self.state = 1374
            self.wsc()
            self.state = 1375
            self.asClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalArrayClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def arrayDim(self):
            return self.getTypedRuleContext(vbaParser.ArrayDimContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_optionalArrayClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalArrayClause" ):
                listener.enterOptionalArrayClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalArrayClause" ):
                listener.exitOptionalArrayClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalArrayClause" ):
                return visitor.visitOptionalArrayClause(self)
            else:
                return visitor.visitChildren(self)




    def optionalArrayClause(self):

        localctx = vbaParser.OptionalArrayClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_optionalArrayClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==236:
                self.state = 1377
                self.arrayDim()


            self.state = 1380
            self.wsc()
            self.state = 1381
            self.asClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedMemberNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementKeyword(self):
            return self.getTypedRuleContext(vbaParser.StatementKeywordContext,0)


        def markerKeyword(self):
            return self.getTypedRuleContext(vbaParser.MarkerKeywordContext,0)


        def operatorIdentifier(self):
            return self.getTypedRuleContext(vbaParser.OperatorIdentifierContext,0)


        def specialForm(self):
            return self.getTypedRuleContext(vbaParser.SpecialFormContext,0)


        def reservedName(self):
            return self.getTypedRuleContext(vbaParser.ReservedNameContext,0)


        def literalIdentifier(self):
            return self.getTypedRuleContext(vbaParser.LiteralIdentifierContext,0)


        def reservedForImplementationUse(self):
            return self.getTypedRuleContext(vbaParser.ReservedForImplementationUseContext,0)


        def futureReserved(self):
            return self.getTypedRuleContext(vbaParser.FutureReservedContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_reservedMemberName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedMemberName" ):
                listener.enterReservedMemberName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedMemberName" ):
                listener.exitReservedMemberName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedMemberName" ):
                return visitor.visitReservedMemberName(self)
            else:
                return visitor.visitChildren(self)




    def reservedMemberName(self):

        localctx = vbaParser.ReservedMemberNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_reservedMemberName)
        try:
            self.state = 1391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1383
                self.statementKeyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1384
                self.markerKeyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1385
                self.operatorIdentifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1386
                self.specialForm()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1387
                self.reservedName()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1388
                self.literalIdentifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1389
                self.reservedForImplementationUse()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1390
                self.futureReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalEnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_globalEnumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalEnumDeclaration" ):
                listener.enterGlobalEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalEnumDeclaration" ):
                listener.exitGlobalEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalEnumDeclaration" ):
                return visitor.visitGlobalEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def globalEnumDeclaration(self):

        localctx = vbaParser.GlobalEnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_globalEnumDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            self.match(vbaParser.GLOBAL)
            self.state = 1394
            self.wsc()
            self.state = 1395
            self.enumDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicEnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.EnumDeclarationContext,0)


        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_publicEnumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicEnumDeclaration" ):
                listener.enterPublicEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicEnumDeclaration" ):
                listener.exitPublicEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicEnumDeclaration" ):
                return visitor.visitPublicEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def publicEnumDeclaration(self):

        localctx = vbaParser.PublicEnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_publicEnumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 1397
                self.match(vbaParser.PUBLIC)
                self.state = 1398
                self.wsc()


            self.state = 1401
            self.enumDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateEnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_privateEnumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateEnumDeclaration" ):
                listener.enterPrivateEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateEnumDeclaration" ):
                listener.exitPrivateEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateEnumDeclaration" ):
                return visitor.visitPrivateEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateEnumDeclaration(self):

        localctx = vbaParser.PrivateEnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_privateEnumDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1403
            self.match(vbaParser.PRIVATE)
            self.state = 1404
            self.wsc()
            self.state = 1405
            self.enumDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.ENUM)
            else:
                return self.getToken(vbaParser.ENUM, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def enumMemberList(self):
            return self.getTypedRuleContext(vbaParser.EnumMemberListContext,0)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDeclaration" ):
                return visitor.visitEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def enumDeclaration(self):

        localctx = vbaParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1407
            self.match(vbaParser.ENUM)
            self.state = 1408
            self.wsc()
            self.state = 1409
            self.untypedName()
            self.state = 1411 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1410
                    self.endOfStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 1413 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

            self.state = 1415
            self.enumMemberList()
            self.state = 1417 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1416
                self.endOfStatement()
                self.state = 1419 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 1421
            self.match(vbaParser.END)
            self.state = 1422
            self.wsc()
            self.state = 1423
            self.match(vbaParser.ENUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumMemberListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EnumElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EnumElementContext,i)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_enumMemberList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumMemberList" ):
                listener.enterEnumMemberList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumMemberList" ):
                listener.exitEnumMemberList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumMemberList" ):
                return visitor.visitEnumMemberList(self)
            else:
                return visitor.visitChildren(self)




    def enumMemberList(self):

        localctx = vbaParser.EnumMemberListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_enumMemberList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.enumElement()
            self.state = 1431
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1426
                    self.endOfStatement()
                    self.state = 1427
                    self.enumElement() 
                self.state = 1433
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def enumMember(self):
            return self.getTypedRuleContext(vbaParser.EnumMemberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_enumElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumElement" ):
                listener.enterEnumElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumElement" ):
                listener.exitEnumElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumElement" ):
                return visitor.visitEnumElement(self)
            else:
                return visitor.visitChildren(self)




    def enumElement(self):

        localctx = vbaParser.EnumElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_enumElement)
        try:
            self.state = 1436
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [260]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1434
                self.remStatement()
                pass
            elif token in [2, 4, 8, 11, 12, 13, 27, 28, 31, 32, 33, 38, 76, 87, 99, 104, 106, 115, 116, 117, 118, 120, 126, 132, 137, 142, 144, 147, 160, 165, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 267]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1435
                self.enumMember()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_enumMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumMember" ):
                listener.enterEnumMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumMember" ):
                listener.exitEnumMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumMember" ):
                return visitor.visitEnumMember(self)
            else:
                return visitor.visitChildren(self)




    def enumMember(self):

        localctx = vbaParser.EnumMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_enumMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self.untypedName()
            self.state = 1447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 1439
                    self.wsc()


                self.state = 1442
                self.match(vbaParser.EQ)
                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 1443
                    self.wsc()


                self.state = 1446
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicExternalProcedureDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalProcDcl(self):
            return self.getTypedRuleContext(vbaParser.ExternalProcDclContext,0)


        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_publicExternalProcedureDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicExternalProcedureDeclaration" ):
                listener.enterPublicExternalProcedureDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicExternalProcedureDeclaration" ):
                listener.exitPublicExternalProcedureDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicExternalProcedureDeclaration" ):
                return visitor.visitPublicExternalProcedureDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def publicExternalProcedureDeclaration(self):

        localctx = vbaParser.PublicExternalProcedureDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_publicExternalProcedureDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 1449
                self.match(vbaParser.PUBLIC)
                self.state = 1450
                self.wsc()


            self.state = 1453
            self.externalProcDcl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateExternalProcedureDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def externalProcDcl(self):
            return self.getTypedRuleContext(vbaParser.ExternalProcDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_privateExternalProcedureDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateExternalProcedureDeclaration" ):
                listener.enterPrivateExternalProcedureDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateExternalProcedureDeclaration" ):
                listener.exitPrivateExternalProcedureDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateExternalProcedureDeclaration" ):
                return visitor.visitPrivateExternalProcedureDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateExternalProcedureDeclaration(self):

        localctx = vbaParser.PrivateExternalProcedureDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_privateExternalProcedureDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.match(vbaParser.PRIVATE)
            self.state = 1456
            self.wsc()
            self.state = 1457
            self.externalProcDcl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalProcDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(vbaParser.DECLARE, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def externalSub(self):
            return self.getTypedRuleContext(vbaParser.ExternalSubContext,0)


        def externalFunction(self):
            return self.getTypedRuleContext(vbaParser.ExternalFunctionContext,0)


        def PTRSAFE(self):
            return self.getToken(vbaParser.PTRSAFE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_externalProcDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalProcDcl" ):
                listener.enterExternalProcDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalProcDcl" ):
                listener.exitExternalProcDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalProcDcl" ):
                return visitor.visitExternalProcDcl(self)
            else:
                return visitor.visitChildren(self)




    def externalProcDcl(self):

        localctx = vbaParser.ExternalProcDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_externalProcDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.match(vbaParser.DECLARE)
            self.state = 1460
            self.wsc()
            self.state = 1463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 1461
                self.match(vbaParser.PTRSAFE)
                self.state = 1462
                self.wsc()


            self.state = 1467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [163]:
                self.state = 1465
                self.externalSub()
                pass
            elif token in [84]:
                self.state = 1466
                self.externalFunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalSubContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def subroutineName(self):
            return self.getTypedRuleContext(vbaParser.SubroutineNameContext,0)


        def libInfo(self):
            return self.getTypedRuleContext(vbaParser.LibInfoContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_externalSub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalSub" ):
                listener.enterExternalSub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalSub" ):
                listener.exitExternalSub(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalSub" ):
                return visitor.visitExternalSub(self)
            else:
                return visitor.visitChildren(self)




    def externalSub(self):

        localctx = vbaParser.ExternalSubContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_externalSub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1469
            self.match(vbaParser.SUB)
            self.state = 1470
            self.wsc()
            self.state = 1471
            self.subroutineName()
            self.state = 1472
            self.wsc()
            self.state = 1473
            self.libInfo()
            self.state = 1477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1474
                self.wsc()
                self.state = 1475
                self.procedureParameters()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def functionName(self):
            return self.getTypedRuleContext(vbaParser.FunctionNameContext,0)


        def libInfo(self):
            return self.getTypedRuleContext(vbaParser.LibInfoContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def functionType(self):
            return self.getTypedRuleContext(vbaParser.FunctionTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_externalFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalFunction" ):
                listener.enterExternalFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalFunction" ):
                listener.exitExternalFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalFunction" ):
                return visitor.visitExternalFunction(self)
            else:
                return visitor.visitChildren(self)




    def externalFunction(self):

        localctx = vbaParser.ExternalFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_externalFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self.match(vbaParser.FUNCTION)
            self.state = 1480
            self.wsc()
            self.state = 1481
            self.functionName()
            self.state = 1482
            self.wsc()
            self.state = 1483
            self.libInfo()
            self.state = 1487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1484
                self.wsc()
                self.state = 1485
                self.procedureParameters()


            self.state = 1492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1489
                self.wsc()
                self.state = 1490
                self.functionType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def libClause(self):
            return self.getTypedRuleContext(vbaParser.LibClauseContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def aliasClause(self):
            return self.getTypedRuleContext(vbaParser.AliasClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_libInfo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibInfo" ):
                listener.enterLibInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibInfo" ):
                listener.exitLibInfo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibInfo" ):
                return visitor.visitLibInfo(self)
            else:
                return visitor.visitChildren(self)




    def libInfo(self):

        localctx = vbaParser.LibInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_libInfo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            self.libClause()
            self.state = 1498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1495
                self.wsc()
                self.state = 1496
                self.aliasClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIB(self):
            return self.getToken(vbaParser.LIB, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_libClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibClause" ):
                listener.enterLibClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibClause" ):
                listener.exitLibClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibClause" ):
                return visitor.visitLibClause(self)
            else:
                return visitor.visitChildren(self)




    def libClause(self):

        localctx = vbaParser.LibClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_libClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1500
            self.match(vbaParser.LIB)
            self.state = 1501
            self.wsc()
            self.state = 1502
            self.match(vbaParser.STRINGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(vbaParser.ALIAS, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_aliasClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasClause" ):
                listener.enterAliasClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasClause" ):
                listener.exitAliasClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasClause" ):
                return visitor.visitAliasClause(self)
            else:
                return visitor.visitChildren(self)




    def aliasClause(self):

        localctx = vbaParser.AliasClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_aliasClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self.match(vbaParser.ALIAS)
            self.state = 1505
            self.wsc()
            self.state = 1506
            self.match(vbaParser.STRINGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementsDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLEMENTS(self):
            return self.getToken(vbaParser.IMPLEMENTS, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implementsDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementsDirective" ):
                listener.enterImplementsDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementsDirective" ):
                listener.exitImplementsDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplementsDirective" ):
                return visitor.visitImplementsDirective(self)
            else:
                return visitor.visitChildren(self)




    def implementsDirective(self):

        localctx = vbaParser.ImplementsDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_implementsDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1508
            self.match(vbaParser.IMPLEMENTS)
            self.state = 1509
            self.match(vbaParser.WS)
            self.state = 1510
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def EVENT(self):
            return self.getToken(vbaParser.EVENT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def eventParameterList(self):
            return self.getTypedRuleContext(vbaParser.EventParameterListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDeclaration" ):
                listener.enterEventDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDeclaration" ):
                listener.exitEventDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventDeclaration" ):
                return visitor.visitEventDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def eventDeclaration(self):

        localctx = vbaParser.EventDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_eventDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 1512
                self.match(vbaParser.PUBLIC)


            self.state = 1515
            self.wsc()
            self.state = 1516
            self.match(vbaParser.EVENT)
            self.state = 1517
            self.wsc()
            self.state = 1518
            self.ambiguousIdentifier()
            self.state = 1520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==236:
                self.state = 1519
                self.eventParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def positionalParameters(self):
            return self.getTypedRuleContext(vbaParser.PositionalParametersContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameterList" ):
                return visitor.visitEventParameterList(self)
            else:
                return visitor.visitChildren(self)




    def eventParameterList(self):

        localctx = vbaParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.match(vbaParser.LPAREN)
            self.state = 1524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1523
                self.wsc()


            self.state = 1527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35474685147412) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 2379052343032285185) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 1297036692692402213) != 0) or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & 1152921504606978047) != 0):
                self.state = 1526
                self.positionalParameters()


            self.state = 1530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 1529
                self.wsc()


            self.state = 1532
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleCodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModuleCodeElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ProceduralModuleCodeElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ProceduralModuleCodeElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleCode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleCode" ):
                listener.enterProceduralModuleCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleCode" ):
                listener.exitProceduralModuleCode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleCode" ):
                return visitor.visitProceduralModuleCode(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleCode(self):

        localctx = vbaParser.ProceduralModuleCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_proceduralModuleCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1534
                    self.proceduralModuleCodeElement()
                    self.state = 1538
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1535
                            self.endOfLine() 
                        self.state = 1540
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
             
                self.state = 1545
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleCodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModuleCodeElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ClassModuleCodeElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ClassModuleCodeElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleCode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleCode" ):
                listener.enterClassModuleCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleCode" ):
                listener.exitClassModuleCode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleCode" ):
                return visitor.visitClassModuleCode(self)
            else:
                return visitor.visitChildren(self)




    def classModuleCode(self):

        localctx = vbaParser.ClassModuleCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_classModuleCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1546
                    self.classModuleCodeElement()
                    self.state = 1550
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1547
                            self.endOfLine() 
                        self.state = 1552
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
             
                self.state = 1557
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleCodeElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonModuleCodeElement(self):
            return self.getTypedRuleContext(vbaParser.CommonModuleCodeElementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleCodeElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleCodeElement" ):
                listener.enterProceduralModuleCodeElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleCodeElement" ):
                listener.exitProceduralModuleCodeElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleCodeElement" ):
                return visitor.visitProceduralModuleCodeElement(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleCodeElement(self):

        localctx = vbaParser.ProceduralModuleCodeElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_proceduralModuleCodeElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1558
            self.commonModuleCodeElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleCodeElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonModuleCodeElement(self):
            return self.getTypedRuleContext(vbaParser.CommonModuleCodeElementContext,0)


        def implementsDirective(self):
            return self.getTypedRuleContext(vbaParser.ImplementsDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleCodeElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleCodeElement" ):
                listener.enterClassModuleCodeElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleCodeElement" ):
                listener.exitClassModuleCodeElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleCodeElement" ):
                return visitor.visitClassModuleCodeElement(self)
            else:
                return visitor.visitChildren(self)




    def classModuleCodeElement(self):

        localctx = vbaParser.ClassModuleCodeElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_classModuleCodeElement)
        try:
            self.state = 1562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82, 84, 86, 136, 137, 140, 159, 163, 260]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1560
                self.commonModuleCodeElement()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1561
                self.implementsDirective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonModuleCodeElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def procedureDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ProcedureDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_commonModuleCodeElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonModuleCodeElement" ):
                listener.enterCommonModuleCodeElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonModuleCodeElement" ):
                listener.exitCommonModuleCodeElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommonModuleCodeElement" ):
                return visitor.visitCommonModuleCodeElement(self)
            else:
                return visitor.visitChildren(self)




    def commonModuleCodeElement(self):

        localctx = vbaParser.CommonModuleCodeElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_commonModuleCodeElement)
        try:
            self.state = 1566
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [260]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1564
                self.remStatement()
                pass
            elif token in [82, 84, 86, 136, 137, 140, 159, 163]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1565
                self.procedureDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subroutineDeclaration(self):
            return self.getTypedRuleContext(vbaParser.SubroutineDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(vbaParser.FunctionDeclarationContext,0)


        def propertyGetDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PropertyGetDeclarationContext,0)


        def propertyLhsDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PropertyLhsDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_procedureDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDeclaration" ):
                listener.enterProcedureDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDeclaration" ):
                listener.exitProcedureDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureDeclaration" ):
                return visitor.visitProcedureDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def procedureDeclaration(self):

        localctx = vbaParser.ProcedureDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_procedureDeclaration)
        try:
            self.state = 1572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1568
                self.subroutineDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1569
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1570
                self.propertyGetDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1571
                self.propertyLhsDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubroutineDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def SUB(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.SUB)
            else:
                return self.getToken(vbaParser.SUB, i)

        def procedureTail(self):
            return self.getTypedRuleContext(vbaParser.ProcedureTailContext,0)


        def procedureScope(self):
            return self.getTypedRuleContext(vbaParser.ProcedureScopeContext,0)


        def procedureBody(self):
            return self.getTypedRuleContext(vbaParser.ProcedureBodyContext,0)


        def endLabel(self):
            return self.getTypedRuleContext(vbaParser.EndLabelContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def subroutineName(self):
            return self.getTypedRuleContext(vbaParser.SubroutineNameContext,0)


        def trailingStatic(self):
            return self.getTypedRuleContext(vbaParser.TrailingStaticContext,0)


        def initialStatic(self):
            return self.getTypedRuleContext(vbaParser.InitialStaticContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_subroutineDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutineDeclaration" ):
                listener.enterSubroutineDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutineDeclaration" ):
                listener.exitSubroutineDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubroutineDeclaration" ):
                return visitor.visitSubroutineDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def subroutineDeclaration(self):

        localctx = vbaParser.SubroutineDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_subroutineDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 306244774661193745) != 0):
                self.state = 1574
                self.procedureScope()
                self.state = 1575
                self.wsc()


            self.state = 1607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 1579
                    self.initialStatic()
                    self.state = 1580
                    self.wsc()


                self.state = 1584
                self.match(vbaParser.SUB)
                self.state = 1585
                self.wsc()
                self.state = 1586
                self.subroutineName()

                self.state = 1588
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                if la_ == 1:
                    self.state = 1587
                    self.wsc()


                self.state = 1591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==236:
                    self.state = 1590
                    self.procedureParameters()


                pass

            elif la_ == 2:
                self.state = 1593
                self.match(vbaParser.SUB)
                self.state = 1594
                self.wsc()
                self.state = 1595
                self.subroutineName()
                self.state = 1600
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1597
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1596
                        self.wsc()


                    self.state = 1599
                    self.procedureParameters()


                self.state = 1603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 1602
                    self.wsc()


                self.state = 1605
                self.trailingStatic()
                pass


            self.state = 1610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1609
                self.procedureBody()


            self.state = 1613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.state = 1612
                self.endLabel()


            self.state = 1616 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1615
                self.endOfStatement()
                self.state = 1618 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 1620
            self.match(vbaParser.END)
            self.state = 1621
            self.wsc()
            self.state = 1622
            self.match(vbaParser.SUB)
            self.state = 1623
            self.procedureTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def FUNCTION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.FUNCTION)
            else:
                return self.getToken(vbaParser.FUNCTION, i)

        def procedureTail(self):
            return self.getTypedRuleContext(vbaParser.ProcedureTailContext,0)


        def functionName(self):
            return self.getTypedRuleContext(vbaParser.FunctionNameContext,0)


        def trailingStatic(self):
            return self.getTypedRuleContext(vbaParser.TrailingStaticContext,0)


        def procedureScope(self):
            return self.getTypedRuleContext(vbaParser.ProcedureScopeContext,0)


        def procedureBody(self):
            return self.getTypedRuleContext(vbaParser.ProcedureBodyContext,0)


        def endLabel(self):
            return self.getTypedRuleContext(vbaParser.EndLabelContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def initialStatic(self):
            return self.getTypedRuleContext(vbaParser.InitialStaticContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def functionType(self):
            return self.getTypedRuleContext(vbaParser.FunctionTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDeclaration" ):
                return visitor.visitFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclaration(self):

        localctx = vbaParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 306244774661193745) != 0):
                self.state = 1625
                self.procedureScope()
                self.state = 1626
                self.wsc()


            self.state = 1670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 1630
                    self.initialStatic()
                    self.state = 1631
                    self.wsc()


                self.state = 1635
                self.match(vbaParser.FUNCTION)
                self.state = 1636
                self.wsc()
                self.state = 1637
                self.functionName()
                self.state = 1642
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1638
                        self.wsc()


                    self.state = 1641
                    self.procedureParameters()


                self.state = 1648
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                if la_ == 1:
                    self.state = 1645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1644
                        self.wsc()


                    self.state = 1647
                    self.functionType()


                pass

            elif la_ == 2:
                self.state = 1650
                self.match(vbaParser.FUNCTION)
                self.state = 1651
                self.wsc()
                self.state = 1652
                self.functionName()
                self.state = 1657
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1653
                        self.wsc()


                    self.state = 1656
                    self.procedureParameters()


                self.state = 1663
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 1660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1659
                        self.wsc()


                    self.state = 1662
                    self.functionType()


                self.state = 1666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 1665
                    self.wsc()


                self.state = 1668
                self.trailingStatic()
                pass


            self.state = 1673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1672
                self.procedureBody()


            self.state = 1676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1675
                self.endLabel()


            self.state = 1679 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1678
                self.endOfStatement()
                self.state = 1681 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 1683
            self.match(vbaParser.END)
            self.state = 1684
            self.wsc()
            self.state = 1685
            self.match(vbaParser.FUNCTION)
            self.state = 1686
            self.procedureTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyGetDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PROPERTY(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.PROPERTY)
            else:
                return self.getToken(vbaParser.PROPERTY, i)

        def procedureTail(self):
            return self.getTypedRuleContext(vbaParser.ProcedureTailContext,0)


        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def functionName(self):
            return self.getTypedRuleContext(vbaParser.FunctionNameContext,0)


        def trailingStatic(self):
            return self.getTypedRuleContext(vbaParser.TrailingStaticContext,0)


        def procedureScope(self):
            return self.getTypedRuleContext(vbaParser.ProcedureScopeContext,0)


        def procedureBody(self):
            return self.getTypedRuleContext(vbaParser.ProcedureBodyContext,0)


        def endLabel(self):
            return self.getTypedRuleContext(vbaParser.EndLabelContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def initialStatic(self):
            return self.getTypedRuleContext(vbaParser.InitialStaticContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def functionType(self):
            return self.getTypedRuleContext(vbaParser.FunctionTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertyGetDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyGetDeclaration" ):
                listener.enterPropertyGetDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyGetDeclaration" ):
                listener.exitPropertyGetDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyGetDeclaration" ):
                return visitor.visitPropertyGetDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def propertyGetDeclaration(self):

        localctx = vbaParser.PropertyGetDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_propertyGetDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 306244774661193745) != 0):
                self.state = 1688
                self.procedureScope()
                self.state = 1689
                self.wsc()


            self.state = 1734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 1696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 1693
                    self.initialStatic()
                    self.state = 1694
                    self.wsc()


                self.state = 1698
                self.match(vbaParser.PROPERTY)
                self.state = 1699
                self.wsc()
                self.state = 1700
                self.match(vbaParser.GET)
                self.state = 1701
                self.wsc()
                self.state = 1702
                self.functionName()
                self.state = 1707
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1703
                        self.wsc()


                    self.state = 1706
                    self.procedureParameters()


                self.state = 1713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1709
                        self.wsc()


                    self.state = 1712
                    self.functionType()


                pass

            elif la_ == 2:
                self.state = 1715
                self.match(vbaParser.PROPERTY)
                self.state = 1716
                self.wsc()
                self.state = 1717
                self.match(vbaParser.GET)
                self.state = 1718
                self.wsc()
                self.state = 1719
                self.functionName()
                self.state = 1721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==236:
                    self.state = 1720
                    self.procedureParameters()


                self.state = 1727
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1723
                        self.wsc()


                    self.state = 1726
                    self.functionType()


                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 1729
                    self.wsc()


                self.state = 1732
                self.trailingStatic()
                pass


            self.state = 1737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1736
                self.procedureBody()


            self.state = 1740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1739
                self.endLabel()


            self.state = 1743 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1742
                self.endOfStatement()
                self.state = 1745 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 1747
            self.match(vbaParser.END)
            self.state = 1748
            self.wsc()
            self.state = 1749
            self.match(vbaParser.PROPERTY)
            self.state = 1750
            self.procedureTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyLhsDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PROPERTY(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.PROPERTY)
            else:
                return self.getToken(vbaParser.PROPERTY, i)

        def procedureTail(self):
            return self.getTypedRuleContext(vbaParser.ProcedureTailContext,0)


        def subroutineName(self):
            return self.getTypedRuleContext(vbaParser.SubroutineNameContext,0)


        def propertyParameters(self):
            return self.getTypedRuleContext(vbaParser.PropertyParametersContext,0)


        def trailingStatic(self):
            return self.getTypedRuleContext(vbaParser.TrailingStaticContext,0)


        def procedureScope(self):
            return self.getTypedRuleContext(vbaParser.ProcedureScopeContext,0)


        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def procedureBody(self):
            return self.getTypedRuleContext(vbaParser.ProcedureBodyContext,0)


        def endLabel(self):
            return self.getTypedRuleContext(vbaParser.EndLabelContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def initialStatic(self):
            return self.getTypedRuleContext(vbaParser.InitialStaticContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertyLhsDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyLhsDeclaration" ):
                listener.enterPropertyLhsDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyLhsDeclaration" ):
                listener.exitPropertyLhsDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyLhsDeclaration" ):
                return visitor.visitPropertyLhsDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def propertyLhsDeclaration(self):

        localctx = vbaParser.PropertyLhsDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_propertyLhsDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 306244774661193745) != 0):
                self.state = 1752
                self.procedureScope()
                self.state = 1753
                self.wsc()


            self.state = 1783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 1757
                    self.initialStatic()
                    self.state = 1758
                    self.wsc()


                self.state = 1762
                self.match(vbaParser.PROPERTY)
                self.state = 1763
                self.wsc()
                self.state = 1764
                _la = self._input.LA(1)
                if not(_la==103 or _la==154):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1765
                self.wsc()
                self.state = 1766
                self.subroutineName()
                self.state = 1768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 1767
                    self.wsc()


                self.state = 1770
                self.propertyParameters()
                pass

            elif la_ == 2:
                self.state = 1772
                self.match(vbaParser.PROPERTY)
                self.state = 1773
                self.wsc()
                self.state = 1774
                _la = self._input.LA(1)
                if not(_la==103 or _la==154):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1775
                self.wsc()
                self.state = 1776
                self.subroutineName()
                self.state = 1777
                self.propertyParameters()
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 1778
                    self.wsc()


                self.state = 1781
                self.trailingStatic()
                pass


            self.state = 1786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1785
                self.procedureBody()


            self.state = 1789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1788
                self.endLabel()


            self.state = 1792 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1791
                self.endOfStatement()
                self.state = 1794 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 1796
            self.match(vbaParser.END)
            self.state = 1797
            self.wsc()
            self.state = 1798
            self.match(vbaParser.PROPERTY)
            self.state = 1799
            self.procedureTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLineNoWs(self):
            return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,0)


        def statementLabelDefinition(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelDefinitionContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_endLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndLabel" ):
                listener.enterEndLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndLabel" ):
                listener.exitEndLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndLabel" ):
                return visitor.visitEndLabel(self)
            else:
                return visitor.visitChildren(self)




    def endLabel(self):

        localctx = vbaParser.EndLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_endLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1801
                    self.endOfStatement() 
                self.state = 1806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

            self.state = 1807
            self.endOfLineNoWs()
            self.state = 1808
            self.statementLabelDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(vbaParser.NEWLINE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def commentBody(self):
            return self.getTypedRuleContext(vbaParser.CommentBodyContext,0)


        def COLON(self):
            return self.getToken(vbaParser.COLON, 0)

        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_procedureTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureTail" ):
                listener.enterProcedureTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureTail" ):
                listener.exitProcedureTail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureTail" ):
                return visitor.visitProcedureTail(self)
            else:
                return visitor.visitChildren(self)




    def procedureTail(self):

        localctx = vbaParser.ProcedureTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_procedureTail)
        self._la = 0 # Token type
        try:
            self.state = 1826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 1810
                    self.wsc()


                self.state = 1813
                self.match(vbaParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 1814
                    self.wsc()


                self.state = 1817
                self.commentBody()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 1818
                    self.match(vbaParser.WS)


                self.state = 1821
                self.match(vbaParser.COLON)
                self.state = 1823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 1822
                    self.match(vbaParser.WS)


                self.state = 1825
                self.remStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def FRIEND(self):
            return self.getToken(vbaParser.FRIEND, 0)

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_procedureScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureScope" ):
                listener.enterProcedureScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureScope" ):
                listener.exitProcedureScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureScope" ):
                return visitor.visitProcedureScope(self)
            else:
                return visitor.visitChildren(self)




    def procedureScope(self):

        localctx = vbaParser.ProcedureScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_procedureScope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            _la = self._input.LA(1)
            if not(((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 306244774661193745) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitialStaticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_initialStatic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitialStatic" ):
                listener.enterInitialStatic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitialStatic" ):
                listener.exitInitialStatic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitialStatic" ):
                return visitor.visitInitialStatic(self)
            else:
                return visitor.visitChildren(self)




    def initialStatic(self):

        localctx = vbaParser.InitialStaticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_initialStatic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            self.match(vbaParser.STATIC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingStaticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_trailingStatic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingStatic" ):
                listener.enterTrailingStatic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingStatic" ):
                listener.exitTrailingStatic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingStatic" ):
                return visitor.visitTrailingStatic(self)
            else:
                return visitor.visitChildren(self)




    def trailingStatic(self):

        localctx = vbaParser.TrailingStaticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_trailingStatic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            self.match(vbaParser.STATIC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubroutineNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def prefixedName(self):
            return self.getTypedRuleContext(vbaParser.PrefixedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_subroutineName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutineName" ):
                listener.enterSubroutineName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutineName" ):
                listener.exitSubroutineName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubroutineName" ):
                return visitor.visitSubroutineName(self)
            else:
                return visitor.visitChildren(self)




    def subroutineName(self):

        localctx = vbaParser.SubroutineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_subroutineName)
        try:
            self.state = 1836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1834
                self.ambiguousIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1835
                self.prefixedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def prefixedName(self):
            return self.getTypedRuleContext(vbaParser.PrefixedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionName" ):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = vbaParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_functionName)
        try:
            self.state = 1841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1838
                self.typedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1839
                self.ambiguousIdentifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1840
                self.prefixedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventHandlerName(self):
            return self.getTypedRuleContext(vbaParser.EventHandlerNameContext,0)


        def implementedName(self):
            return self.getTypedRuleContext(vbaParser.ImplementedNameContext,0)


        def lifecycleHandlerName(self):
            return self.getTypedRuleContext(vbaParser.LifecycleHandlerNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_prefixedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixedName" ):
                listener.enterPrefixedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixedName" ):
                listener.exitPrefixedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixedName" ):
                return visitor.visitPrefixedName(self)
            else:
                return visitor.visitChildren(self)




    def prefixedName(self):

        localctx = vbaParser.PrefixedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_prefixedName)
        try:
            self.state = 1846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1843
                self.eventHandlerName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1844
                self.implementedName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1845
                self.lifecycleHandlerName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def typeExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeExpressionContext,0)


        def arrayDesignator(self):
            return self.getTypedRuleContext(vbaParser.ArrayDesignatorContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionType" ):
                return visitor.visitFunctionType(self)
            else:
                return visitor.visitChildren(self)




    def functionType(self):

        localctx = vbaParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_functionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1848
            self.match(vbaParser.AS)
            self.state = 1849
            self.wsc()
            self.state = 1850
            self.typeExpression()
            self.state = 1852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1851
                self.wsc()


            self.state = 1855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==236:
                self.state = 1854
                self.arrayDesignator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_arrayDesignator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDesignator" ):
                listener.enterArrayDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDesignator" ):
                listener.exitArrayDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDesignator" ):
                return visitor.visitArrayDesignator(self)
            else:
                return visitor.visitChildren(self)




    def arrayDesignator(self):

        localctx = vbaParser.ArrayDesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_arrayDesignator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            self.match(vbaParser.LPAREN)
            self.state = 1859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 1858
                self.wsc()


            self.state = 1861
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def parameterList(self):
            return self.getTypedRuleContext(vbaParser.ParameterListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_procedureParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameters" ):
                listener.enterProcedureParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameters" ):
                listener.exitProcedureParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureParameters" ):
                return visitor.visitProcedureParameters(self)
            else:
                return visitor.visitChildren(self)




    def procedureParameters(self):

        localctx = vbaParser.ProcedureParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_procedureParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            self.match(vbaParser.LPAREN)
            self.state = 1865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.state = 1864
                self.wsc()


            self.state = 1868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35474685147412) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 2541181929617623041) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 1297036692692402213) != 0) or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & 1152921504606978047) != 0):
                self.state = 1867
                self.parameterList()


            self.state = 1871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 1870
                self.wsc()


            self.state = 1873
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def valueParam(self):
            return self.getTypedRuleContext(vbaParser.ValueParamContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def parameterList(self):
            return self.getTypedRuleContext(vbaParser.ParameterListContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_propertyParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyParameters" ):
                listener.enterPropertyParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyParameters" ):
                listener.exitPropertyParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyParameters" ):
                return visitor.visitPropertyParameters(self)
            else:
                return visitor.visitChildren(self)




    def propertyParameters(self):

        localctx = vbaParser.PropertyParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_propertyParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1875
            self.match(vbaParser.LPAREN)
            self.state = 1877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 1876
                self.wsc()


            self.state = 1887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 1879
                self.parameterList()
                self.state = 1881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 1880
                    self.wsc()


                self.state = 1883
                self.match(vbaParser.COMMA)
                self.state = 1885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 1884
                    self.wsc()




            self.state = 1889
            self.valueParam()
            self.state = 1891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 1890
                self.wsc()


            self.state = 1893
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positionalParameters(self):
            return self.getTypedRuleContext(vbaParser.PositionalParametersContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def optionalParameters(self):
            return self.getTypedRuleContext(vbaParser.OptionalParametersContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def paramArray(self):
            return self.getTypedRuleContext(vbaParser.ParamArrayContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = vbaParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.state = 1918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1895
                self.positionalParameters()
                self.state = 1897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 1896
                    self.wsc()


                self.state = 1899
                self.match(vbaParser.COMMA)
                self.state = 1901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 1900
                    self.wsc()


                self.state = 1903
                self.optionalParameters()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1905
                self.positionalParameters()
                self.state = 1914
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                if la_ == 1:
                    self.state = 1907
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1906
                        self.wsc()


                    self.state = 1909
                    self.match(vbaParser.COMMA)
                    self.state = 1911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1910
                        self.wsc()


                    self.state = 1913
                    self.paramArray()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1916
                self.optionalParameters()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1917
                self.paramArray()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positionalParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.PositionalParamContext)
            else:
                return self.getTypedRuleContext(vbaParser.PositionalParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_positionalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalParameters" ):
                listener.enterPositionalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalParameters" ):
                listener.exitPositionalParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalParameters" ):
                return visitor.visitPositionalParameters(self)
            else:
                return visitor.visitChildren(self)




    def positionalParameters(self):

        localctx = vbaParser.PositionalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_positionalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1920
            self.positionalParam()
            self.state = 1931
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,217,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1922
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1921
                        self.wsc()


                    self.state = 1924
                    self.match(vbaParser.COMMA)
                    self.state = 1926
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1925
                        self.wsc()


                    self.state = 1928
                    self.positionalParam() 
                self.state = 1933
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionalParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.OptionalParamContext)
            else:
                return self.getTypedRuleContext(vbaParser.OptionalParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_optionalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalParameters" ):
                listener.enterOptionalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalParameters" ):
                listener.exitOptionalParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalParameters" ):
                return visitor.visitOptionalParameters(self)
            else:
                return visitor.visitChildren(self)




    def optionalParameters(self):

        localctx = vbaParser.OptionalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_optionalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            self.optionalParam()
            self.state = 1945
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1936
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1935
                        self.wsc()


                    self.state = 1938
                    self.match(vbaParser.COMMA)
                    self.state = 1940
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 1939
                        self.wsc()


                    self.state = 1942
                    self.optionalParam() 
                self.state = 1947
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positionalParam(self):
            return self.getTypedRuleContext(vbaParser.PositionalParamContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_valueParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueParam" ):
                listener.enterValueParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueParam" ):
                listener.exitValueParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueParam" ):
                return visitor.visitValueParam(self)
            else:
                return visitor.visitChildren(self)




    def valueParam(self):

        localctx = vbaParser.ValueParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_valueParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            self.positionalParam()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionalParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramDcl(self):
            return self.getTypedRuleContext(vbaParser.ParamDclContext,0)


        def parameterMechanism(self):
            return self.getTypedRuleContext(vbaParser.ParameterMechanismContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_positionalParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalParam" ):
                listener.enterPositionalParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalParam" ):
                listener.exitPositionalParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalParam" ):
                return visitor.visitPositionalParam(self)
            else:
                return visitor.visitChildren(self)




    def positionalParam(self):

        localctx = vbaParser.PositionalParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_positionalParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15 or _la==16:
                self.state = 1950
                self.parameterMechanism()
                self.state = 1951
                self.wsc()


            self.state = 1955
            self.paramDcl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionalPrefix(self):
            return self.getTypedRuleContext(vbaParser.OptionalPrefixContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def paramDcl(self):
            return self.getTypedRuleContext(vbaParser.ParamDclContext,0)


        def defaultValue(self):
            return self.getTypedRuleContext(vbaParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_optionalParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalParam" ):
                listener.enterOptionalParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalParam" ):
                listener.exitOptionalParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalParam" ):
                return visitor.visitOptionalParam(self)
            else:
                return visitor.visitChildren(self)




    def optionalParam(self):

        localctx = vbaParser.OptionalParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_optionalParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1957
            self.optionalPrefix()
            self.state = 1958
            self.wsc()
            self.state = 1959
            self.paramDcl()
            self.state = 1961
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1960
                self.wsc()


            self.state = 1964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==230:
                self.state = 1963
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def VARIANT(self):
            return self.getToken(vbaParser.VARIANT, 0)

        def L_SQUARE_BRACKET(self):
            return self.getToken(vbaParser.L_SQUARE_BRACKET, 0)

        def R_SQUARE_BRACKET(self):
            return self.getToken(vbaParser.R_SQUARE_BRACKET, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_paramArray

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamArray" ):
                listener.enterParamArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamArray" ):
                listener.exitParamArray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamArray" ):
                return visitor.visitParamArray(self)
            else:
                return visitor.visitChildren(self)




    def paramArray(self):

        localctx = vbaParser.ParamArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_paramArray)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1966
            self.match(vbaParser.PARAMARRAY)
            self.state = 1967
            self.wsc()
            self.state = 1968
            self.ambiguousIdentifier()
            self.state = 1969
            self.match(vbaParser.LPAREN)
            self.state = 1971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 1970
                self.wsc()


            self.state = 1973
            self.match(vbaParser.RPAREN)
            self.state = 1983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 1974
                self.wsc()
                self.state = 1975
                self.match(vbaParser.AS)
                self.state = 1976
                self.wsc()
                self.state = 1981
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [198]:
                    self.state = 1977
                    self.match(vbaParser.VARIANT)
                    pass
                elif token in [249]:
                    self.state = 1978
                    self.match(vbaParser.L_SQUARE_BRACKET)
                    self.state = 1979
                    self.match(vbaParser.VARIANT)
                    self.state = 1980
                    self.match(vbaParser.R_SQUARE_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untypedNameParamDcl(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameParamDclContext,0)


        def typedNameParamDcl(self):
            return self.getTypedRuleContext(vbaParser.TypedNameParamDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_paramDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamDcl" ):
                listener.enterParamDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamDcl" ):
                listener.exitParamDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamDcl" ):
                return visitor.visitParamDcl(self)
            else:
                return visitor.visitChildren(self)




    def paramDcl(self):

        localctx = vbaParser.ParamDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_paramDcl)
        try:
            self.state = 1987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1985
                self.untypedNameParamDcl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1986
                self.typedNameParamDcl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedNameParamDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def parameterType(self):
            return self.getTypedRuleContext(vbaParser.ParameterTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untypedNameParamDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedNameParamDcl" ):
                listener.enterUntypedNameParamDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedNameParamDcl" ):
                listener.exitUntypedNameParamDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedNameParamDcl" ):
                return visitor.visitUntypedNameParamDcl(self)
            else:
                return visitor.visitChildren(self)




    def untypedNameParamDcl(self):

        localctx = vbaParser.UntypedNameParamDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_untypedNameParamDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1989
            self.ambiguousIdentifier()
            self.state = 1991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1990
                self.parameterType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedNameParamDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def arrayDesignator(self):
            return self.getTypedRuleContext(vbaParser.ArrayDesignatorContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typedNameParamDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedNameParamDcl" ):
                listener.enterTypedNameParamDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedNameParamDcl" ):
                listener.exitTypedNameParamDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedNameParamDcl" ):
                return visitor.visitTypedNameParamDcl(self)
            else:
                return visitor.visitChildren(self)




    def typedNameParamDcl(self):

        localctx = vbaParser.TypedNameParamDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_typedNameParamDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1993
            self.typedName()
            self.state = 1995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==236:
                self.state = 1994
                self.arrayDesignator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(vbaParser.OPTIONAL, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def parameterMechanism(self):
            return self.getTypedRuleContext(vbaParser.ParameterMechanismContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_optionalPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalPrefix" ):
                listener.enterOptionalPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalPrefix" ):
                listener.exitOptionalPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalPrefix" ):
                return visitor.visitOptionalPrefix(self)
            else:
                return visitor.visitChildren(self)




    def optionalPrefix(self):

        localctx = vbaParser.OptionalPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_optionalPrefix)
        try:
            self.state = 2007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1997
                self.match(vbaParser.OPTIONAL)
                self.state = 2001
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                if la_ == 1:
                    self.state = 1998
                    self.wsc()
                    self.state = 1999
                    self.parameterMechanism()


                pass
            elif token in [15, 16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2003
                self.parameterMechanism()
                self.state = 2004
                self.wsc()
                self.state = 2005
                self.match(vbaParser.OPTIONAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterMechanismContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_parameterMechanism

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterMechanism" ):
                listener.enterParameterMechanism(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterMechanism" ):
                listener.exitParameterMechanism(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterMechanism" ):
                return visitor.visitParameterMechanism(self)
            else:
                return visitor.visitChildren(self)




    def parameterMechanism(self):

        localctx = vbaParser.ParameterMechanismContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_parameterMechanism)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2009
            _la = self._input.LA(1)
            if not(_la==15 or _la==16):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeExpressionContext,0)


        def ANY(self):
            return self.getToken(vbaParser.ANY, 0)

        def arrayDesignator(self):
            return self.getTypedRuleContext(vbaParser.ArrayDesignatorContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_parameterType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterType" ):
                listener.enterParameterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterType" ):
                listener.exitParameterType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterType" ):
                return visitor.visitParameterType(self)
            else:
                return visitor.visitChildren(self)




    def parameterType(self):

        localctx = vbaParser.ParameterTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_parameterType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==236:
                self.state = 2011
                self.arrayDesignator()


            self.state = 2014
            self.wsc()
            self.state = 2015
            self.match(vbaParser.AS)
            self.state = 2016
            self.wsc()
            self.state = 2019
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 4, 8, 9, 11, 12, 13, 14, 17, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 65, 66, 76, 81, 87, 94, 95, 96, 98, 99, 100, 101, 102, 104, 106, 109, 110, 111, 114, 115, 116, 117, 118, 120, 126, 132, 137, 138, 142, 144, 147, 151, 155, 157, 160, 162, 165, 171, 198, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 231, 243, 249, 267]:
                self.state = 2017
                self.typeExpression()
                pass
            elif token in [6]:
                self.state = 2018
                self.match(vbaParser.ANY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultValue" ):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def defaultValue(self):

        localctx = vbaParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_defaultValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2021
            self.match(vbaParser.EQ)
            self.state = 2023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2022
                self.wsc()


            self.state = 2025
            self.constantExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventHandlerNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventHandlerName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventHandlerName" ):
                listener.enterEventHandlerName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventHandlerName" ):
                listener.exitEventHandlerName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventHandlerName" ):
                return visitor.visitEventHandlerName(self)
            else:
                return visitor.visitChildren(self)




    def eventHandlerName(self):

        localctx = vbaParser.EventHandlerNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_eventHandlerName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2027
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implementedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementedName" ):
                listener.enterImplementedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementedName" ):
                listener.exitImplementedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplementedName" ):
                return visitor.visitImplementedName(self)
            else:
                return visitor.visitChildren(self)




    def implementedName(self):

        localctx = vbaParser.ImplementedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_implementedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2029
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LifecycleHandlerNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_INITIALIZE(self):
            return self.getToken(vbaParser.CLASS_INITIALIZE, 0)

        def CLASS_TERMINATE(self):
            return self.getToken(vbaParser.CLASS_TERMINATE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lifecycleHandlerName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLifecycleHandlerName" ):
                listener.enterLifecycleHandlerName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLifecycleHandlerName" ):
                listener.exitLifecycleHandlerName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLifecycleHandlerName" ):
                return visitor.visitLifecycleHandlerName(self)
            else:
                return visitor.visitChildren(self)




    def lifecycleHandlerName(self):

        localctx = vbaParser.LifecycleHandlerNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_lifecycleHandlerName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2031
            _la = self._input.LA(1)
            if not(_la==32 or _la==33):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_procedureBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureBody" ):
                listener.enterProcedureBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureBody" ):
                listener.exitProcedureBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureBody" ):
                return visitor.visitProcedureBody(self)
            else:
                return visitor.visitChildren(self)




    def procedureBody(self):

        localctx = vbaParser.ProcedureBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_procedureBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2033
            self.statementBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_statementBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementBlock" ):
                listener.enterStatementBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementBlock" ):
                listener.exitStatementBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementBlock" ):
                return visitor.visitStatementBlock(self)
            else:
                return visitor.visitChildren(self)




    def statementBlock(self):

        localctx = vbaParser.StatementBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_statementBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2036 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2035
                    self.blockStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 2038 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLineNoWs(self):
            return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,0)


        def statementLabelDefinition(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelDefinitionContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def statement(self):
            return self.getTypedRuleContext(vbaParser.StatementContext,0)


        def attributeStatement(self):
            return self.getTypedRuleContext(vbaParser.AttributeStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = vbaParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_blockStatement)
        try:
            self.state = 2066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2043
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2040
                        self.endOfStatement() 
                    self.state = 2045
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

                self.state = 2046
                self.endOfLineNoWs()
                self.state = 2047
                self.statementLabelDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2050 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2049
                        self.endOfStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2052 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

                self.state = 2054
                self.remStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2056
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2060
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2057
                        self.endOfStatement() 
                    self.state = 2062
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

                self.state = 2063
                self.endOfLineNoWs()
                self.state = 2064
                self.attributeStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def controlStatement(self):
            return self.getTypedRuleContext(vbaParser.ControlStatementContext,0)


        def dataManipulationStatement(self):
            return self.getTypedRuleContext(vbaParser.DataManipulationStatementContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def errorHandlingStatement(self):
            return self.getTypedRuleContext(vbaParser.ErrorHandlingStatementContext,0)


        def fileStatement(self):
            return self.getTypedRuleContext(vbaParser.FileStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = vbaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 2090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2068
                self.controlStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2070 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2069
                    self.endOfStatement()
                    self.state = 2072 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                        break

                self.state = 2074
                self.dataManipulationStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2077 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2076
                    self.endOfStatement()
                    self.state = 2079 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                        break

                self.state = 2081
                self.errorHandlingStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2084 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2083
                    self.endOfStatement()
                    self.state = 2086 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                        break

                self.state = 2088
                self.fileStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementLabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierStatementLabel(self):
            return self.getTypedRuleContext(vbaParser.IdentifierStatementLabelContext,0)


        def COLON(self):
            return self.getToken(vbaParser.COLON, 0)

        def lineNumberLabel(self):
            return self.getTypedRuleContext(vbaParser.LineNumberLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_statementLabelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementLabelDefinition" ):
                listener.enterStatementLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementLabelDefinition" ):
                listener.exitStatementLabelDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementLabelDefinition" ):
                return visitor.visitStatementLabelDefinition(self)
            else:
                return visitor.visitChildren(self)




    def statementLabelDefinition(self):

        localctx = vbaParser.StatementLabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_statementLabelDefinition)
        try:
            self.state = 2099
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 8, 11, 12, 13, 27, 28, 31, 32, 33, 38, 76, 87, 99, 104, 106, 115, 116, 117, 118, 120, 126, 132, 137, 142, 144, 147, 160, 165, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 267]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2092
                self.identifierStatementLabel()
                self.state = 2093
                self.match(vbaParser.COLON)
                pass
            elif token in [255]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2095
                self.lineNumberLabel()
                self.state = 2097
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                if la_ == 1:
                    self.state = 2096
                    self.match(vbaParser.COLON)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierStatementLabel(self):
            return self.getTypedRuleContext(vbaParser.IdentifierStatementLabelContext,0)


        def lineNumberLabel(self):
            return self.getTypedRuleContext(vbaParser.LineNumberLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_statementLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementLabel" ):
                listener.enterStatementLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementLabel" ):
                listener.exitStatementLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementLabel" ):
                return visitor.visitStatementLabel(self)
            else:
                return visitor.visitChildren(self)




    def statementLabel(self):

        localctx = vbaParser.StatementLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_statementLabel)
        try:
            self.state = 2103
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 8, 11, 12, 13, 27, 28, 31, 32, 33, 38, 76, 87, 99, 104, 106, 115, 116, 117, 118, 120, 126, 132, 137, 142, 144, 147, 160, 165, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 267]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2101
                self.identifierStatementLabel()
                pass
            elif token in [255]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2102
                self.lineNumberLabel()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementLabelListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.StatementLabelContext)
            else:
                return self.getTypedRuleContext(vbaParser.StatementLabelContext,i)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_statementLabelList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementLabelList" ):
                listener.enterStatementLabelList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementLabelList" ):
                listener.exitStatementLabelList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementLabelList" ):
                return visitor.visitStatementLabelList(self)
            else:
                return visitor.visitChildren(self)




    def statementLabelList(self):

        localctx = vbaParser.StatementLabelListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_statementLabelList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2105
            self.statementLabel()
            self.state = 2114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2106
                    self.wsc()


                self.state = 2109
                self.match(vbaParser.COMMA)
                self.state = 2111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2110
                    self.wsc()


                self.state = 2113
                self.statementLabel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierStatementLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_identifierStatementLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierStatementLabel" ):
                listener.enterIdentifierStatementLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierStatementLabel" ):
                listener.exitIdentifierStatementLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierStatementLabel" ):
                return visitor.visitIdentifierStatementLabel(self)
            else:
                return visitor.visitChildren(self)




    def identifierStatementLabel(self):

        localctx = vbaParser.IdentifierStatementLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_identifierStatementLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2116
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineNumberLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lineNumberLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineNumberLabel" ):
                listener.enterLineNumberLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineNumberLabel" ):
                listener.exitLineNumberLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineNumberLabel" ):
                return visitor.visitLineNumberLabel(self)
            else:
                return visitor.visitChildren(self)




    def lineNumberLabel(self):

        localctx = vbaParser.LineNumberLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_lineNumberLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2118
            self.match(vbaParser.INTEGERLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMCOMMENT(self):
            return self.getToken(vbaParser.REMCOMMENT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_remStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemStatement" ):
                listener.enterRemStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemStatement" ):
                listener.exitRemStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemStatement" ):
                return visitor.visitRemStatement(self)
            else:
                return visitor.visitChildren(self)




    def remStatement(self):

        localctx = vbaParser.RemStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_remStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2120
            self.match(vbaParser.REMCOMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(vbaParser.IfStatementContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def controlStatementExceptMultilineIf(self):
            return self.getTypedRuleContext(vbaParser.ControlStatementExceptMultilineIfContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_controlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStatement" ):
                listener.enterControlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStatement" ):
                listener.exitControlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlStatement" ):
                return visitor.visitControlStatement(self)
            else:
                return visitor.visitChildren(self)




    def controlStatement(self):

        localctx = vbaParser.ControlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_controlStatement)
        self._la = 0 # Token type
        try:
            self.state = 2142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2125
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2122
                        self.endOfStatement() 
                    self.state = 2127
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

                self.state = 2129 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2128
                    self.endOfLine()
                    self.state = 2131 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 71) != 0)):
                        break

                self.state = 2133
                self.ifStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2136 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2135
                    self.endOfStatement()
                    self.state = 2138 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                        break

                self.state = 2140
                self.controlStatementExceptMultilineIf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStatementExceptMultilineIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callStatement(self):
            return self.getTypedRuleContext(vbaParser.CallStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(vbaParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(vbaParser.ForStatementContext,0)


        def exitForStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitForStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(vbaParser.DoStatementContext,0)


        def exitDoStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitDoStatementContext,0)


        def singleLineIfStatement(self):
            return self.getTypedRuleContext(vbaParser.SingleLineIfStatementContext,0)


        def selectCaseStatement(self):
            return self.getTypedRuleContext(vbaParser.SelectCaseStatementContext,0)


        def stopStatement(self):
            return self.getTypedRuleContext(vbaParser.StopStatementContext,0)


        def gotoStatement(self):
            return self.getTypedRuleContext(vbaParser.GotoStatementContext,0)


        def onGotoStatement(self):
            return self.getTypedRuleContext(vbaParser.OnGotoStatementContext,0)


        def gosubStatement(self):
            return self.getTypedRuleContext(vbaParser.GosubStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(vbaParser.ReturnStatementContext,0)


        def onGosubStatement(self):
            return self.getTypedRuleContext(vbaParser.OnGosubStatementContext,0)


        def forEachStatement(self):
            return self.getTypedRuleContext(vbaParser.ForEachStatementContext,0)


        def exitSubStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitSubStatementContext,0)


        def exitFunctionStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitFunctionStatementContext,0)


        def exitPropertyStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitPropertyStatementContext,0)


        def raiseeventStatement(self):
            return self.getTypedRuleContext(vbaParser.RaiseeventStatementContext,0)


        def withStatement(self):
            return self.getTypedRuleContext(vbaParser.WithStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_controlStatementExceptMultilineIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStatementExceptMultilineIf" ):
                listener.enterControlStatementExceptMultilineIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStatementExceptMultilineIf" ):
                listener.exitControlStatementExceptMultilineIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlStatementExceptMultilineIf" ):
                return visitor.visitControlStatementExceptMultilineIf(self)
            else:
                return visitor.visitChildren(self)




    def controlStatementExceptMultilineIf(self):

        localctx = vbaParser.ControlStatementExceptMultilineIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_controlStatementExceptMultilineIf)
        try:
            self.state = 2164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2144
                self.callStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2145
                self.whileStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2146
                self.forStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2147
                self.exitForStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2148
                self.doStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2149
                self.exitDoStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2150
                self.singleLineIfStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2151
                self.selectCaseStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2152
                self.stopStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2153
                self.gotoStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2154
                self.onGotoStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2155
                self.gosubStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2156
                self.returnStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2157
                self.onGosubStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2158
                self.forEachStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2159
                self.exitSubStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2160
                self.exitFunctionStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2161
                self.exitPropertyStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2162
                self.raiseeventStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2163
                self.withStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def memberAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.MemberAccessExpressionContext,0)


        def indexExpression(self):
            return self.getTypedRuleContext(vbaParser.IndexExpressionContext,0)


        def withExpression(self):
            return self.getTypedRuleContext(vbaParser.WithExpressionContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(vbaParser.ArgumentListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStatement" ):
                return visitor.visitCallStatement(self)
            else:
                return visitor.visitChildren(self)




    def callStatement(self):

        localctx = vbaParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_callStatement)
        try:
            self.state = 2184
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2166
                self.match(vbaParser.CALL)
                self.state = 2167
                self.wsc()
                self.state = 2172
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                if la_ == 1:
                    self.state = 2168
                    self.simpleNameExpression()
                    pass

                elif la_ == 2:
                    self.state = 2169
                    self.memberAccessExpression()
                    pass

                elif la_ == 3:
                    self.state = 2170
                    self.indexExpression()
                    pass

                elif la_ == 4:
                    self.state = 2171
                    self.withExpression()
                    pass


                pass
            elif token in [1, 2, 4, 8, 9, 11, 12, 13, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 46, 65, 76, 81, 87, 94, 95, 96, 99, 100, 101, 102, 104, 106, 114, 115, 116, 117, 118, 120, 126, 132, 137, 138, 142, 144, 147, 151, 155, 160, 162, 165, 171, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 231, 243, 267]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2177
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 2174
                    self.simpleNameExpression()
                    pass

                elif la_ == 2:
                    self.state = 2175
                    self.memberAccessExpression()
                    pass

                elif la_ == 3:
                    self.state = 2176
                    self.withExpression()
                    pass


                self.state = 2182
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                if la_ == 1:
                    self.state = 2179
                    self.wsc()
                    self.state = 2180
                    self.argumentList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def WEND(self):
            return self.getToken(vbaParser.WEND, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = vbaParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2186
            self.match(vbaParser.WHILE)
            self.state = 2187
            self.wsc()
            self.state = 2188
            self.booleanExpression()
            self.state = 2190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 2189
                self.statementBlock()


            self.state = 2193 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2192
                self.endOfStatement()
                self.state = 2195 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 2197
            self.match(vbaParser.WEND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleForStatement(self):
            return self.getTypedRuleContext(vbaParser.SimpleForStatementContext,0)


        def explicitForStatement(self):
            return self.getTypedRuleContext(vbaParser.ExplicitForStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = vbaParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_forStatement)
        try:
            self.state = 2201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2199
                self.simpleForStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2200
                self.explicitForStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forClause(self):
            return self.getTypedRuleContext(vbaParser.ForClauseContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_simpleForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleForStatement" ):
                listener.enterSimpleForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleForStatement" ):
                listener.exitSimpleForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleForStatement" ):
                return visitor.visitSimpleForStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleForStatement(self):

        localctx = vbaParser.SimpleForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_simpleForStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2203
            self.forClause()
            self.state = 2205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.state = 2204
                self.statementBlock()


            self.state = 2208 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2207
                self.endOfStatement()
                self.state = 2210 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 2212
            self.match(vbaParser.NEXT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forClause(self):
            return self.getTypedRuleContext(vbaParser.ForClauseContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def nestedForStatement(self):
            return self.getTypedRuleContext(vbaParser.NestedForStatementContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_explicitForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitForStatement" ):
                listener.enterExplicitForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitForStatement" ):
                listener.exitExplicitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitForStatement" ):
                return visitor.visitExplicitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def explicitForStatement(self):

        localctx = vbaParser.ExplicitForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_explicitForStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2214
            self.forClause()
            self.state = 2216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.state = 2215
                self.statementBlock()


            self.state = 2219 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2218
                self.endOfStatement()
                self.state = 2221 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 2230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121]:
                self.state = 2223
                self.match(vbaParser.NEXT)
                pass
            elif token in [83]:
                self.state = 2224
                self.nestedForStatement()
                self.state = 2226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2225
                    self.wsc()


                self.state = 2228
                self.match(vbaParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2232
            self.wsc()
            self.state = 2233
            self.boundVariableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicitForStatement(self):
            return self.getTypedRuleContext(vbaParser.ExplicitForStatementContext,0)


        def explicitForEachStatement(self):
            return self.getTypedRuleContext(vbaParser.ExplicitForEachStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_nestedForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedForStatement" ):
                listener.enterNestedForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedForStatement" ):
                listener.exitNestedForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedForStatement" ):
                return visitor.visitNestedForStatement(self)
            else:
                return visitor.visitChildren(self)




    def nestedForStatement(self):

        localctx = vbaParser.NestedForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_nestedForStatement)
        try:
            self.state = 2237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2235
                self.explicitForStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2236
                self.explicitForEachStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def startValue(self):
            return self.getTypedRuleContext(vbaParser.StartValueContext,0)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def endValue(self):
            return self.getTypedRuleContext(vbaParser.EndValueContext,0)


        def stepClause(self):
            return self.getTypedRuleContext(vbaParser.StepClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForClause" ):
                listener.enterForClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForClause" ):
                listener.exitForClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForClause" ):
                return visitor.visitForClause(self)
            else:
                return visitor.visitChildren(self)




    def forClause(self):

        localctx = vbaParser.ForClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_forClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2239
            self.match(vbaParser.FOR)
            self.state = 2240
            self.wsc()
            self.state = 2241
            self.boundVariableExpression()
            self.state = 2243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2242
                self.wsc()


            self.state = 2245
            self.match(vbaParser.EQ)
            self.state = 2247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2246
                self.wsc()


            self.state = 2249
            self.startValue()
            self.state = 2250
            self.wsc()
            self.state = 2251
            self.match(vbaParser.TO)
            self.state = 2252
            self.wsc()
            self.state = 2253
            self.endValue()
            self.state = 2257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 2254
                self.wsc()
                self.state = 2255
                self.stepClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_startValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartValue" ):
                listener.enterStartValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartValue" ):
                listener.exitStartValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartValue" ):
                return visitor.visitStartValue(self)
            else:
                return visitor.visitChildren(self)




    def startValue(self):

        localctx = vbaParser.StartValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_startValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2259
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_endValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndValue" ):
                listener.enterEndValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndValue" ):
                listener.exitEndValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndValue" ):
                return visitor.visitEndValue(self)
            else:
                return visitor.visitChildren(self)




    def endValue(self):

        localctx = vbaParser.EndValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_endValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2261
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StepClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STEP(self):
            return self.getToken(vbaParser.STEP, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def stepIncrement(self):
            return self.getTypedRuleContext(vbaParser.StepIncrementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_stepClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStepClause" ):
                listener.enterStepClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStepClause" ):
                listener.exitStepClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStepClause" ):
                return visitor.visitStepClause(self)
            else:
                return visitor.visitChildren(self)




    def stepClause(self):

        localctx = vbaParser.StepClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_stepClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self.match(vbaParser.STEP)
            self.state = 2264
            self.wsc()
            self.state = 2265
            self.stepIncrement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StepIncrementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_stepIncrement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStepIncrement" ):
                listener.enterStepIncrement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStepIncrement" ):
                listener.exitStepIncrement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStepIncrement" ):
                return visitor.visitStepIncrement(self)
            else:
                return visitor.visitChildren(self)




    def stepIncrement(self):

        localctx = vbaParser.StepIncrementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_stepIncrement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2267
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleForEachStatement(self):
            return self.getTypedRuleContext(vbaParser.SimpleForEachStatementContext,0)


        def explicitForEachStatement(self):
            return self.getTypedRuleContext(vbaParser.ExplicitForEachStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forEachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStatement" ):
                listener.enterForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStatement" ):
                listener.exitForEachStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForEachStatement" ):
                return visitor.visitForEachStatement(self)
            else:
                return visitor.visitChildren(self)




    def forEachStatement(self):

        localctx = vbaParser.ForEachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_forEachStatement)
        try:
            self.state = 2271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2269
                self.simpleForEachStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2270
                self.explicitForEachStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleForEachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forEachClause(self):
            return self.getTypedRuleContext(vbaParser.ForEachClauseContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_simpleForEachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleForEachStatement" ):
                listener.enterSimpleForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleForEachStatement" ):
                listener.exitSimpleForEachStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleForEachStatement" ):
                return visitor.visitSimpleForEachStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleForEachStatement(self):

        localctx = vbaParser.SimpleForEachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_simpleForEachStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2273
            self.forEachClause()
            self.state = 2275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 2274
                self.statementBlock()


            self.state = 2278 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2277
                self.endOfStatement()
                self.state = 2280 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 2282
            self.match(vbaParser.NEXT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitForEachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forEachClause(self):
            return self.getTypedRuleContext(vbaParser.ForEachClauseContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def nestedForStatement(self):
            return self.getTypedRuleContext(vbaParser.NestedForStatementContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_explicitForEachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitForEachStatement" ):
                listener.enterExplicitForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitForEachStatement" ):
                listener.exitExplicitForEachStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitForEachStatement" ):
                return visitor.visitExplicitForEachStatement(self)
            else:
                return visitor.visitChildren(self)




    def explicitForEachStatement(self):

        localctx = vbaParser.ExplicitForEachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_explicitForEachStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2284
            self.forEachClause()
            self.state = 2286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.state = 2285
                self.statementBlock()


            self.state = 2288
            self.endOfStatement()
            self.state = 2296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121]:
                self.state = 2289
                self.match(vbaParser.NEXT)
                pass
            elif token in [83]:
                self.state = 2290
                self.nestedForStatement()
                self.state = 2292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2291
                    self.wsc()


                self.state = 2294
                self.match(vbaParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2298
            self.wsc()
            self.state = 2299
            self.boundVariableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def EACH(self):
            return self.getToken(vbaParser.EACH, 0)

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def IN(self):
            return self.getToken(vbaParser.IN, 0)

        def collection(self):
            return self.getTypedRuleContext(vbaParser.CollectionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forEachClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachClause" ):
                listener.enterForEachClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachClause" ):
                listener.exitForEachClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForEachClause" ):
                return visitor.visitForEachClause(self)
            else:
                return visitor.visitChildren(self)




    def forEachClause(self):

        localctx = vbaParser.ForEachClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_forEachClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2301
            self.match(vbaParser.FOR)
            self.state = 2302
            self.wsc()
            self.state = 2303
            self.match(vbaParser.EACH)
            self.state = 2305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2304
                self.wsc()


            self.state = 2307
            self.boundVariableExpression()
            self.state = 2309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2308
                self.wsc()


            self.state = 2311
            self.match(vbaParser.IN)
            self.state = 2313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2312
                self.wsc()


            self.state = 2315
            self.collection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_collection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection" ):
                listener.enterCollection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection" ):
                listener.exitCollection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollection" ):
                return visitor.visitCollection(self)
            else:
                return visitor.visitChildren(self)




    def collection(self):

        localctx = vbaParser.CollectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_collection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2317
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitForStatement" ):
                listener.enterExitForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitForStatement" ):
                listener.exitExitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitForStatement" ):
                return visitor.visitExitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitForStatement(self):

        localctx = vbaParser.ExitForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_exitForStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2319
            self.match(vbaParser.EXIT)
            self.state = 2320
            self.wsc()
            self.state = 2321
            self.match(vbaParser.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def LOOP(self):
            return self.getToken(vbaParser.LOOP, 0)

        def conditionClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ConditionClauseContext)
            else:
                return self.getTypedRuleContext(vbaParser.ConditionClauseContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoStatement" ):
                return visitor.visitDoStatement(self)
            else:
                return visitor.visitChildren(self)




    def doStatement(self):

        localctx = vbaParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_doStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2323
            self.match(vbaParser.DO)
            self.state = 2328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 2325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2324
                    self.wsc()


                self.state = 2327
                self.conditionClause()


            self.state = 2331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.state = 2330
                self.statementBlock()


            self.state = 2334 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2333
                self.endOfStatement()
                self.state = 2336 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 2338
            self.match(vbaParser.LOOP)
            self.state = 2343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.state = 2340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2339
                    self.wsc()


                self.state = 2342
                self.conditionClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whileClause(self):
            return self.getTypedRuleContext(vbaParser.WhileClauseContext,0)


        def untilClause(self):
            return self.getTypedRuleContext(vbaParser.UntilClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_conditionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionClause" ):
                listener.enterConditionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionClause" ):
                listener.exitConditionClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionClause" ):
                return visitor.visitConditionClause(self)
            else:
                return visitor.visitChildren(self)




    def conditionClause(self):

        localctx = vbaParser.ConditionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_conditionClause)
        try:
            self.state = 2347
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [201]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2345
                self.whileClause()
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2346
                self.untilClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_whileClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileClause" ):
                listener.enterWhileClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileClause" ):
                listener.exitWhileClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileClause" ):
                return visitor.visitWhileClause(self)
            else:
                return visitor.visitChildren(self)




    def whileClause(self):

        localctx = vbaParser.WhileClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_whileClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            self.match(vbaParser.WHILE)
            self.state = 2351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2350
                self.wsc()


            self.state = 2353
            self.booleanExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntilClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNTIL(self):
            return self.getToken(vbaParser.UNTIL, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untilClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntilClause" ):
                listener.enterUntilClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntilClause" ):
                listener.exitUntilClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntilClause" ):
                return visitor.visitUntilClause(self)
            else:
                return visitor.visitChildren(self)




    def untilClause(self):

        localctx = vbaParser.UntilClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_untilClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2355
            self.match(vbaParser.UNTIL)
            self.state = 2357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2356
                self.wsc()


            self.state = 2359
            self.booleanExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitDoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitDoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitDoStatement" ):
                listener.enterExitDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitDoStatement" ):
                listener.exitExitDoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitDoStatement" ):
                return visitor.visitExitDoStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitDoStatement(self):

        localctx = vbaParser.ExitDoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_exitDoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2361
            self.match(vbaParser.EXIT)
            self.state = 2362
            self.wsc()
            self.state = 2363
            self.match(vbaParser.DO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.IF)
            else:
                return self.getToken(vbaParser.IF, i)

        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def ENDIF(self):
            return self.getToken(vbaParser.ENDIF, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def elseIfBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ElseIfBlockContext)
            else:
                return self.getTypedRuleContext(vbaParser.ElseIfBlockContext,i)


        def elseBlock(self):
            return self.getTypedRuleContext(vbaParser.ElseBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = vbaParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2365
            self.match(vbaParser.IF)
            self.state = 2367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2366
                self.wsc()


            self.state = 2369
            self.booleanExpression()
            self.state = 2371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2370
                self.wsc()


            self.state = 2373
            self.match(vbaParser.THEN)
            self.state = 2375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 2374
                self.statementBlock()


            self.state = 2380
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,293,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2377
                    self.elseIfBlock() 
                self.state = 2382
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,293,self._ctx)

            self.state = 2384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 2383
                self.elseBlock()


            self.state = 2387 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2386
                self.endOfStatement()
                self.state = 2389 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 2396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.state = 2391
                self.match(vbaParser.END)
                self.state = 2392
                self.wsc()
                self.state = 2393
                self.match(vbaParser.IF)
                pass
            elif token in [71]:
                self.state = 2395
                self.match(vbaParser.ENDIF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def ELSEIF(self):
            return self.getToken(vbaParser.ELSEIF, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_elseIfBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfBlock" ):
                listener.enterElseIfBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfBlock" ):
                listener.exitElseIfBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseIfBlock" ):
                return visitor.visitElseIfBlock(self)
            else:
                return visitor.visitChildren(self)




    def elseIfBlock(self):

        localctx = vbaParser.ElseIfBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_elseIfBlock)
        self._la = 0 # Token type
        try:
            self.state = 2438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2401
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,297,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2398
                        self.endOfStatement() 
                    self.state = 2403
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,297,self._ctx)

                self.state = 2404
                self.endOfLine()
                self.state = 2405
                self.match(vbaParser.ELSEIF)
                self.state = 2407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2406
                    self.wsc()


                self.state = 2409
                self.booleanExpression()
                self.state = 2411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2410
                    self.wsc()


                self.state = 2413
                self.match(vbaParser.THEN)
                self.state = 2415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
                if la_ == 1:
                    self.state = 2414
                    self.endOfLine()


                self.state = 2418
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                if la_ == 1:
                    self.state = 2417
                    self.statementBlock()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0):
                    self.state = 2420
                    self.endOfStatement()
                    self.state = 2425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2426
                self.match(vbaParser.ELSEIF)
                self.state = 2428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2427
                    self.wsc()


                self.state = 2430
                self.booleanExpression()
                self.state = 2432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2431
                    self.wsc()


                self.state = 2434
                self.match(vbaParser.THEN)
                self.state = 2436
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
                if la_ == 1:
                    self.state = 2435
                    self.statementBlock()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_elseBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseBlock" ):
                listener.enterElseBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseBlock" ):
                listener.exitElseBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseBlock" ):
                return visitor.visitElseBlock(self)
            else:
                return visitor.visitChildren(self)




    def elseBlock(self):

        localctx = vbaParser.ElseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_elseBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2440
            self.endOfLine()
            self.state = 2441
            self.match(vbaParser.ELSE)
            self.state = 2443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.state = 2442
                self.endOfLine()


            self.state = 2446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.state = 2445
                self.wsc()


            self.state = 2449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2448
                self.statementBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleLineIfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifWithNonEmptyThen(self):
            return self.getTypedRuleContext(vbaParser.IfWithNonEmptyThenContext,0)


        def ifWithEmptyThen(self):
            return self.getTypedRuleContext(vbaParser.IfWithEmptyThenContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_singleLineIfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleLineIfStatement" ):
                listener.enterSingleLineIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleLineIfStatement" ):
                listener.exitSingleLineIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleLineIfStatement" ):
                return visitor.visitSingleLineIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleLineIfStatement(self):

        localctx = vbaParser.SingleLineIfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_singleLineIfStatement)
        try:
            self.state = 2453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2451
                self.ifWithNonEmptyThen()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2452
                self.ifWithEmptyThen()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfWithNonEmptyThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def listOrLabel(self):
            return self.getTypedRuleContext(vbaParser.ListOrLabelContext,0)


        def singleLineElseClause(self):
            return self.getTypedRuleContext(vbaParser.SingleLineElseClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifWithNonEmptyThen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfWithNonEmptyThen" ):
                listener.enterIfWithNonEmptyThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfWithNonEmptyThen" ):
                listener.exitIfWithNonEmptyThen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfWithNonEmptyThen" ):
                return visitor.visitIfWithNonEmptyThen(self)
            else:
                return visitor.visitChildren(self)




    def ifWithNonEmptyThen(self):

        localctx = vbaParser.IfWithNonEmptyThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_ifWithNonEmptyThen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2455
            self.match(vbaParser.IF)
            self.state = 2456
            self.wsc()
            self.state = 2457
            self.booleanExpression()
            self.state = 2458
            self.wsc()
            self.state = 2459
            self.match(vbaParser.THEN)
            self.state = 2460
            self.wsc()
            self.state = 2461
            self.listOrLabel()
            self.state = 2465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 2462
                self.wsc()
                self.state = 2463
                self.singleLineElseClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfWithEmptyThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def singleLineElseClause(self):
            return self.getTypedRuleContext(vbaParser.SingleLineElseClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifWithEmptyThen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfWithEmptyThen" ):
                listener.enterIfWithEmptyThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfWithEmptyThen" ):
                listener.exitIfWithEmptyThen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfWithEmptyThen" ):
                return visitor.visitIfWithEmptyThen(self)
            else:
                return visitor.visitChildren(self)




    def ifWithEmptyThen(self):

        localctx = vbaParser.IfWithEmptyThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_ifWithEmptyThen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2467
            self.match(vbaParser.IF)
            self.state = 2468
            self.wsc()
            self.state = 2469
            self.booleanExpression()
            self.state = 2470
            self.wsc()
            self.state = 2471
            self.match(vbaParser.THEN)
            self.state = 2472
            self.wsc()
            self.state = 2473
            self.singleLineElseClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleLineElseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def listOrLabel(self):
            return self.getTypedRuleContext(vbaParser.ListOrLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_singleLineElseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleLineElseClause" ):
                listener.enterSingleLineElseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleLineElseClause" ):
                listener.exitSingleLineElseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleLineElseClause" ):
                return visitor.visitSingleLineElseClause(self)
            else:
                return visitor.visitChildren(self)




    def singleLineElseClause(self):

        localctx = vbaParser.SingleLineElseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_singleLineElseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2475
            self.match(vbaParser.ELSE)
            self.state = 2477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.state = 2476
                self.wsc()


            self.state = 2480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 2479
                self.listOrLabel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListOrLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COLON)
            else:
                return self.getToken(vbaParser.COLON, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def sameLineStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SameLineStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.SameLineStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_listOrLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListOrLabel" ):
                listener.enterListOrLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListOrLabel" ):
                listener.exitListOrLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListOrLabel" ):
                return visitor.visitListOrLabel(self)
            else:
                return visitor.visitChildren(self)




    def listOrLabel(self):

        localctx = vbaParser.ListOrLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_listOrLabel)
        self._la = 0 # Token type
        try:
            self.state = 2511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2482
                self.statementLabel()
                self.state = 2492
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,316,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2483
                        self.match(vbaParser.COLON)
                        self.state = 2485
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
                        if la_ == 1:
                            self.state = 2484
                            self.wsc()


                        self.state = 2488
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223248891620345066) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -4504138414783047677) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 26558198441617) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & 17596514565981) != 0) or _la==267:
                            self.state = 2487
                            self.sameLineStatement()

                 
                    self.state = 2494
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,316,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 2495
                    self.match(vbaParser.COLON)


                self.state = 2498
                self.sameLineStatement()
                self.state = 2508
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,320,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2499
                        self.match(vbaParser.COLON)
                        self.state = 2501
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
                        if la_ == 1:
                            self.state = 2500
                            self.wsc()


                        self.state = 2504
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223248891620345066) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -4504138414783047677) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 26558198441617) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & 17596514565981) != 0) or _la==267:
                            self.state = 2503
                            self.sameLineStatement()

                 
                    self.state = 2510
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,320,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SameLineStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileStatement(self):
            return self.getTypedRuleContext(vbaParser.FileStatementContext,0)


        def errorHandlingStatement(self):
            return self.getTypedRuleContext(vbaParser.ErrorHandlingStatementContext,0)


        def dataManipulationStatement(self):
            return self.getTypedRuleContext(vbaParser.DataManipulationStatementContext,0)


        def controlStatementExceptMultilineIf(self):
            return self.getTypedRuleContext(vbaParser.ControlStatementExceptMultilineIfContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_sameLineStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSameLineStatement" ):
                listener.enterSameLineStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSameLineStatement" ):
                listener.exitSameLineStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSameLineStatement" ):
                return visitor.visitSameLineStatement(self)
            else:
                return visitor.visitChildren(self)




    def sameLineStatement(self):

        localctx = vbaParser.SameLineStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_sameLineStatement)
        try:
            self.state = 2517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2513
                self.fileStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2514
                self.errorHandlingStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2515
                self.dataManipulationStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2516
                self.controlStatementExceptMultilineIf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectCaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.SELECT)
            else:
                return self.getToken(vbaParser.SELECT, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def selectExpression(self):
            return self.getTypedRuleContext(vbaParser.SelectExpressionContext,0)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def caseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.CaseClauseContext)
            else:
                return self.getTypedRuleContext(vbaParser.CaseClauseContext,i)


        def caseElseClause(self):
            return self.getTypedRuleContext(vbaParser.CaseElseClauseContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_selectCaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectCaseStatement" ):
                listener.enterSelectCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectCaseStatement" ):
                listener.exitSelectCaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectCaseStatement" ):
                return visitor.visitSelectCaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectCaseStatement(self):

        localctx = vbaParser.SelectCaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_selectCaseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2519
            self.match(vbaParser.SELECT)
            self.state = 2520
            self.wsc()
            self.state = 2521
            self.match(vbaParser.CASE)
            self.state = 2522
            self.wsc()
            self.state = 2523
            self.selectExpression()
            self.state = 2527
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,323,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2524
                    self.caseClause() 
                self.state = 2529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

            self.state = 2531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.state = 2530
                self.caseElseClause()


            self.state = 2534 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2533
                self.endOfStatement()
                self.state = 2536 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 2538
            self.match(vbaParser.END)
            self.state = 2539
            self.wsc()
            self.state = 2540
            self.match(vbaParser.SELECT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def rangeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.RangeClauseContext)
            else:
                return self.getTypedRuleContext(vbaParser.RangeClauseContext,i)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_caseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseClause" ):
                listener.enterCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseClause" ):
                listener.exitCaseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseClause" ):
                return visitor.visitCaseClause(self)
            else:
                return visitor.visitChildren(self)




    def caseClause(self):

        localctx = vbaParser.CaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_caseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2543 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2542
                self.endOfStatement()
                self.state = 2545 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 2547
            self.match(vbaParser.CASE)
            self.state = 2549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
            if la_ == 1:
                self.state = 2548
                self.wsc()


            self.state = 2551
            self.rangeClause()
            self.state = 2562
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,330,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2553
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 2552
                        self.wsc()


                    self.state = 2555
                    self.match(vbaParser.COMMA)
                    self.state = 2557
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
                    if la_ == 1:
                        self.state = 2556
                        self.wsc()


                    self.state = 2559
                    self.rangeClause() 
                self.state = 2564
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,330,self._ctx)

            self.state = 2566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 2565
                self.statementBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseElseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_caseElseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseElseClause" ):
                listener.enterCaseElseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseElseClause" ):
                listener.exitCaseElseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseElseClause" ):
                return visitor.visitCaseElseClause(self)
            else:
                return visitor.visitChildren(self)




    def caseElseClause(self):

        localctx = vbaParser.CaseElseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_caseElseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2569 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2568
                self.endOfStatement()
                self.state = 2571 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 2573
            self.match(vbaParser.CASE)
            self.state = 2574
            self.wsc()
            self.state = 2575
            self.match(vbaParser.ELSE)
            self.state = 2577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                self.state = 2576
                self.statementBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def startValue(self):
            return self.getTypedRuleContext(vbaParser.StartValueContext,0)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def endValue(self):
            return self.getTypedRuleContext(vbaParser.EndValueContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def comparisonOperator(self):
            return self.getTypedRuleContext(vbaParser.ComparisonOperatorContext,0)


        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_rangeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeClause" ):
                listener.enterRangeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeClause" ):
                listener.exitRangeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeClause" ):
                return visitor.visitRangeClause(self)
            else:
                return visitor.visitChildren(self)




    def rangeClause(self):

        localctx = vbaParser.RangeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_rangeClause)
        self._la = 0 # Token type
        try:
            self.state = 2597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2579
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2580
                self.startValue()
                self.state = 2582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2581
                    self.wsc()


                self.state = 2584
                self.match(vbaParser.TO)
                self.state = 2586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2585
                    self.wsc()


                self.state = 2588
                self.endValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2590
                    self.match(vbaParser.IS)


                self.state = 2593
                self.wsc()
                self.state = 2594
                self.comparisonOperator()
                self.state = 2595
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_selectExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpression" ):
                listener.enterSelectExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpression" ):
                listener.exitSelectExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectExpression" ):
                return visitor.visitSelectExpression(self)
            else:
                return visitor.visitChildren(self)




    def selectExpression(self):

        localctx = vbaParser.SelectExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_selectExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2599
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def LT(self):
            return self.getToken(vbaParser.LT, 0)

        def GT(self):
            return self.getToken(vbaParser.GT, 0)

        def LEQ(self):
            return self.getToken(vbaParser.LEQ, 0)

        def GEQ(self):
            return self.getToken(vbaParser.GEQ, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = vbaParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2601
            _la = self._input.LA(1)
            if not(_la==122 or ((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & 173) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(vbaParser.STOP, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_stopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopStatement" ):
                listener.enterStopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopStatement" ):
                listener.exitStopStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStopStatement" ):
                return visitor.visitStopStatement(self)
            else:
                return visitor.visitChildren(self)




    def stopStatement(self):

        localctx = vbaParser.StopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_stopStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2603
            self.match(vbaParser.STOP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GotoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def GO(self):
            return self.getToken(vbaParser.GO, 0)

        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_gotoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStatement" ):
                listener.enterGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStatement" ):
                listener.exitGotoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGotoStatement" ):
                return visitor.visitGotoStatement(self)
            else:
                return visitor.visitChildren(self)




    def gotoStatement(self):

        localctx = vbaParser.GotoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_gotoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2610
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [87]:
                self.state = 2605
                self.match(vbaParser.GO)
                self.state = 2606
                self.wsc()
                self.state = 2607
                self.match(vbaParser.TO)
                pass
            elif token in [89]:
                self.state = 2609
                self.match(vbaParser.GOTO)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2612
            self.wsc()
            self.state = 2613
            self.statementLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnGotoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementLabelList(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_onGotoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGotoStatement" ):
                listener.enterOnGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGotoStatement" ):
                listener.exitOnGotoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnGotoStatement" ):
                return visitor.visitOnGotoStatement(self)
            else:
                return visitor.visitChildren(self)




    def onGotoStatement(self):

        localctx = vbaParser.OnGotoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_onGotoStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2615
            self.match(vbaParser.ON)
            self.state = 2617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2616
                self.wsc()


            self.state = 2619
            self.expression(0)
            self.state = 2620
            self.match(vbaParser.GOTO)
            self.state = 2621
            self.wsc()
            self.state = 2622
            self.statementLabelList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GosubStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def GO(self):
            return self.getToken(vbaParser.GO, 0)

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_gosubStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGosubStatement" ):
                listener.enterGosubStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGosubStatement" ):
                listener.exitGosubStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGosubStatement" ):
                return visitor.visitGosubStatement(self)
            else:
                return visitor.visitChildren(self)




    def gosubStatement(self):

        localctx = vbaParser.GosubStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_gosubStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [87]:
                self.state = 2624
                self.match(vbaParser.GO)
                self.state = 2625
                self.wsc()
                self.state = 2626
                self.match(vbaParser.SUB)
                pass
            elif token in [88]:
                self.state = 2628
                self.match(vbaParser.GOSUB)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2631
            self.wsc()
            self.state = 2632
            self.statementLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(vbaParser.RETURN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = vbaParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2634
            self.match(vbaParser.RETURN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnGosubStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementLabelList(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_onGosubStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGosubStatement" ):
                listener.enterOnGosubStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGosubStatement" ):
                listener.exitOnGosubStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnGosubStatement" ):
                return visitor.visitOnGosubStatement(self)
            else:
                return visitor.visitChildren(self)




    def onGosubStatement(self):

        localctx = vbaParser.OnGosubStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_onGosubStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2636
            self.match(vbaParser.ON)
            self.state = 2638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2637
                self.wsc()


            self.state = 2640
            self.expression(0)
            self.state = 2642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2641
                self.wsc()


            self.state = 2644
            self.match(vbaParser.GOSUB)
            self.state = 2645
            self.wsc()
            self.state = 2646
            self.statementLabelList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitSubStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitSubStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitSubStatement" ):
                listener.enterExitSubStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitSubStatement" ):
                listener.exitExitSubStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitSubStatement" ):
                return visitor.visitExitSubStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitSubStatement(self):

        localctx = vbaParser.ExitSubStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_exitSubStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2648
            self.match(vbaParser.EXIT)
            self.state = 2649
            self.wsc()
            self.state = 2650
            self.match(vbaParser.SUB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitFunctionStatement" ):
                listener.enterExitFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitFunctionStatement" ):
                listener.exitExitFunctionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitFunctionStatement" ):
                return visitor.visitExitFunctionStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitFunctionStatement(self):

        localctx = vbaParser.ExitFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_exitFunctionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2652
            self.match(vbaParser.EXIT)
            self.state = 2653
            self.wsc()
            self.state = 2654
            self.match(vbaParser.FUNCTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitPropertyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def PROPERTY(self):
            return self.getToken(vbaParser.PROPERTY, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitPropertyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitPropertyStatement" ):
                listener.enterExitPropertyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitPropertyStatement" ):
                listener.exitExitPropertyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitPropertyStatement" ):
                return visitor.visitExitPropertyStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitPropertyStatement(self):

        localctx = vbaParser.ExitPropertyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_exitPropertyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2656
            self.match(vbaParser.EXIT)
            self.state = 2657
            self.wsc()
            self.state = 2658
            self.match(vbaParser.PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaiseeventStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISEEVENT(self):
            return self.getToken(vbaParser.RAISEEVENT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def eventArgumentList(self):
            return self.getTypedRuleContext(vbaParser.EventArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_raiseeventStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseeventStatement" ):
                listener.enterRaiseeventStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseeventStatement" ):
                listener.exitRaiseeventStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaiseeventStatement" ):
                return visitor.visitRaiseeventStatement(self)
            else:
                return visitor.visitChildren(self)




    def raiseeventStatement(self):

        localctx = vbaParser.RaiseeventStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_raiseeventStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2660
            self.match(vbaParser.RAISEEVENT)
            self.state = 2662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2661
                self.wsc()


            self.state = 2664
            self.ambiguousIdentifier()
            self.state = 2666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.state = 2665
                self.wsc()


            self.state = 2678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==236:
                self.state = 2668
                self.match(vbaParser.LPAREN)
                self.state = 2670
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
                if la_ == 1:
                    self.state = 2669
                    self.wsc()


                self.state = 2672
                self.eventArgumentList()
                self.state = 2674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2673
                    self.wsc()


                self.state = 2676
                self.match(vbaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EventArgumentContext)
            else:
                return self.getTypedRuleContext(vbaParser.EventArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_eventArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventArgumentList" ):
                listener.enterEventArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventArgumentList" ):
                listener.exitEventArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventArgumentList" ):
                return visitor.visitEventArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def eventArgumentList(self):

        localctx = vbaParser.EventArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_eventArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 122458039401238) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4521054086166054945) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 903294260321) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & 567471836758015753) != 0) or _la==267:
                self.state = 2680
                self.eventArgument()
                self.state = 2691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2682
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 2681
                            self.wsc()


                        self.state = 2684
                        self.match(vbaParser.COMMA)
                        self.state = 2686
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 2685
                            self.wsc()


                        self.state = 2688
                        self.eventArgument() 
                    self.state = 2693
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,350,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventArgument" ):
                listener.enterEventArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventArgument" ):
                listener.exitEventArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventArgument" ):
                return visitor.visitEventArgument(self)
            else:
                return visitor.visitChildren(self)




    def eventArgument(self):

        localctx = vbaParser.EventArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_eventArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2696
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WITH)
            else:
                return self.getToken(vbaParser.WITH, i)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_withStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithStatement" ):
                listener.enterWithStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithStatement" ):
                listener.exitWithStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithStatement" ):
                return visitor.visitWithStatement(self)
            else:
                return visitor.visitChildren(self)




    def withStatement(self):

        localctx = vbaParser.WithStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_withStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2698
            self.match(vbaParser.WITH)
            self.state = 2700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2699
                self.wsc()


            self.state = 2702
            self.expression(0)
            self.state = 2704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
            if la_ == 1:
                self.state = 2703
                self.statementBlock()


            self.state = 2707 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2706
                self.endOfStatement()
                self.state = 2709 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

            self.state = 2711
            self.match(vbaParser.END)
            self.state = 2712
            self.wsc()
            self.state = 2713
            self.match(vbaParser.WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataManipulationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.LocalVariableDeclarationContext,0)


        def staticVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.StaticVariableDeclarationContext,0)


        def localConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.LocalConstDeclarationContext,0)


        def redimStatement(self):
            return self.getTypedRuleContext(vbaParser.RedimStatementContext,0)


        def eraseStatement(self):
            return self.getTypedRuleContext(vbaParser.EraseStatementContext,0)


        def midStatement(self):
            return self.getTypedRuleContext(vbaParser.MidStatementContext,0)


        def rsetStatement(self):
            return self.getTypedRuleContext(vbaParser.RsetStatementContext,0)


        def lsetStatement(self):
            return self.getTypedRuleContext(vbaParser.LsetStatementContext,0)


        def letStatement(self):
            return self.getTypedRuleContext(vbaParser.LetStatementContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(vbaParser.SetStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dataManipulationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataManipulationStatement" ):
                listener.enterDataManipulationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataManipulationStatement" ):
                listener.exitDataManipulationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataManipulationStatement" ):
                return visitor.visitDataManipulationStatement(self)
            else:
                return visitor.visitChildren(self)




    def dataManipulationStatement(self):

        localctx = vbaParser.DataManipulationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_dataManipulationStatement)
        try:
            self.state = 2725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2715
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2716
                self.staticVariableDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2717
                self.localConstDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2718
                self.redimStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2719
                self.eraseStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2720
                self.midStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2721
                self.rsetStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2722
                self.lsetStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2723
                self.letStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2724
                self.setStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.VariableDeclarationListContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVariableDeclaration" ):
                return visitor.visitLocalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localVariableDeclaration(self):

        localctx = vbaParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_localVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2727
            self.match(vbaParser.DIM)
            self.state = 2729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
            if la_ == 1:
                self.state = 2728
                self.wsc()


            self.state = 2732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 2731
                self.match(vbaParser.SHARED)


            self.state = 2735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2734
                self.wsc()


            self.state = 2737
            self.variableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.VariableDeclarationListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_staticVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVariableDeclaration" ):
                listener.enterStaticVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVariableDeclaration" ):
                listener.exitStaticVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVariableDeclaration" ):
                return visitor.visitStaticVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def staticVariableDeclaration(self):

        localctx = vbaParser.StaticVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_staticVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2739
            self.match(vbaParser.STATIC)
            self.state = 2740
            self.wsc()
            self.state = 2741
            self.variableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ConstDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_localConstDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalConstDeclaration" ):
                listener.enterLocalConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalConstDeclaration" ):
                listener.exitLocalConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalConstDeclaration" ):
                return visitor.visitLocalConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localConstDeclaration(self):

        localctx = vbaParser.LocalConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_localConstDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2743
            self.constDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIM(self):
            return self.getToken(vbaParser.REDIM, 0)

        def redimDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.RedimDeclarationListContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PRESERVE(self):
            return self.getToken(vbaParser.PRESERVE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_redimStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimStatement" ):
                listener.enterRedimStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimStatement" ):
                listener.exitRedimStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimStatement" ):
                return visitor.visitRedimStatement(self)
            else:
                return visitor.visitChildren(self)




    def redimStatement(self):

        localctx = vbaParser.RedimStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_redimStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2745
            self.match(vbaParser.REDIM)
            self.state = 2749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.state = 2746
                self.wsc()
                self.state = 2747
                self.match(vbaParser.PRESERVE)


            self.state = 2752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2751
                self.wsc()


            self.state = 2754
            self.redimDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def redimVariableDcl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.RedimVariableDclContext)
            else:
                return self.getTypedRuleContext(vbaParser.RedimVariableDclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_redimDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimDeclarationList" ):
                listener.enterRedimDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimDeclarationList" ):
                listener.exitRedimDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimDeclarationList" ):
                return visitor.visitRedimDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def redimDeclarationList(self):

        localctx = vbaParser.RedimDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_redimDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2756
            self.redimVariableDcl()
            self.state = 2767
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,363,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2758
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 2757
                        self.wsc()


                    self.state = 2760
                    self.match(vbaParser.COMMA)
                    self.state = 2762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 2761
                        self.wsc()


                    self.state = 2764
                    self.redimVariableDcl() 
                self.state = 2769
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,363,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def redimTypedVariableDcl(self):
            return self.getTypedRuleContext(vbaParser.RedimTypedVariableDclContext,0)


        def redimUntypedDcl(self):
            return self.getTypedRuleContext(vbaParser.RedimUntypedDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_redimVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimVariableDcl" ):
                listener.enterRedimVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimVariableDcl" ):
                listener.exitRedimVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimVariableDcl" ):
                return visitor.visitRedimVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def redimVariableDcl(self):

        localctx = vbaParser.RedimVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_redimVariableDcl)
        try:
            self.state = 2772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2770
                self.redimTypedVariableDcl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2771
                self.redimUntypedDcl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimTypedVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def dynamicArrayDim(self):
            return self.getTypedRuleContext(vbaParser.DynamicArrayDimContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_redimTypedVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimTypedVariableDcl" ):
                listener.enterRedimTypedVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimTypedVariableDcl" ):
                listener.exitRedimTypedVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimTypedVariableDcl" ):
                return visitor.visitRedimTypedVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def redimTypedVariableDcl(self):

        localctx = vbaParser.RedimTypedVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_redimTypedVariableDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2774
            self.typedName()
            self.state = 2775
            self.dynamicArrayDim()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimUntypedDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def dynamicArrayClause(self):
            return self.getTypedRuleContext(vbaParser.DynamicArrayClauseContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_redimUntypedDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimUntypedDcl" ):
                listener.enterRedimUntypedDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimUntypedDcl" ):
                listener.exitRedimUntypedDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimUntypedDcl" ):
                return visitor.visitRedimUntypedDcl(self)
            else:
                return visitor.visitChildren(self)




    def redimUntypedDcl(self):

        localctx = vbaParser.RedimUntypedDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_redimUntypedDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2777
            self.untypedName()
            self.state = 2779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2778
                self.wsc()


            self.state = 2781
            self.dynamicArrayClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicArrayDimContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def dynamicBoundsList(self):
            return self.getTypedRuleContext(vbaParser.DynamicBoundsListContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicArrayDim

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicArrayDim" ):
                listener.enterDynamicArrayDim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicArrayDim" ):
                listener.exitDynamicArrayDim(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicArrayDim" ):
                return visitor.visitDynamicArrayDim(self)
            else:
                return visitor.visitChildren(self)




    def dynamicArrayDim(self):

        localctx = vbaParser.DynamicArrayDimContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_dynamicArrayDim)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2783
            self.match(vbaParser.LPAREN)
            self.state = 2785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2784
                self.wsc()


            self.state = 2787
            self.dynamicBoundsList()
            self.state = 2789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2788
                self.wsc()


            self.state = 2791
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicBoundsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicDimSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.DynamicDimSpecContext)
            else:
                return self.getTypedRuleContext(vbaParser.DynamicDimSpecContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicBoundsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicBoundsList" ):
                listener.enterDynamicBoundsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicBoundsList" ):
                listener.exitDynamicBoundsList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicBoundsList" ):
                return visitor.visitDynamicBoundsList(self)
            else:
                return visitor.visitChildren(self)




    def dynamicBoundsList(self):

        localctx = vbaParser.DynamicBoundsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_dynamicBoundsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2793
            self.dynamicDimSpec()
            self.state = 2804
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,370,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2795
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 2794
                        self.wsc()


                    self.state = 2797
                    self.match(vbaParser.COMMA)
                    self.state = 2799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 2798
                        self.wsc()


                    self.state = 2801
                    self.dynamicDimSpec() 
                self.state = 2806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,370,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicDimSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicUpperBound(self):
            return self.getTypedRuleContext(vbaParser.DynamicUpperBoundContext,0)


        def dynamicLowerBound(self):
            return self.getTypedRuleContext(vbaParser.DynamicLowerBoundContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicDimSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicDimSpec" ):
                listener.enterDynamicDimSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicDimSpec" ):
                listener.exitDynamicDimSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicDimSpec" ):
                return visitor.visitDynamicDimSpec(self)
            else:
                return visitor.visitChildren(self)




    def dynamicDimSpec(self):

        localctx = vbaParser.DynamicDimSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_dynamicDimSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 2807
                self.dynamicLowerBound()
                self.state = 2808
                self.wsc()


            self.state = 2812
            self.dynamicUpperBound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicLowerBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicLowerBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicLowerBound" ):
                listener.enterDynamicLowerBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicLowerBound" ):
                listener.exitDynamicLowerBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicLowerBound" ):
                return visitor.visitDynamicLowerBound(self)
            else:
                return visitor.visitChildren(self)




    def dynamicLowerBound(self):

        localctx = vbaParser.DynamicLowerBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_dynamicLowerBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2814
            self.integerExpression()
            self.state = 2816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2815
                self.wsc()


            self.state = 2818
            self.match(vbaParser.TO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicUpperBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicUpperBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicUpperBound" ):
                listener.enterDynamicUpperBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicUpperBound" ):
                listener.exitDynamicUpperBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicUpperBound" ):
                return visitor.visitDynamicUpperBound(self)
            else:
                return visitor.visitChildren(self)




    def dynamicUpperBound(self):

        localctx = vbaParser.DynamicUpperBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_dynamicUpperBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2820
            self.integerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicArrayClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicArrayDim(self):
            return self.getTypedRuleContext(vbaParser.DynamicArrayDimContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicArrayClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicArrayClause" ):
                listener.enterDynamicArrayClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicArrayClause" ):
                listener.exitDynamicArrayClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicArrayClause" ):
                return visitor.visitDynamicArrayClause(self)
            else:
                return visitor.visitChildren(self)




    def dynamicArrayClause(self):

        localctx = vbaParser.DynamicArrayClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_dynamicArrayClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2822
            self.dynamicArrayDim()
            self.state = 2824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
            if la_ == 1:
                self.state = 2823
                self.wsc()


            self.state = 2827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 2826
                self.asClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EraseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERASE(self):
            return self.getToken(vbaParser.ERASE, 0)

        def eraseList(self):
            return self.getTypedRuleContext(vbaParser.EraseListContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eraseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEraseStatement" ):
                listener.enterEraseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEraseStatement" ):
                listener.exitEraseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEraseStatement" ):
                return visitor.visitEraseStatement(self)
            else:
                return visitor.visitChildren(self)




    def eraseStatement(self):

        localctx = vbaParser.EraseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_eraseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2829
            self.match(vbaParser.ERASE)
            self.state = 2831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2830
                self.wsc()


            self.state = 2833
            self.eraseList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EraseListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eraseElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EraseElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EraseElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_eraseList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEraseList" ):
                listener.enterEraseList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEraseList" ):
                listener.exitEraseList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEraseList" ):
                return visitor.visitEraseList(self)
            else:
                return visitor.visitChildren(self)




    def eraseList(self):

        localctx = vbaParser.EraseListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_eraseList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2835
            self.eraseElement()
            self.state = 2846
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,378,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 2836
                        self.wsc()


                    self.state = 2839
                    self.match(vbaParser.COMMA)
                    self.state = 2841
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 2840
                        self.wsc()


                    self.state = 2843
                    self.eraseElement() 
                self.state = 2848
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EraseElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eraseElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEraseElement" ):
                listener.enterEraseElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEraseElement" ):
                listener.exitEraseElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEraseElement" ):
                return visitor.visitEraseElement(self)
            else:
                return visitor.visitChildren(self)




    def eraseElement(self):

        localctx = vbaParser.EraseElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_eraseElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2849
            self.lExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MidStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modeSpecifier(self):
            return self.getTypedRuleContext(vbaParser.ModeSpecifierContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(vbaParser.StringArgumentContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def startMid(self):
            return self.getTypedRuleContext(vbaParser.StartMidContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def length(self):
            return self.getTypedRuleContext(vbaParser.LengthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_midStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMidStatement" ):
                listener.enterMidStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMidStatement" ):
                listener.exitMidStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMidStatement" ):
                return visitor.visitMidStatement(self)
            else:
                return visitor.visitChildren(self)




    def midStatement(self):

        localctx = vbaParser.MidStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_midStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2851
            self.modeSpecifier()
            self.state = 2853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2852
                self.wsc()


            self.state = 2855
            self.match(vbaParser.LPAREN)
            self.state = 2857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2856
                self.wsc()


            self.state = 2859
            self.stringArgument()
            self.state = 2861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2860
                self.wsc()


            self.state = 2863
            self.match(vbaParser.COMMA)
            self.state = 2865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2864
                self.wsc()


            self.state = 2867
            self.startMid()
            self.state = 2869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2868
                self.wsc()


            self.state = 2876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==227:
                self.state = 2871
                self.match(vbaParser.COMMA)
                self.state = 2873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2872
                    self.wsc()


                self.state = 2875
                self.length()


            self.state = 2878
            self.match(vbaParser.RPAREN)
            self.state = 2880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2879
                self.wsc()


            self.state = 2882
            self.match(vbaParser.EQ)
            self.state = 2884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2883
                self.wsc()


            self.state = 2886
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MID(self):
            return self.getToken(vbaParser.MID, 0)

        def MIDB(self):
            return self.getToken(vbaParser.MIDB, 0)

        def MID_D(self):
            return self.getToken(vbaParser.MID_D, 0)

        def MIDB_D(self):
            return self.getToken(vbaParser.MIDB_D, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_modeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeSpecifier" ):
                listener.enterModeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeSpecifier" ):
                listener.exitModeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModeSpecifier" ):
                return visitor.visitModeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def modeSpecifier(self):

        localctx = vbaParser.ModeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_modeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2888
            _la = self._input.LA(1)
            if not(((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_stringArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringArgument" ):
                listener.enterStringArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringArgument" ):
                listener.exitStringArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringArgument" ):
                return visitor.visitStringArgument(self)
            else:
                return visitor.visitChildren(self)




    def stringArgument(self):

        localctx = vbaParser.StringArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_stringArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2890
            self.boundVariableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartMidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_startMid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartMid" ):
                listener.enterStartMid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartMid" ):
                listener.exitStartMid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartMid" ):
                return visitor.visitStartMid(self)
            else:
                return visitor.visitChildren(self)




    def startMid(self):

        localctx = vbaParser.StartMidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_startMid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2892
            self.integerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLength" ):
                listener.enterLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLength" ):
                listener.exitLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLength" ):
                return visitor.visitLength(self)
            else:
                return visitor.visitChildren(self)




    def length(self):

        localctx = vbaParser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_length)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2894
            self.integerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LsetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSET(self):
            return self.getToken(vbaParser.LSET, 0)

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_lsetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLsetStatement" ):
                listener.enterLsetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLsetStatement" ):
                listener.exitLsetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLsetStatement" ):
                return visitor.visitLsetStatement(self)
            else:
                return visitor.visitChildren(self)




    def lsetStatement(self):

        localctx = vbaParser.LsetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_lsetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2896
            self.match(vbaParser.LSET)
            self.state = 2898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2897
                self.wsc()


            self.state = 2900
            self.boundVariableExpression()
            self.state = 2902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2901
                self.wsc()


            self.state = 2904
            self.match(vbaParser.EQ)
            self.state = 2906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2905
                self.wsc()


            self.state = 2908
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RsetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RSET(self):
            return self.getToken(vbaParser.RSET, 0)

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_rsetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRsetStatement" ):
                listener.enterRsetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRsetStatement" ):
                listener.exitRsetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRsetStatement" ):
                return visitor.visitRsetStatement(self)
            else:
                return visitor.visitChildren(self)




    def rsetStatement(self):

        localctx = vbaParser.RsetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_rsetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2910
            self.match(vbaParser.RSET)
            self.state = 2912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2911
                self.wsc()


            self.state = 2914
            self.boundVariableExpression()
            self.state = 2916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2915
                self.wsc()


            self.state = 2918
            self.match(vbaParser.EQ)
            self.state = 2920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2919
                self.wsc()


            self.state = 2922
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_letStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStatement" ):
                listener.enterLetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStatement" ):
                listener.exitLetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStatement" ):
                return visitor.visitLetStatement(self)
            else:
                return visitor.visitChildren(self)




    def letStatement(self):

        localctx = vbaParser.LetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_letStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 2924
                self.match(vbaParser.LET)
                self.state = 2925
                self.wsc()


            self.state = 2928
            self.lExpression(0)
            self.state = 2930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2929
                self.wsc()


            self.state = 2932
            self.match(vbaParser.EQ)
            self.state = 2934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2933
                self.wsc()


            self.state = 2936
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_setStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatement" ):
                listener.enterSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatement" ):
                listener.exitSetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetStatement" ):
                return visitor.visitSetStatement(self)
            else:
                return visitor.visitChildren(self)




    def setStatement(self):

        localctx = vbaParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2938
            self.match(vbaParser.SET)
            self.state = 2939
            self.wsc()
            self.state = 2940
            self.lExpression(0)
            self.state = 2942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2941
                self.wsc()


            self.state = 2944
            self.match(vbaParser.EQ)
            self.state = 2946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2945
                self.wsc()


            self.state = 2948
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorHandlingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def onErrorStatement(self):
            return self.getTypedRuleContext(vbaParser.OnErrorStatementContext,0)


        def resumeStatement(self):
            return self.getTypedRuleContext(vbaParser.ResumeStatementContext,0)


        def errorStatement(self):
            return self.getTypedRuleContext(vbaParser.ErrorStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorHandlingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorHandlingStatement" ):
                listener.enterErrorHandlingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorHandlingStatement" ):
                listener.exitErrorHandlingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorHandlingStatement" ):
                return visitor.visitErrorHandlingStatement(self)
            else:
                return visitor.visitChildren(self)




    def errorHandlingStatement(self):

        localctx = vbaParser.ErrorHandlingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_errorHandlingStatement)
        try:
            self.state = 2953
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2950
                self.onErrorStatement()
                pass
            elif token in [148]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2951
                self.resumeStatement()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2952
                self.errorStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnErrorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def errorBehavior(self):
            return self.getTypedRuleContext(vbaParser.ErrorBehaviorContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_onErrorStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnErrorStatement" ):
                listener.enterOnErrorStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnErrorStatement" ):
                listener.exitOnErrorStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnErrorStatement" ):
                return visitor.visitOnErrorStatement(self)
            else:
                return visitor.visitChildren(self)




    def onErrorStatement(self):

        localctx = vbaParser.OnErrorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_onErrorStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2955
            self.match(vbaParser.ON)
            self.state = 2956
            self.wsc()
            self.state = 2957
            self.match(vbaParser.ERROR)
            self.state = 2959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 2958
                self.wsc()


            self.state = 2961
            self.errorBehavior()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorBehavior" ):
                listener.enterErrorBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorBehavior" ):
                listener.exitErrorBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorBehavior" ):
                return visitor.visitErrorBehavior(self)
            else:
                return visitor.visitChildren(self)




    def errorBehavior(self):

        localctx = vbaParser.ErrorBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_errorBehavior)
        self._la = 0 # Token type
        try:
            self.state = 2972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [148]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2963
                self.match(vbaParser.RESUME)
                self.state = 2964
                self.wsc()
                self.state = 2965
                self.match(vbaParser.NEXT)
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2967
                self.match(vbaParser.GOTO)
                self.state = 2969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 2968
                    self.wsc()


                self.state = 2971
                self.statementLabel()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResumeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_resumeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResumeStatement" ):
                listener.enterResumeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResumeStatement" ):
                listener.exitResumeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResumeStatement" ):
                return visitor.visitResumeStatement(self)
            else:
                return visitor.visitChildren(self)




    def resumeStatement(self):

        localctx = vbaParser.ResumeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_resumeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2974
            self.match(vbaParser.RESUME)
            self.state = 2976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
            if la_ == 1:
                self.state = 2975
                self.wsc()


            self.state = 2980
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121]:
                self.state = 2978
                self.match(vbaParser.NEXT)
                pass
            elif token in [2, 4, 8, 11, 12, 13, 27, 28, 31, 32, 33, 38, 76, 87, 99, 104, 106, 115, 116, 117, 118, 120, 126, 132, 137, 142, 144, 147, 160, 165, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 255, 267]:
                self.state = 2979
                self.statementLabel()
                pass
            elif token in [69, 258, 259, 260, 261, 263, 265]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def errorNumber(self):
            return self.getTypedRuleContext(vbaParser.ErrorNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorStatement" ):
                listener.enterErrorStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorStatement" ):
                listener.exitErrorStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorStatement" ):
                return visitor.visitErrorStatement(self)
            else:
                return visitor.visitChildren(self)




    def errorStatement(self):

        localctx = vbaParser.ErrorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_errorStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2982
            self.match(vbaParser.ERROR)
            self.state = 2983
            self.wsc()
            self.state = 2984
            self.errorNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorNumber" ):
                listener.enterErrorNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorNumber" ):
                listener.exitErrorNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorNumber" ):
                return visitor.visitErrorNumber(self)
            else:
                return visitor.visitChildren(self)




    def errorNumber(self):

        localctx = vbaParser.ErrorNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_errorNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2986
            self.integerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openStatement(self):
            return self.getTypedRuleContext(vbaParser.OpenStatementContext,0)


        def closeStatement(self):
            return self.getTypedRuleContext(vbaParser.CloseStatementContext,0)


        def seekStatement(self):
            return self.getTypedRuleContext(vbaParser.SeekStatementContext,0)


        def lockStatement(self):
            return self.getTypedRuleContext(vbaParser.LockStatementContext,0)


        def unlockStatement(self):
            return self.getTypedRuleContext(vbaParser.UnlockStatementContext,0)


        def lineInputStatement(self):
            return self.getTypedRuleContext(vbaParser.LineInputStatementContext,0)


        def widthStatement(self):
            return self.getTypedRuleContext(vbaParser.WidthStatementContext,0)


        def printStatement(self):
            return self.getTypedRuleContext(vbaParser.PrintStatementContext,0)


        def writeStatement(self):
            return self.getTypedRuleContext(vbaParser.WriteStatementContext,0)


        def inputStatement(self):
            return self.getTypedRuleContext(vbaParser.InputStatementContext,0)


        def putStatement(self):
            return self.getTypedRuleContext(vbaParser.PutStatementContext,0)


        def getStatement(self):
            return self.getTypedRuleContext(vbaParser.GetStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_fileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileStatement" ):
                listener.enterFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileStatement" ):
                listener.exitFileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileStatement" ):
                return visitor.visitFileStatement(self)
            else:
                return visitor.visitChildren(self)




    def fileStatement(self):

        localctx = vbaParser.FileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_fileStatement)
        try:
            self.state = 3000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2988
                self.openStatement()
                pass
            elif token in [37, 147]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2989
                self.closeStatement()
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2990
                self.seekStatement()
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2991
                self.lockStatement()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2992
                self.unlockStatement()
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2993
                self.lineInputStatement()
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2994
                self.widthStatement()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2995
                self.printStatement()
                pass
            elif token in [205]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2996
                self.writeStatement()
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2997
                self.inputStatement()
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2998
                self.putStatement()
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2999
                self.getStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(vbaParser.OPEN, 0)

        def pathName(self):
            return self.getTypedRuleContext(vbaParser.PathNameContext,0)


        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def modeClause(self):
            return self.getTypedRuleContext(vbaParser.ModeClauseContext,0)


        def accessClause(self):
            return self.getTypedRuleContext(vbaParser.AccessClauseContext,0)


        def lock(self):
            return self.getTypedRuleContext(vbaParser.LockContext,0)


        def lenClause(self):
            return self.getTypedRuleContext(vbaParser.LenClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_openStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenStatement" ):
                listener.enterOpenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenStatement" ):
                listener.exitOpenStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenStatement" ):
                return visitor.visitOpenStatement(self)
            else:
                return visitor.visitChildren(self)




    def openStatement(self):

        localctx = vbaParser.OpenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_openStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3002
            self.match(vbaParser.OPEN)
            self.state = 3004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3003
                self.wsc()


            self.state = 3006
            self.pathName()
            self.state = 3008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
            if la_ == 1:
                self.state = 3007
                self.wsc()


            self.state = 3011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 3010
                self.modeClause()


            self.state = 3014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,409,self._ctx)
            if la_ == 1:
                self.state = 3013
                self.wsc()


            self.state = 3017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 3016
                self.accessClause()


            self.state = 3020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
            if la_ == 1:
                self.state = 3019
                self.wsc()


            self.state = 3023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108 or _la==156:
                self.state = 3022
                self.lock()


            self.state = 3026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3025
                self.wsc()


            self.state = 3028
            self.match(vbaParser.AS)
            self.state = 3030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3029
                self.wsc()


            self.state = 3032
            self.fileNumber()
            self.state = 3034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.state = 3033
                self.wsc()


            self.state = 3037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 3036
                self.lenClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_pathName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathName" ):
                listener.enterPathName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathName" ):
                listener.exitPathName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPathName" ):
                return visitor.visitPathName(self)
            else:
                return visitor.visitChildren(self)




    def pathName(self):

        localctx = vbaParser.PathNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_pathName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3039
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def modeOpt(self):
            return self.getTypedRuleContext(vbaParser.ModeOptContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_modeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeClause" ):
                listener.enterModeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeClause" ):
                listener.exitModeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModeClause" ):
                return visitor.visitModeClause(self)
            else:
                return visitor.visitChildren(self)




    def modeClause(self):

        localctx = vbaParser.ModeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_modeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3041
            self.match(vbaParser.FOR)
            self.state = 3043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3042
                self.wsc()


            self.state = 3045
            self.modeOpt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModeOptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APPEND(self):
            return self.getToken(vbaParser.APPEND, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(vbaParser.OUTPUT, 0)

        def RANDOM(self):
            return self.getToken(vbaParser.RANDOM, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_modeOpt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeOpt" ):
                listener.enterModeOpt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeOpt" ):
                listener.exitModeOpt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModeOpt" ):
                return visitor.visitModeOpt(self)
            else:
                return visitor.visitChildren(self)




    def modeOpt(self):

        localctx = vbaParser.ModeOptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_modeOpt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3047
            _la = self._input.LA(1)
            if not(_la==8 or _la==13 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 281749854617601) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(vbaParser.ACCESS, 0)

        def access(self):
            return self.getTypedRuleContext(vbaParser.AccessContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_accessClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessClause" ):
                listener.enterAccessClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessClause" ):
                listener.exitAccessClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessClause" ):
                return visitor.visitAccessClause(self)
            else:
                return visitor.visitChildren(self)




    def accessClause(self):

        localctx = vbaParser.AccessClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_accessClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3049
            self.match(vbaParser.ACCESS)
            self.state = 3050
            self.access()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccess" ):
                listener.enterAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccess" ):
                listener.exitAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccess" ):
                return visitor.visitAccess(self)
            else:
                return visitor.visitChildren(self)




    def access(self):

        localctx = vbaParser.AccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_access)
        try:
            self.state = 3058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3052
                self.match(vbaParser.READ)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3053
                self.match(vbaParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3054
                self.match(vbaParser.READ)
                self.state = 3055
                self.wsc()
                self.state = 3056
                self.match(vbaParser.WRITE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock" ):
                listener.enterLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock" ):
                listener.exitLock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock" ):
                return visitor.visitLock(self)
            else:
                return visitor.visitChildren(self)




    def lock(self):

        localctx = vbaParser.LockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_lock)
        try:
            self.state = 3075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3060
                self.match(vbaParser.SHARED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3061
                self.match(vbaParser.LOCK)
                self.state = 3062
                self.wsc()
                self.state = 3063
                self.match(vbaParser.READ)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3065
                self.match(vbaParser.LOCK)
                self.state = 3066
                self.wsc()
                self.state = 3067
                self.match(vbaParser.WRITE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3069
                self.match(vbaParser.LOCK)
                self.state = 3070
                self.wsc()
                self.state = 3071
                self.match(vbaParser.READ)
                self.state = 3072
                self.wsc()
                self.state = 3073
                self.match(vbaParser.WRITE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEN(self):
            return self.getToken(vbaParser.LEN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def recLength(self):
            return self.getTypedRuleContext(vbaParser.RecLengthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLenClause" ):
                listener.enterLenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLenClause" ):
                listener.exitLenClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLenClause" ):
                return visitor.visitLenClause(self)
            else:
                return visitor.visitChildren(self)




    def lenClause(self):

        localctx = vbaParser.LenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_lenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3077
            self.match(vbaParser.LEN)
            self.state = 3078
            self.wsc()
            self.state = 3079
            self.match(vbaParser.EQ)
            self.state = 3080
            self.wsc()
            self.state = 3081
            self.recLength()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_recLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecLength" ):
                listener.enterRecLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecLength" ):
                listener.exitRecLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecLength" ):
                return visitor.visitRecLength(self)
            else:
                return visitor.visitChildren(self)




    def recLength(self):

        localctx = vbaParser.RecLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_recLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3083
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def unmarkedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.UnmarkedFileNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_fileNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileNumber" ):
                listener.enterFileNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileNumber" ):
                listener.exitFileNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileNumber" ):
                return visitor.visitFileNumber(self)
            else:
                return visitor.visitChildren(self)




    def fileNumber(self):

        localctx = vbaParser.FileNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_fileNumber)
        try:
            self.state = 3087
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [234]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3085
                self.markedFileNumber()
                pass
            elif token in [1, 2, 4, 8, 9, 11, 12, 13, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 46, 65, 70, 76, 80, 81, 87, 94, 95, 96, 99, 100, 101, 102, 104, 106, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 132, 137, 138, 142, 144, 147, 151, 155, 160, 162, 165, 168, 170, 171, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 231, 236, 238, 243, 252, 253, 254, 255, 256, 257, 267]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3086
                self.unmarkedFileNumber()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MarkedFileNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(vbaParser.HASH, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_markedFileNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMarkedFileNumber" ):
                listener.enterMarkedFileNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMarkedFileNumber" ):
                listener.exitMarkedFileNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMarkedFileNumber" ):
                return visitor.visitMarkedFileNumber(self)
            else:
                return visitor.visitChildren(self)




    def markedFileNumber(self):

        localctx = vbaParser.MarkedFileNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_markedFileNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3089
            self.match(vbaParser.HASH)
            self.state = 3090
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnmarkedFileNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unmarkedFileNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnmarkedFileNumber" ):
                listener.enterUnmarkedFileNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnmarkedFileNumber" ):
                listener.exitUnmarkedFileNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnmarkedFileNumber" ):
                return visitor.visitUnmarkedFileNumber(self)
            else:
                return visitor.visitChildren(self)




    def unmarkedFileNumber(self):

        localctx = vbaParser.UnmarkedFileNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_unmarkedFileNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3092
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(vbaParser.RESET, 0)

        def CLOSE(self):
            return self.getToken(vbaParser.CLOSE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def fileNumberList(self):
            return self.getTypedRuleContext(vbaParser.FileNumberListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_closeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseStatement" ):
                listener.enterCloseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseStatement" ):
                listener.exitCloseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloseStatement" ):
                return visitor.visitCloseStatement(self)
            else:
                return visitor.visitChildren(self)




    def closeStatement(self):

        localctx = vbaParser.CloseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_closeStatement)
        self._la = 0 # Token type
        try:
            self.state = 3102
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [147]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3094
                self.match(vbaParser.RESET)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3095
                self.match(vbaParser.CLOSE)
                self.state = 3097
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
                if la_ == 1:
                    self.state = 3096
                    self.wsc()


                self.state = 3100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 122458039401238) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4521054086166054945) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 903294260321) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & 567471871117754121) != 0) or _la==267:
                    self.state = 3099
                    self.fileNumberList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNumberListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileNumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.FileNumberContext)
            else:
                return self.getTypedRuleContext(vbaParser.FileNumberContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_fileNumberList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileNumberList" ):
                listener.enterFileNumberList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileNumberList" ):
                listener.exitFileNumberList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileNumberList" ):
                return visitor.visitFileNumberList(self)
            else:
                return visitor.visitChildren(self)




    def fileNumberList(self):

        localctx = vbaParser.FileNumberListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_fileNumberList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3104
            self.fileNumber()
            self.state = 3115
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,426,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 3105
                        self.wsc()


                    self.state = 3108
                    self.match(vbaParser.COMMA)
                    self.state = 3110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 3109
                        self.wsc()


                    self.state = 3112
                    self.fileNumber() 
                self.state = 3117
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,426,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeekStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEEK(self):
            return self.getToken(vbaParser.SEEK, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def position(self):
            return self.getTypedRuleContext(vbaParser.PositionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_seekStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeekStatement" ):
                listener.enterSeekStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeekStatement" ):
                listener.exitSeekStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeekStatement" ):
                return visitor.visitSeekStatement(self)
            else:
                return visitor.visitChildren(self)




    def seekStatement(self):

        localctx = vbaParser.SeekStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_seekStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3118
            self.match(vbaParser.SEEK)
            self.state = 3119
            self.wsc()
            self.state = 3120
            self.fileNumber()
            self.state = 3122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3121
                self.wsc()


            self.state = 3124
            self.match(vbaParser.COMMA)
            self.state = 3126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3125
                self.wsc()


            self.state = 3128
            self.position()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_position

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)




    def position(self):

        localctx = vbaParser.PositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_position)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3130
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def recordRange(self):
            return self.getTypedRuleContext(vbaParser.RecordRangeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStatement" ):
                listener.enterLockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStatement" ):
                listener.exitLockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockStatement" ):
                return visitor.visitLockStatement(self)
            else:
                return visitor.visitChildren(self)




    def lockStatement(self):

        localctx = vbaParser.LockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_lockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3132
            self.match(vbaParser.LOCK)
            self.state = 3133
            self.wsc()
            self.state = 3134
            self.fileNumber()

            self.state = 3136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3135
                self.wsc()


            self.state = 3138
            self.match(vbaParser.COMMA)
            self.state = 3140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.state = 3139
                self.wsc()


            self.state = 3142
            self.recordRange()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startRecordNumber(self):
            return self.getTypedRuleContext(vbaParser.StartRecordNumberContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def endRecordNumber(self):
            return self.getTypedRuleContext(vbaParser.EndRecordNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_recordRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordRange" ):
                listener.enterRecordRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordRange" ):
                listener.exitRecordRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordRange" ):
                return visitor.visitRecordRange(self)
            else:
                return visitor.visitChildren(self)




    def recordRange(self):

        localctx = vbaParser.RecordRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_recordRange)
        self._la = 0 # Token type
        try:
            self.state = 3153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3144
                self.startRecordNumber()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 122458039401238) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4521054086166054945) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 903294260321) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & 567471836758015753) != 0) or _la==267:
                    self.state = 3145
                    self.startRecordNumber()


                self.state = 3148
                self.wsc()
                self.state = 3149
                self.match(vbaParser.TO)
                self.state = 3150
                self.wsc()
                self.state = 3151
                self.endRecordNumber()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartRecordNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_startRecordNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRecordNumber" ):
                listener.enterStartRecordNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRecordNumber" ):
                listener.exitStartRecordNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartRecordNumber" ):
                return visitor.visitStartRecordNumber(self)
            else:
                return visitor.visitChildren(self)




    def startRecordNumber(self):

        localctx = vbaParser.StartRecordNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_startRecordNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3155
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndRecordNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_endRecordNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndRecordNumber" ):
                listener.enterEndRecordNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndRecordNumber" ):
                listener.exitEndRecordNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndRecordNumber" ):
                return visitor.visitEndRecordNumber(self)
            else:
                return visitor.visitChildren(self)




    def endRecordNumber(self):

        localctx = vbaParser.EndRecordNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_endRecordNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3157
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOCK(self):
            return self.getToken(vbaParser.UNLOCK, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def recordRange(self):
            return self.getTypedRuleContext(vbaParser.RecordRangeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unlockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockStatement" ):
                listener.enterUnlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockStatement" ):
                listener.exitUnlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnlockStatement" ):
                return visitor.visitUnlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def unlockStatement(self):

        localctx = vbaParser.UnlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_unlockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3159
            self.match(vbaParser.UNLOCK)
            self.state = 3160
            self.wsc()
            self.state = 3161
            self.fileNumber()
            self.state = 3170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
            if la_ == 1:
                self.state = 3163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 3162
                    self.wsc()


                self.state = 3165
                self.match(vbaParser.COMMA)
                self.state = 3167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
                if la_ == 1:
                    self.state = 3166
                    self.wsc()


                self.state = 3169
                self.recordRange()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineInputStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE(self):
            return self.getToken(vbaParser.LINE, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def variableName(self):
            return self.getTypedRuleContext(vbaParser.VariableNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lineInputStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineInputStatement" ):
                listener.enterLineInputStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineInputStatement" ):
                listener.exitLineInputStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineInputStatement" ):
                return visitor.visitLineInputStatement(self)
            else:
                return visitor.visitChildren(self)




    def lineInputStatement(self):

        localctx = vbaParser.LineInputStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_lineInputStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3172
            self.match(vbaParser.LINE)
            self.state = 3173
            self.wsc()
            self.state = 3174
            self.match(vbaParser.INPUT)
            self.state = 3175
            self.wsc()
            self.state = 3176
            self.markedFileNumber()
            self.state = 3178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3177
                self.wsc()


            self.state = 3180
            self.match(vbaParser.COMMA)
            self.state = 3182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3181
                self.wsc()


            self.state = 3184
            self.variableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableExpression(self):
            return self.getTypedRuleContext(vbaParser.VariableExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableName" ):
                listener.enterVariableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableName" ):
                listener.exitVariableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableName" ):
                return visitor.visitVariableName(self)
            else:
                return visitor.visitChildren(self)




    def variableName(self):

        localctx = vbaParser.VariableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_variableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3186
            self.variableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WidthStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WIDTH(self):
            return self.getToken(vbaParser.WIDTH, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def lineWidth(self):
            return self.getTypedRuleContext(vbaParser.LineWidthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_widthStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWidthStatement" ):
                listener.enterWidthStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWidthStatement" ):
                listener.exitWidthStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWidthStatement" ):
                return visitor.visitWidthStatement(self)
            else:
                return visitor.visitChildren(self)




    def widthStatement(self):

        localctx = vbaParser.WidthStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_widthStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3188
            self.match(vbaParser.WIDTH)
            self.state = 3189
            self.wsc()
            self.state = 3190
            self.markedFileNumber()
            self.state = 3192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3191
                self.wsc()


            self.state = 3194
            self.match(vbaParser.COMMA)
            self.state = 3196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3195
                self.wsc()


            self.state = 3198
            self.lineWidth()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineWidthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lineWidth

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineWidth" ):
                listener.enterLineWidth(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineWidth" ):
                listener.exitLineWidth(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineWidth" ):
                return visitor.visitLineWidth(self)
            else:
                return visitor.visitChildren(self)




    def lineWidth(self):

        localctx = vbaParser.LineWidthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_lineWidth)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3200
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(vbaParser.PRINT, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def outputList(self):
            return self.getTypedRuleContext(vbaParser.OutputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_printStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStatement" ):
                listener.enterPrintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStatement" ):
                listener.exitPrintStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintStatement" ):
                return visitor.visitPrintStatement(self)
            else:
                return visitor.visitChildren(self)




    def printStatement(self):

        localctx = vbaParser.PrintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_printStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3202
            self.match(vbaParser.PRINT)
            self.state = 3203
            self.wsc()
            self.state = 3204
            self.markedFileNumber()
            self.state = 3206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3205
                self.wsc()


            self.state = 3208
            self.match(vbaParser.COMMA)
            self.state = 3210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.state = 3209
                self.wsc()


            self.state = 3213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 122458039401238) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4521054086166054945) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 907656336481) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & 568034786979872521) != 0) or _la==267:
                self.state = 3212
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def outputItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.OutputItemContext)
            else:
                return self.getTypedRuleContext(vbaParser.OutputItemContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_outputList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputList" ):
                listener.enterOutputList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputList" ):
                listener.exitOutputList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputList" ):
                return visitor.visitOutputList(self)
            else:
                return visitor.visitChildren(self)




    def outputList(self):

        localctx = vbaParser.OutputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_outputList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3216 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3215
                self.outputItem()
                self.state = 3218 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 122458039401238) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4521054086166054945) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 907656336481) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & 568034786979872521) != 0) or _la==267):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def outputClause(self):
            return self.getTypedRuleContext(vbaParser.OutputClauseContext,0)


        def charPosition(self):
            return self.getTypedRuleContext(vbaParser.CharPositionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_outputItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputItem" ):
                listener.enterOutputItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputItem" ):
                listener.exitOutputItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputItem" ):
                return visitor.visitOutputItem(self)
            else:
                return visitor.visitChildren(self)




    def outputItem(self):

        localctx = vbaParser.OutputItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_outputItem)
        try:
            self.state = 3225
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 4, 8, 9, 11, 12, 13, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 46, 65, 70, 76, 80, 81, 87, 94, 95, 96, 99, 100, 101, 102, 104, 106, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 132, 137, 138, 142, 144, 147, 151, 155, 158, 160, 162, 164, 165, 168, 170, 171, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 231, 236, 238, 243, 252, 253, 254, 255, 256, 257, 267]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3220
                self.outputClause()
                self.state = 3222
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
                if la_ == 1:
                    self.state = 3221
                    self.charPosition()


                pass
            elif token in [227, 248]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3224
                self.charPosition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spcClause(self):
            return self.getTypedRuleContext(vbaParser.SpcClauseContext,0)


        def tabClause(self):
            return self.getTypedRuleContext(vbaParser.TabClauseContext,0)


        def outputExpression(self):
            return self.getTypedRuleContext(vbaParser.OutputExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_outputClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputClause" ):
                listener.enterOutputClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputClause" ):
                listener.exitOutputClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputClause" ):
                return visitor.visitOutputClause(self)
            else:
                return visitor.visitChildren(self)




    def outputClause(self):

        localctx = vbaParser.OutputClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_outputClause)
        try:
            self.state = 3230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [158]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3227
                self.spcClause()
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3228
                self.tabClause()
                pass
            elif token in [1, 2, 4, 8, 9, 11, 12, 13, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 46, 65, 70, 76, 80, 81, 87, 94, 95, 96, 99, 100, 101, 102, 104, 106, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 132, 137, 138, 142, 144, 147, 151, 155, 160, 162, 165, 168, 170, 171, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 231, 236, 238, 243, 252, 253, 254, 255, 256, 257, 267]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3229
                self.outputExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(vbaParser.SEMICOLON, 0)

        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_charPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharPosition" ):
                listener.enterCharPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharPosition" ):
                listener.exitCharPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharPosition" ):
                return visitor.visitCharPosition(self)
            else:
                return visitor.visitChildren(self)




    def charPosition(self):

        localctx = vbaParser.CharPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_charPosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3232
            _la = self._input.LA(1)
            if not(_la==227 or _la==248):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_outputExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputExpression" ):
                listener.enterOutputExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputExpression" ):
                listener.exitOutputExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputExpression" ):
                return visitor.visitOutputExpression(self)
            else:
                return visitor.visitChildren(self)




    def outputExpression(self):

        localctx = vbaParser.OutputExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_outputExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3234
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpcClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPC(self):
            return self.getToken(vbaParser.SPC, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def spcNumber(self):
            return self.getTypedRuleContext(vbaParser.SpcNumberContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_spcClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpcClause" ):
                listener.enterSpcClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpcClause" ):
                listener.exitSpcClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpcClause" ):
                return visitor.visitSpcClause(self)
            else:
                return visitor.visitChildren(self)




    def spcClause(self):

        localctx = vbaParser.SpcClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_spcClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3236
            self.match(vbaParser.SPC)
            self.state = 3237
            self.wsc()
            self.state = 3238
            self.match(vbaParser.LPAREN)
            self.state = 3240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3239
                self.wsc()


            self.state = 3242
            self.spcNumber()
            self.state = 3244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3243
                self.wsc()


            self.state = 3246
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpcNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_spcNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpcNumber" ):
                listener.enterSpcNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpcNumber" ):
                listener.exitSpcNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpcNumber" ):
                return visitor.visitSpcNumber(self)
            else:
                return visitor.visitChildren(self)




    def spcNumber(self):

        localctx = vbaParser.SpcNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_spcNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3248
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAB(self):
            return self.getToken(vbaParser.TAB, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def tabNumber(self):
            return self.getTypedRuleContext(vbaParser.TabNumberContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_tabClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabClause" ):
                listener.enterTabClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabClause" ):
                listener.exitTabClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabClause" ):
                return visitor.visitTabClause(self)
            else:
                return visitor.visitChildren(self)




    def tabClause(self):

        localctx = vbaParser.TabClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_tabClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3250
            self.match(vbaParser.TAB)
            self.state = 3251
            self.wsc()
            self.state = 3252
            self.match(vbaParser.LPAREN)
            self.state = 3254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3253
                self.wsc()


            self.state = 3256
            self.tabNumber()
            self.state = 3258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3257
                self.wsc()


            self.state = 3260
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_tabNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabNumber" ):
                listener.enterTabNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabNumber" ):
                listener.exitTabNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabNumber" ):
                return visitor.visitTabNumber(self)
            else:
                return visitor.visitChildren(self)




    def tabNumber(self):

        localctx = vbaParser.TabNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_tabNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3262
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def outputList(self):
            return self.getTypedRuleContext(vbaParser.OutputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_writeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteStatement" ):
                listener.enterWriteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteStatement" ):
                listener.exitWriteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWriteStatement" ):
                return visitor.visitWriteStatement(self)
            else:
                return visitor.visitChildren(self)




    def writeStatement(self):

        localctx = vbaParser.WriteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_writeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3264
            self.match(vbaParser.WRITE)
            self.state = 3265
            self.wsc()
            self.state = 3266
            self.markedFileNumber()
            self.state = 3268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3267
                self.wsc()


            self.state = 3270
            self.match(vbaParser.COMMA)
            self.state = 3272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
            if la_ == 1:
                self.state = 3271
                self.wsc()


            self.state = 3275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 122458039401238) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4521054086166054945) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 907656336481) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & 568034786979872521) != 0) or _la==267:
                self.state = 3274
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def inputList(self):
            return self.getTypedRuleContext(vbaParser.InputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_inputStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputStatement" ):
                listener.enterInputStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputStatement" ):
                listener.exitInputStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputStatement" ):
                return visitor.visitInputStatement(self)
            else:
                return visitor.visitChildren(self)




    def inputStatement(self):

        localctx = vbaParser.InputStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_inputStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3277
            self.match(vbaParser.INPUT)
            self.state = 3278
            self.wsc()
            self.state = 3279
            self.markedFileNumber()
            self.state = 3281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3280
                self.wsc()


            self.state = 3283
            self.match(vbaParser.COMMA)
            self.state = 3285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3284
                self.wsc()


            self.state = 3287
            self.inputList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inputVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.InputVariableContext)
            else:
                return self.getTypedRuleContext(vbaParser.InputVariableContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_inputList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputList" ):
                listener.enterInputList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputList" ):
                listener.exitInputList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputList" ):
                return visitor.visitInputList(self)
            else:
                return visitor.visitChildren(self)




    def inputList(self):

        localctx = vbaParser.InputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_inputList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3289
            self.inputVariable()
            self.state = 3300
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,458,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3291
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 3290
                        self.wsc()


                    self.state = 3293
                    self.match(vbaParser.COMMA)
                    self.state = 3295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 3294
                        self.wsc()


                    self.state = 3297
                    self.inputVariable() 
                self.state = 3302
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,458,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_inputVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputVariable" ):
                listener.enterInputVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputVariable" ):
                listener.exitInputVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputVariable" ):
                return visitor.visitInputVariable(self)
            else:
                return visitor.visitChildren(self)




    def inputVariable(self):

        localctx = vbaParser.InputVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_inputVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3303
            self.boundVariableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PutStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUT(self):
            return self.getToken(vbaParser.PUT, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def data(self):
            return self.getTypedRuleContext(vbaParser.DataContext,0)


        def recordNumber(self):
            return self.getTypedRuleContext(vbaParser.RecordNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_putStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutStatement" ):
                listener.enterPutStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutStatement" ):
                listener.exitPutStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPutStatement" ):
                return visitor.visitPutStatement(self)
            else:
                return visitor.visitChildren(self)




    def putStatement(self):

        localctx = vbaParser.PutStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_putStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3305
            self.match(vbaParser.PUT)
            self.state = 3306
            self.wsc()
            self.state = 3307
            self.fileNumber()
            self.state = 3309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3308
                self.wsc()


            self.state = 3311
            self.match(vbaParser.COMMA)
            self.state = 3313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                self.state = 3312
                self.wsc()


            self.state = 3316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 122458039401238) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4521054086166054945) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 903294260321) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & 567471836758015753) != 0) or _la==267:
                self.state = 3315
                self.recordNumber()


            self.state = 3319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3318
                self.wsc()


            self.state = 3321
            self.match(vbaParser.COMMA)
            self.state = 3322
            self.data()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_recordNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordNumber" ):
                listener.enterRecordNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordNumber" ):
                listener.exitRecordNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordNumber" ):
                return visitor.visitRecordNumber(self)
            else:
                return visitor.visitChildren(self)




    def recordNumber(self):

        localctx = vbaParser.RecordNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_recordNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3324
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData" ):
                listener.enterData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData" ):
                listener.exitData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData" ):
                return visitor.visitData(self)
            else:
                return visitor.visitChildren(self)




    def data(self):

        localctx = vbaParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_data)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3326
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def variable(self):
            return self.getTypedRuleContext(vbaParser.VariableContext,0)


        def recordNumber(self):
            return self.getTypedRuleContext(vbaParser.RecordNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_getStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetStatement" ):
                listener.enterGetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetStatement" ):
                listener.exitGetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetStatement" ):
                return visitor.visitGetStatement(self)
            else:
                return visitor.visitChildren(self)




    def getStatement(self):

        localctx = vbaParser.GetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_getStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3328
            self.match(vbaParser.GET)
            self.state = 3329
            self.wsc()
            self.state = 3330
            self.fileNumber()
            self.state = 3332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3331
                self.wsc()


            self.state = 3334
            self.match(vbaParser.COMMA)
            self.state = 3336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
            if la_ == 1:
                self.state = 3335
                self.wsc()


            self.state = 3339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 122458039401238) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4521054086166054945) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 903294260321) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & 567471836758015753) != 0) or _la==267:
                self.state = 3338
                self.recordNumber()


            self.state = 3342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3341
                self.wsc()


            self.state = 3344
            self.match(vbaParser.COMMA)
            self.state = 3346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3345
                self.wsc()


            self.state = 3348
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableExpression(self):
            return self.getTypedRuleContext(vbaParser.VariableExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = vbaParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3350
            self.variableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.PERIOD)
            else:
                return self.getToken(vbaParser.PERIOD, i)

        def attributeName(self):
            return self.getTypedRuleContext(vbaParser.AttributeNameContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def literalExpression(self):
            return self.getTypedRuleContext(vbaParser.LiteralExpressionContext,0)


        def VB_PROCDATA(self):
            return self.getToken(vbaParser.VB_PROCDATA, 0)

        def VB_INVOKE_FUNC(self):
            return self.getToken(vbaParser.VB_INVOKE_FUNC, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_attributeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeStatement" ):
                listener.enterAttributeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeStatement" ):
                listener.exitAttributeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeStatement" ):
                return visitor.visitAttributeStatement(self)
            else:
                return visitor.visitChildren(self)




    def attributeStatement(self):

        localctx = vbaParser.AttributeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_attributeStatement)
        self._la = 0 # Token type
        try:
            self.state = 3378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3352
                self.match(vbaParser.ATTRIBUTE)
                self.state = 3353
                self.match(vbaParser.WS)
                self.state = 3354
                self.ambiguousIdentifier()
                self.state = 3355
                self.match(vbaParser.PERIOD)
                self.state = 3356
                self.attributeName()
                self.state = 3358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 3357
                    self.match(vbaParser.WS)


                self.state = 3360
                self.match(vbaParser.EQ)
                self.state = 3362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 3361
                    self.match(vbaParser.WS)


                self.state = 3364
                self.literalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3366
                self.match(vbaParser.ATTRIBUTE)
                self.state = 3367
                self.match(vbaParser.WS)
                self.state = 3368
                self.ambiguousIdentifier()
                self.state = 3369
                self.match(vbaParser.PERIOD)
                self.state = 3370
                self.match(vbaParser.VB_PROCDATA)
                self.state = 3371
                self.match(vbaParser.PERIOD)
                self.state = 3372
                self.match(vbaParser.VB_INVOKE_FUNC)
                self.state = 3373
                self.match(vbaParser.WS)
                self.state = 3374
                self.match(vbaParser.EQ)
                self.state = 3375
                self.match(vbaParser.WS)
                self.state = 3376
                self.match(vbaParser.STRINGLITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VB_DESCRIPTION(self):
            return self.getToken(vbaParser.VB_DESCRIPTION, 0)

        def VB_VARDESCRIPTION(self):
            return self.getToken(vbaParser.VB_VARDESCRIPTION, 0)

        def VB_USERMEMID(self):
            return self.getToken(vbaParser.VB_USERMEMID, 0)

        def VB_VARUSERMEMID(self):
            return self.getToken(vbaParser.VB_VARUSERMEMID, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_attributeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeName" ):
                listener.enterAttributeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeName" ):
                listener.exitAttributeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeName" ):
                return visitor.visitAttributeName(self)
            else:
                return visitor.visitChildren(self)




    def attributeName(self):

        localctx = vbaParser.AttributeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_attributeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3380
            _la = self._input.LA(1)
            if not(((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & 573441) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literalExpression(self):
            return self.getTypedRuleContext(vbaParser.LiteralExpressionContext,0)


        def parenthesizedExpression(self):
            return self.getTypedRuleContext(vbaParser.ParenthesizedExpressionContext,0)


        def typeofIsExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeofIsExpressionContext,0)


        def newExpress(self):
            return self.getTypedRuleContext(vbaParser.NewExpressContext,0)


        def unaryMinusExpression(self):
            return self.getTypedRuleContext(vbaParser.UnaryMinusExpressionContext,0)


        def notOperatorExpression(self):
            return self.getTypedRuleContext(vbaParser.NotOperatorExpressionContext,0)


        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def POW(self):
            return self.getToken(vbaParser.POW, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def DIV(self):
            return self.getToken(vbaParser.DIV, 0)

        def MULT(self):
            return self.getToken(vbaParser.MULT, 0)

        def MOD(self):
            return self.getToken(vbaParser.MOD, 0)

        def PLUS(self):
            return self.getToken(vbaParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def AMPERSAND(self):
            return self.getToken(vbaParser.AMPERSAND, 0)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)

        def GEQ(self):
            return self.getToken(vbaParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(vbaParser.LEQ, 0)

        def GT(self):
            return self.getToken(vbaParser.GT, 0)

        def LT(self):
            return self.getToken(vbaParser.LT, 0)

        def NEQ(self):
            return self.getToken(vbaParser.NEQ, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def AND(self):
            return self.getToken(vbaParser.AND, 0)

        def OR(self):
            return self.getToken(vbaParser.OR, 0)

        def XOR(self):
            return self.getToken(vbaParser.XOR, 0)

        def EQV(self):
            return self.getToken(vbaParser.EQV, 0)

        def IMP(self):
            return self.getToken(vbaParser.IMP, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = vbaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 560
        self.enterRecursionRule(localctx, 560, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3390
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70, 80, 124, 125, 168, 252, 253, 254, 255, 256, 257]:
                self.state = 3383
                self.literalExpression()
                pass
            elif token in [236]:
                self.state = 3384
                self.parenthesizedExpression()
                pass
            elif token in [170]:
                self.state = 3385
                self.typeofIsExpression()
                pass
            elif token in [122]:
                self.state = 3386
                self.newExpress()
                pass
            elif token in [238]:
                self.state = 3387
                self.unaryMinusExpression()
                pass
            elif token in [123]:
                self.state = 3388
                self.notOperatorExpression()
                pass
            elif token in [1, 2, 4, 8, 9, 11, 12, 13, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 46, 65, 76, 81, 87, 94, 95, 96, 99, 100, 101, 102, 104, 106, 114, 115, 116, 117, 118, 120, 126, 132, 137, 138, 142, 144, 147, 151, 155, 160, 162, 165, 171, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 231, 243, 267]:
                self.state = 3389
                self.lExpression(0)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 3457
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,487,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3455
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
                    if la_ == 1:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3392
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 3394
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3393
                            self.wsc()


                        self.state = 3396
                        self.match(vbaParser.POW)
                        self.state = 3398
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3397
                            self.wsc()


                        self.state = 3400
                        self.expression(11)
                        pass

                    elif la_ == 2:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3401
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 3403
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3402
                            self.wsc()


                        self.state = 3405
                        _la = self._input.LA(1)
                        if not(_la==228 or _la==240):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3407
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3406
                            self.wsc()


                        self.state = 3409
                        self.expression(9)
                        pass

                    elif la_ == 3:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3410
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 3412
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3411
                            self.wsc()


                        self.state = 3414
                        self.match(vbaParser.MOD)
                        self.state = 3416
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3415
                            self.wsc()


                        self.state = 3418
                        self.expression(8)
                        pass

                    elif la_ == 4:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3419
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3421
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3420
                            self.wsc()


                        self.state = 3423
                        _la = self._input.LA(1)
                        if not(_la==238 or _la==244):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3425
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3424
                            self.wsc()


                        self.state = 3427
                        self.expression(7)
                        pass

                    elif la_ == 5:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3428
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3430
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3429
                            self.wsc()


                        self.state = 3432
                        self.match(vbaParser.AMPERSAND)
                        self.state = 3434
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3433
                            self.wsc()


                        self.state = 3436
                        self.expression(6)
                        pass

                    elif la_ == 6:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3437
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3439
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3438
                            self.wsc()


                        self.state = 3441
                        _la = self._input.LA(1)
                        if not(_la==97 or _la==105 or ((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & 2221) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3443
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3442
                            self.wsc()


                        self.state = 3445
                        self.expression(5)
                        pass

                    elif la_ == 7:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3446
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3448
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3447
                            self.wsc()


                        self.state = 3450
                        _la = self._input.LA(1)
                        if not(_la==5 or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 144115188075986945) != 0) or _la==206):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3452
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3451
                            self.wsc()


                        self.state = 3454
                        self.expression(3)
                        pass

             
                self.state = 3459
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,487,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def instanceExpression(self):
            return self.getTypedRuleContext(vbaParser.InstanceExpressionContext,0)


        def withExpression(self):
            return self.getTypedRuleContext(vbaParser.WithExpressionContext,0)


        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def PERIOD(self):
            return self.getToken(vbaParser.PERIOD, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LINE_CONTINUATION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LINE_CONTINUATION)
            else:
                return self.getToken(vbaParser.LINE_CONTINUATION, i)

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(vbaParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def EXCLAM(self):
            return self.getToken(vbaParser.EXCLAM, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLExpression" ):
                listener.enterLExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLExpression" ):
                listener.exitLExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLExpression" ):
                return visitor.visitLExpression(self)
            else:
                return visitor.visitChildren(self)



    def lExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = vbaParser.LExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 562
        self.enterRecursionRule(localctx, 562, self.RULE_lExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
            if la_ == 1:
                self.state = 3461
                self.simpleNameExpression()
                pass

            elif la_ == 2:
                self.state = 3462
                self.instanceExpression()
                pass

            elif la_ == 3:
                self.state = 3463
                self.withExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3531
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,503,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3529
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
                    if la_ == 1:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3466
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 3467
                        self.match(vbaParser.PERIOD)
                        self.state = 3469
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3468
                            self.wsc()


                        self.state = 3471
                        self.unrestrictedName()
                        pass

                    elif la_ == 2:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3472
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3474
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,490,self._ctx)
                        if la_ == 1:
                            self.state = 3473
                            self.wsc()


                        self.state = 3476
                        self.match(vbaParser.LINE_CONTINUATION)
                        self.state = 3478
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3477
                            self.wsc()


                        self.state = 3480
                        self.match(vbaParser.PERIOD)
                        self.state = 3482
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3481
                            self.wsc()


                        self.state = 3484
                        self.unrestrictedName()
                        pass

                    elif la_ == 3:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3485
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3487
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3486
                            self.wsc()


                        self.state = 3489
                        self.match(vbaParser.LPAREN)
                        self.state = 3491
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
                        if la_ == 1:
                            self.state = 3490
                            self.wsc()


                        self.state = 3493
                        self.argumentList()
                        self.state = 3495
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3494
                            self.wsc()


                        self.state = 3497
                        self.match(vbaParser.RPAREN)
                        pass

                    elif la_ == 4:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3499
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3500
                        self.match(vbaParser.EXCLAM)
                        self.state = 3501
                        self.unrestrictedName()
                        pass

                    elif la_ == 5:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3502
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 3504
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
                        if la_ == 1:
                            self.state = 3503
                            self.wsc()


                        self.state = 3506
                        self.match(vbaParser.LINE_CONTINUATION)
                        self.state = 3508
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3507
                            self.wsc()


                        self.state = 3510
                        self.match(vbaParser.EXCLAM)
                        self.state = 3511
                        self.unrestrictedName()
                        pass

                    elif la_ == 6:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3512
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3514
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
                        if la_ == 1:
                            self.state = 3513
                            self.wsc()


                        self.state = 3516
                        self.match(vbaParser.LINE_CONTINUATION)
                        self.state = 3518
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3517
                            self.wsc()


                        self.state = 3520
                        self.match(vbaParser.EXCLAM)
                        self.state = 3522
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
                        if la_ == 1:
                            self.state = 3521
                            self.wsc()


                        self.state = 3524
                        self.match(vbaParser.LINE_CONTINUATION)
                        self.state = 3526
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3525
                            self.wsc()


                        self.state = 3528
                        self.unrestrictedName()
                        pass

             
                self.state = 3533
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,503,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEXLITERAL(self):
            return self.getToken(vbaParser.HEXLITERAL, 0)

        def OCTLITERAL(self):
            return self.getToken(vbaParser.OCTLITERAL, 0)

        def DATELITERAL(self):
            return self.getToken(vbaParser.DATELITERAL, 0)

        def FLOATLITERAL(self):
            return self.getToken(vbaParser.FLOATLITERAL, 0)

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def literalIdentifier(self):
            return self.getTypedRuleContext(vbaParser.LiteralIdentifierContext,0)


        def typeSuffix(self):
            return self.getTypedRuleContext(vbaParser.TypeSuffixContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_literalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExpression" ):
                return visitor.visitLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def literalExpression(self):

        localctx = vbaParser.LiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_literalExpression)
        try:
            self.state = 3544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [254]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3534
                self.match(vbaParser.HEXLITERAL)
                pass
            elif token in [253]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3535
                self.match(vbaParser.OCTLITERAL)
                pass
            elif token in [257]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3536
                self.match(vbaParser.DATELITERAL)
                pass
            elif token in [256]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3537
                self.match(vbaParser.FLOATLITERAL)
                pass
            elif token in [255]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3538
                self.match(vbaParser.INTEGERLITERAL)
                pass
            elif token in [252]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3539
                self.match(vbaParser.STRINGLITERAL)
                pass
            elif token in [70, 80, 124, 125, 168]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3540
                self.literalIdentifier()
                self.state = 3542
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,504,self._ctx)
                if la_ == 1:
                    self.state = 3541
                    self.typeSuffix()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedExpression(self):

        localctx = vbaParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_parenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3546
            self.match(vbaParser.LPAREN)
            self.state = 3548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3547
                self.wsc()


            self.state = 3550
            self.expression(0)
            self.state = 3552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3551
                self.wsc()


            self.state = 3554
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeofIsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEOF(self):
            return self.getToken(vbaParser.TYPEOF, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_typeofIsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofIsExpression" ):
                listener.enterTypeofIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofIsExpression" ):
                listener.exitTypeofIsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeofIsExpression" ):
                return visitor.visitTypeofIsExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeofIsExpression(self):

        localctx = vbaParser.TypeofIsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_typeofIsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3556
            self.match(vbaParser.TYPEOF)
            self.state = 3558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3557
                self.wsc()


            self.state = 3560
            self.expression(0)
            self.state = 3562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3561
                self.wsc()


            self.state = 3564
            self.match(vbaParser.IS)
            self.state = 3566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3565
                self.wsc()


            self.state = 3568
            self.typeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewExpressContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_newExpress

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpress" ):
                listener.enterNewExpress(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpress" ):
                listener.exitNewExpress(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewExpress" ):
                return visitor.visitNewExpress(self)
            else:
                return visitor.visitChildren(self)




    def newExpress(self):

        localctx = vbaParser.NewExpressContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_newExpress)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3570
            self.match(vbaParser.NEW)
            self.state = 3572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3571
                self.wsc()


            self.state = 3574
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(vbaParser.NOT, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_notOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotOperatorExpression" ):
                listener.enterNotOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotOperatorExpression" ):
                listener.exitNotOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotOperatorExpression" ):
                return visitor.visitNotOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def notOperatorExpression(self):

        localctx = vbaParser.NotOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_notOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3576
            self.match(vbaParser.NOT)
            self.state = 3578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3577
                self.wsc()


            self.state = 3580
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryMinusExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unaryMinusExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryMinusExpression" ):
                listener.enterUnaryMinusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryMinusExpression" ):
                listener.exitUnaryMinusExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryMinusExpression" ):
                return visitor.visitUnaryMinusExpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryMinusExpression(self):

        localctx = vbaParser.UnaryMinusExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_unaryMinusExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3582
            self.match(vbaParser.MINUS)
            self.state = 3584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3583
                self.wsc()


            self.state = 3586
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(vbaParser.NameContext,0)


        def reservedName(self):
            return self.getTypedRuleContext(vbaParser.ReservedNameContext,0)


        def specialForm(self):
            return self.getTypedRuleContext(vbaParser.SpecialFormContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_simpleNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNameExpression" ):
                listener.enterSimpleNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNameExpression" ):
                listener.exitSimpleNameExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleNameExpression" ):
                return visitor.visitSimpleNameExpression(self)
            else:
                return visitor.visitChildren(self)




    def simpleNameExpression(self):

        localctx = vbaParser.SimpleNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_simpleNameExpression)
        try:
            self.state = 3591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,514,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3588
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3589
                self.reservedName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3590
                self.specialForm()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ME(self):
            return self.getToken(vbaParser.ME, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_instanceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceExpression" ):
                listener.enterInstanceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceExpression" ):
                listener.exitInstanceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstanceExpression" ):
                return visitor.visitInstanceExpression(self)
            else:
                return visitor.visitChildren(self)




    def instanceExpression(self):

        localctx = vbaParser.InstanceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_instanceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3593
            self.match(vbaParser.ME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def PERIOD(self):
            return self.getToken(vbaParser.PERIOD, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LINE_CONTINUATION(self):
            return self.getToken(vbaParser.LINE_CONTINUATION, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_memberAccessExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessExpression" ):
                listener.enterMemberAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessExpression" ):
                listener.exitMemberAccessExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccessExpression" ):
                return visitor.visitMemberAccessExpression(self)
            else:
                return visitor.visitChildren(self)




    def memberAccessExpression(self):

        localctx = vbaParser.MemberAccessExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_memberAccessExpression)
        self._la = 0 # Token type
        try:
            self.state = 3616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3595
                self.lExpression(0)
                self.state = 3596
                self.match(vbaParser.PERIOD)
                self.state = 3598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 3597
                    self.wsc()


                self.state = 3600
                self.unrestrictedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3602
                self.lExpression(0)
                self.state = 3604
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
                if la_ == 1:
                    self.state = 3603
                    self.wsc()


                self.state = 3606
                self.match(vbaParser.LINE_CONTINUATION)
                self.state = 3608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 3607
                    self.wsc()


                self.state = 3610
                self.match(vbaParser.PERIOD)
                self.state = 3612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 3611
                    self.wsc()


                self.state = 3614
                self.unrestrictedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(vbaParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_indexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpression" ):
                listener.enterIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpression" ):
                listener.exitIndexExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexExpression" ):
                return visitor.visitIndexExpression(self)
            else:
                return visitor.visitChildren(self)




    def indexExpression(self):

        localctx = vbaParser.IndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_indexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3618
            self.lExpression(0)
            self.state = 3620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==265:
                self.state = 3619
                self.match(vbaParser.WS)


            self.state = 3622
            self.match(vbaParser.LPAREN)
            self.state = 3624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
            if la_ == 1:
                self.state = 3623
                self.wsc()


            self.state = 3626
            self.argumentList()
            self.state = 3628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3627
                self.wsc()


            self.state = 3630
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positionalOrNamedArgumentList(self):
            return self.getTypedRuleContext(vbaParser.PositionalOrNamedArgumentListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = vbaParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_argumentList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,523,self._ctx)
            if la_ == 1:
                self.state = 3632
                self.positionalOrNamedArgumentList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionalOrNamedArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requiredPositionalArgument(self):
            return self.getTypedRuleContext(vbaParser.RequiredPositionalArgumentContext,0)


        def positionalArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.PositionalArgumentContext)
            else:
                return self.getTypedRuleContext(vbaParser.PositionalArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def namedArgumentList(self):
            return self.getTypedRuleContext(vbaParser.NamedArgumentListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_positionalOrNamedArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalOrNamedArgumentList" ):
                listener.enterPositionalOrNamedArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalOrNamedArgumentList" ):
                listener.exitPositionalOrNamedArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalOrNamedArgumentList" ):
                return visitor.visitPositionalOrNamedArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def positionalOrNamedArgumentList(self):

        localctx = vbaParser.PositionalOrNamedArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_positionalOrNamedArgumentList)
        self._la = 0 # Token type
        try:
            self.state = 3663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,530,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3645
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,526,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3635
                        self.positionalArgument()
                        self.state = 3637
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3636
                            self.wsc()


                        self.state = 3639
                        self.match(vbaParser.COMMA)
                        self.state = 3641
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,525,self._ctx)
                        if la_ == 1:
                            self.state = 3640
                            self.wsc()

                 
                    self.state = 3647
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,526,self._ctx)

                self.state = 3648
                self.requiredPositionalArgument()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3659
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,529,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3649
                        self.positionalArgument()
                        self.state = 3651
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258 or _la==265:
                            self.state = 3650
                            self.wsc()


                        self.state = 3653
                        self.match(vbaParser.COMMA)
                        self.state = 3655
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,528,self._ctx)
                        if la_ == 1:
                            self.state = 3654
                            self.wsc()

                 
                    self.state = 3661
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,529,self._ctx)

                self.state = 3662
                self.namedArgumentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionalArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentExpression(self):
            return self.getTypedRuleContext(vbaParser.ArgumentExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_positionalArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalArgument" ):
                listener.enterPositionalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalArgument" ):
                listener.exitPositionalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalArgument" ):
                return visitor.visitPositionalArgument(self)
            else:
                return visitor.visitChildren(self)




    def positionalArgument(self):

        localctx = vbaParser.PositionalArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_positionalArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 122458039434014) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4521054086166054945) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 903294260321) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & 567471836758015753) != 0) or _la==267:
                self.state = 3665
                self.argumentExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequiredPositionalArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentExpression(self):
            return self.getTypedRuleContext(vbaParser.ArgumentExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_requiredPositionalArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequiredPositionalArgument" ):
                listener.enterRequiredPositionalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequiredPositionalArgument" ):
                listener.exitRequiredPositionalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequiredPositionalArgument" ):
                return visitor.visitRequiredPositionalArgument(self)
            else:
                return visitor.visitChildren(self)




    def requiredPositionalArgument(self):

        localctx = vbaParser.RequiredPositionalArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_requiredPositionalArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3668
            self.argumentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.NamedArgumentContext)
            else:
                return self.getTypedRuleContext(vbaParser.NamedArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_namedArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgumentList" ):
                listener.enterNamedArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgumentList" ):
                listener.exitNamedArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedArgumentList" ):
                return visitor.visitNamedArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def namedArgumentList(self):

        localctx = vbaParser.NamedArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_namedArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3670
            self.namedArgument()
            self.state = 3681
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,534,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 3671
                        self.wsc()


                    self.state = 3674
                    self.match(vbaParser.COMMA)
                    self.state = 3676
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258 or _la==265:
                        self.state = 3675
                        self.wsc()


                    self.state = 3678
                    self.namedArgument() 
                self.state = 3683
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,534,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def ASSIGN(self):
            return self.getToken(vbaParser.ASSIGN, 0)

        def argumentExpression(self):
            return self.getTypedRuleContext(vbaParser.ArgumentExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_namedArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgument" ):
                listener.enterNamedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgument" ):
                listener.exitNamedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedArgument" ):
                return visitor.visitNamedArgument(self)
            else:
                return visitor.visitChildren(self)




    def namedArgument(self):

        localctx = vbaParser.NamedArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_namedArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3684
            self.unrestrictedName()
            self.state = 3686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3685
                self.wsc()


            self.state = 3688
            self.match(vbaParser.ASSIGN)
            self.state = 3690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258 or _la==265:
                self.state = 3689
                self.wsc()


            self.state = 3692
            self.argumentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def addressofExpression(self):
            return self.getTypedRuleContext(vbaParser.AddressofExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_argumentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpression" ):
                listener.enterArgumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpression" ):
                listener.exitArgumentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentExpression" ):
                return visitor.visitArgumentExpression(self)
            else:
                return visitor.visitChildren(self)




    def argumentExpression(self):

        localctx = vbaParser.ArgumentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_argumentExpression)
        self._la = 0 # Token type
        try:
            self.state = 3700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 4, 8, 9, 11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 46, 65, 70, 76, 80, 81, 87, 94, 95, 96, 99, 100, 101, 102, 104, 106, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 132, 137, 138, 142, 144, 147, 151, 155, 160, 162, 165, 168, 170, 171, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 231, 236, 238, 243, 252, 253, 254, 255, 256, 257, 267]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 3694
                    self.match(vbaParser.BYVAL)
                    self.state = 3695
                    self.wsc()


                self.state = 3698
                self.expression(0)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3699
                self.addressofExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryAccessExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def EXCLAM(self):
            return self.getToken(vbaParser.EXCLAM, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def LINE_CONTINUATION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LINE_CONTINUATION)
            else:
                return self.getToken(vbaParser.LINE_CONTINUATION, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_dictionaryAccessExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryAccessExpression" ):
                listener.enterDictionaryAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryAccessExpression" ):
                listener.exitDictionaryAccessExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionaryAccessExpression" ):
                return visitor.visitDictionaryAccessExpression(self)
            else:
                return visitor.visitChildren(self)




    def dictionaryAccessExpression(self):

        localctx = vbaParser.DictionaryAccessExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_dictionaryAccessExpression)
        self._la = 0 # Token type
        try:
            self.state = 3735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,545,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3702
                self.lExpression(0)
                self.state = 3703
                self.match(vbaParser.EXCLAM)
                self.state = 3704
                self.unrestrictedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3706
                self.lExpression(0)
                self.state = 3708
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,539,self._ctx)
                if la_ == 1:
                    self.state = 3707
                    self.wsc()


                self.state = 3710
                self.match(vbaParser.LINE_CONTINUATION)
                self.state = 3712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 3711
                    self.wsc()


                self.state = 3714
                self.match(vbaParser.EXCLAM)
                self.state = 3715
                self.unrestrictedName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3717
                self.lExpression(0)
                self.state = 3719
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,541,self._ctx)
                if la_ == 1:
                    self.state = 3718
                    self.wsc()


                self.state = 3721
                self.match(vbaParser.LINE_CONTINUATION)
                self.state = 3723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 3722
                    self.wsc()


                self.state = 3725
                self.match(vbaParser.EXCLAM)
                self.state = 3727
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,543,self._ctx)
                if la_ == 1:
                    self.state = 3726
                    self.wsc()


                self.state = 3729
                self.match(vbaParser.LINE_CONTINUATION)
                self.state = 3731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258 or _la==265:
                    self.state = 3730
                    self.wsc()


                self.state = 3733
                self.unrestrictedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withMemberAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.WithMemberAccessExpressionContext,0)


        def withDictionaryAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.WithDictionaryAccessExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_withExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithExpression" ):
                listener.enterWithExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithExpression" ):
                listener.exitWithExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExpression" ):
                return visitor.visitWithExpression(self)
            else:
                return visitor.visitChildren(self)




    def withExpression(self):

        localctx = vbaParser.WithExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_withExpression)
        try:
            self.state = 3739
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [243]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3737
                self.withMemberAccessExpression()
                pass
            elif token in [231]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3738
                self.withDictionaryAccessExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithMemberAccessExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(vbaParser.PERIOD, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_withMemberAccessExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithMemberAccessExpression" ):
                listener.enterWithMemberAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithMemberAccessExpression" ):
                listener.exitWithMemberAccessExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithMemberAccessExpression" ):
                return visitor.visitWithMemberAccessExpression(self)
            else:
                return visitor.visitChildren(self)




    def withMemberAccessExpression(self):

        localctx = vbaParser.WithMemberAccessExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_withMemberAccessExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3741
            self.match(vbaParser.PERIOD)
            self.state = 3742
            self.unrestrictedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithDictionaryAccessExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAM(self):
            return self.getToken(vbaParser.EXCLAM, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_withDictionaryAccessExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithDictionaryAccessExpression" ):
                listener.enterWithDictionaryAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithDictionaryAccessExpression" ):
                listener.exitWithDictionaryAccessExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithDictionaryAccessExpression" ):
                return visitor.visitWithDictionaryAccessExpression(self)
            else:
                return visitor.visitChildren(self)




    def withDictionaryAccessExpression(self):

        localctx = vbaParser.WithDictionaryAccessExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_withDictionaryAccessExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3744
            self.match(vbaParser.EXCLAM)
            self.state = 3745
            self.unrestrictedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpression" ):
                return visitor.visitConstantExpression(self)
            else:
                return visitor.visitChildren(self)




    def constantExpression(self):

        localctx = vbaParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3747
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CcExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ccExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCcExpression" ):
                listener.enterCcExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCcExpression" ):
                listener.exitCcExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCcExpression" ):
                return visitor.visitCcExpression(self)
            else:
                return visitor.visitChildren(self)




    def ccExpression(self):

        localctx = vbaParser.CcExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_ccExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3749
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_booleanExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanExpression" ):
                listener.enterBooleanExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanExpression" ):
                listener.exitBooleanExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanExpression" ):
                return visitor.visitBooleanExpression(self)
            else:
                return visitor.visitChildren(self)




    def booleanExpression(self):

        localctx = vbaParser.BooleanExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_booleanExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3751
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_integerExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerExpression" ):
                listener.enterIntegerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerExpression" ):
                listener.exitIntegerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerExpression" ):
                return visitor.visitIntegerExpression(self)
            else:
                return visitor.visitChildren(self)




    def integerExpression(self):

        localctx = vbaParser.IntegerExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_integerExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3753
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableExpression" ):
                listener.enterVariableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableExpression" ):
                listener.exitVariableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableExpression" ):
                return visitor.visitVariableExpression(self)
            else:
                return visitor.visitChildren(self)




    def variableExpression(self):

        localctx = vbaParser.VariableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_variableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3755
            self.lExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoundVariableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_boundVariableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundVariableExpression" ):
                listener.enterBoundVariableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundVariableExpression" ):
                listener.exitBoundVariableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoundVariableExpression" ):
                return visitor.visitBoundVariableExpression(self)
            else:
                return visitor.visitChildren(self)




    def boundVariableExpression(self):

        localctx = vbaParser.BoundVariableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_boundVariableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3757
            self.lExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def builtinType(self):
            return self.getTypedRuleContext(vbaParser.BuiltinTypeContext,0)


        def definedTypeExpression(self):
            return self.getTypedRuleContext(vbaParser.DefinedTypeExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpression" ):
                listener.enterTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpression" ):
                listener.exitTypeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpression" ):
                return visitor.visitTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeExpression(self):

        localctx = vbaParser.TypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_typeExpression)
        try:
            self.state = 3761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3759
                self.builtinType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3760
                self.definedTypeExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinedTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def memberAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.MemberAccessExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_definedTypeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinedTypeExpression" ):
                listener.enterDefinedTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinedTypeExpression" ):
                listener.exitDefinedTypeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinedTypeExpression" ):
                return visitor.visitDefinedTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def definedTypeExpression(self):

        localctx = vbaParser.DefinedTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_definedTypeExpression)
        try:
            self.state = 3765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3763
                self.simpleNameExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3764
                self.memberAccessExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddressofExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDRESSOF(self):
            return self.getToken(vbaParser.ADDRESSOF, 0)

        def procedurePointerExpression(self):
            return self.getTypedRuleContext(vbaParser.ProcedurePointerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_addressofExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddressofExpression" ):
                listener.enterAddressofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddressofExpression" ):
                listener.exitAddressofExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddressofExpression" ):
                return visitor.visitAddressofExpression(self)
            else:
                return visitor.visitChildren(self)




    def addressofExpression(self):

        localctx = vbaParser.AddressofExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_addressofExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3767
            self.match(vbaParser.ADDRESSOF)
            self.state = 3768
            self.procedurePointerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedurePointerExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def memberAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.MemberAccessExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_procedurePointerExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedurePointerExpression" ):
                listener.enterProcedurePointerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedurePointerExpression" ):
                listener.exitProcedurePointerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedurePointerExpression" ):
                return visitor.visitProcedurePointerExpression(self)
            else:
                return visitor.visitChildren(self)




    def procedurePointerExpression(self):

        localctx = vbaParser.ProcedurePointerExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_procedurePointerExpression)
        try:
            self.state = 3772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,549,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3770
                self.simpleNameExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3771
                self.memberAccessExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def LINE_CONTINUATION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LINE_CONTINUATION)
            else:
                return self.getToken(vbaParser.LINE_CONTINUATION, i)

        def getRuleIndex(self):
            return vbaParser.RULE_wsc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsc" ):
                listener.enterWsc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsc" ):
                listener.exitWsc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWsc" ):
                return visitor.visitWsc(self)
            else:
                return visitor.visitChildren(self)




    def wsc(self):

        localctx = vbaParser.WscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_wsc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3775 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3774
                    _la = self._input.LA(1)
                    if not(_la==258 or _la==265):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 3777 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,550,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(vbaParser.NEWLINE, 0)

        def commentBody(self):
            return self.getTypedRuleContext(vbaParser.CommentBodyContext,0)


        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_endOfLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfLine" ):
                listener.enterEndOfLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfLine" ):
                listener.exitEndOfLine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfLine" ):
                return visitor.visitEndOfLine(self)
            else:
                return visitor.visitChildren(self)




    def endOfLine(self):

        localctx = vbaParser.EndOfLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_endOfLine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==265:
                self.state = 3779
                self.match(vbaParser.WS)


            self.state = 3785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [259]:
                self.state = 3782
                self.match(vbaParser.NEWLINE)
                pass
            elif token in [261]:
                self.state = 3783
                self.commentBody()
                pass
            elif token in [260]:
                self.state = 3784
                self.remStatement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,553,self._ctx)
            if la_ == 1:
                self.state = 3787
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfLineNoWsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(vbaParser.NEWLINE, 0)

        def commentBody(self):
            return self.getTypedRuleContext(vbaParser.CommentBodyContext,0)


        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_endOfLineNoWs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfLineNoWs" ):
                listener.enterEndOfLineNoWs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfLineNoWs" ):
                listener.exitEndOfLineNoWs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfLineNoWs" ):
                return visitor.visitEndOfLineNoWs(self)
            else:
                return visitor.visitChildren(self)




    def endOfLineNoWs(self):

        localctx = vbaParser.EndOfLineNoWsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_endOfLineNoWs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==265:
                self.state = 3790
                self.match(vbaParser.WS)


            self.state = 3796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [259]:
                self.state = 3793
                self.match(vbaParser.NEWLINE)
                pass
            elif token in [261]:
                self.state = 3794
                self.commentBody()
                pass
            elif token in [260]:
                self.state = 3795
                self.remStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COLON)
            else:
                return self.getToken(vbaParser.COLON, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_endOfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfStatement" ):
                listener.enterEndOfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfStatement" ):
                listener.exitEndOfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfStatement" ):
                return visitor.visitEndOfStatement(self)
            else:
                return visitor.visitChildren(self)




    def endOfStatement(self):

        localctx = vbaParser.EndOfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_endOfStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3806 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3806
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,558,self._ctx)
                    if la_ == 1:
                        self.state = 3798
                        self.endOfLine()
                        pass

                    elif la_ == 2:
                        self.state = 3800
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==265:
                            self.state = 3799
                            self.match(vbaParser.WS)


                        self.state = 3802
                        self.match(vbaParser.COLON)
                        self.state = 3804
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,557,self._ctx)
                        if la_ == 1:
                            self.state = 3803
                            self.match(vbaParser.WS)


                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 3808 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,559,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfStatementNoWsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLineNoWs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineNoWsContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COLON)
            else:
                return self.getToken(vbaParser.COLON, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_endOfStatementNoWs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfStatementNoWs" ):
                listener.enterEndOfStatementNoWs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfStatementNoWs" ):
                listener.exitEndOfStatementNoWs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfStatementNoWs" ):
                return visitor.visitEndOfStatementNoWs(self)
            else:
                return visitor.visitChildren(self)




    def endOfStatementNoWs(self):

        localctx = vbaParser.EndOfStatementNoWsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_endOfStatementNoWs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3815 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3815
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,561,self._ctx)
                if la_ == 1:
                    self.state = 3810
                    self.endOfLineNoWs()
                    pass

                elif la_ == 2:
                    self.state = 3812
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==265:
                        self.state = 3811
                        self.match(vbaParser.WS)


                    self.state = 3814
                    self.match(vbaParser.COLON)
                    pass


                self.state = 3817 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 87) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(vbaParser.COMMENT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_commentBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentBody" ):
                listener.enterCommentBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentBody" ):
                listener.exitCommentBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentBody" ):
                return visitor.visitCommentBody(self)
            else:
                return visitor.visitChildren(self)




    def commentBody(self):

        localctx = vbaParser.CommentBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_commentBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3819
            self.match(vbaParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementKeyword(self):
            return self.getTypedRuleContext(vbaParser.StatementKeywordContext,0)


        def markerKeyword(self):
            return self.getTypedRuleContext(vbaParser.MarkerKeywordContext,0)


        def operatorIdentifier(self):
            return self.getTypedRuleContext(vbaParser.OperatorIdentifierContext,0)


        def specialForm(self):
            return self.getTypedRuleContext(vbaParser.SpecialFormContext,0)


        def reservedName(self):
            return self.getTypedRuleContext(vbaParser.ReservedNameContext,0)


        def reservedTypeIdentifier(self):
            return self.getTypedRuleContext(vbaParser.ReservedTypeIdentifierContext,0)


        def literalIdentifier(self):
            return self.getTypedRuleContext(vbaParser.LiteralIdentifierContext,0)


        def remKeyword(self):
            return self.getTypedRuleContext(vbaParser.RemKeywordContext,0)


        def reservedForImplementationUse(self):
            return self.getTypedRuleContext(vbaParser.ReservedForImplementationUseContext,0)


        def futureReserved(self):
            return self.getTypedRuleContext(vbaParser.FutureReservedContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_reservedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedIdentifier" ):
                listener.enterReservedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedIdentifier" ):
                listener.exitReservedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedIdentifier" ):
                return visitor.visitReservedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def reservedIdentifier(self):

        localctx = vbaParser.ReservedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_reservedIdentifier)
        try:
            self.state = 3831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,563,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3821
                self.statementKeyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3822
                self.markerKeyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3823
                self.operatorIdentifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3824
                self.specialForm()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3825
                self.reservedName()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3826
                self.reservedTypeIdentifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3827
                self.literalIdentifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3828
                self.remKeyword()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3829
                self.reservedForImplementationUse()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3830
                self.futureReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(vbaParser.IDENTIFIER, 0)

        def ambiguousKeyword(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousKeywordContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ambiguousIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousIdentifier" ):
                listener.enterAmbiguousIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousIdentifier" ):
                listener.exitAmbiguousIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmbiguousIdentifier" ):
                return visitor.visitAmbiguousIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def ambiguousIdentifier(self):

        localctx = vbaParser.AmbiguousIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_ambiguousIdentifier)
        try:
            self.state = 3835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [267]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3833
                self.match(vbaParser.IDENTIFIER)
                pass
            elif token in [2, 4, 8, 11, 12, 13, 27, 28, 31, 32, 33, 38, 76, 87, 99, 104, 106, 115, 116, 117, 118, 120, 126, 132, 137, 142, 144, 147, 160, 165, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3834
                self.ambiguousKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def CLOSE(self):
            return self.getToken(vbaParser.CLOSE, 0)

        def CONST(self):
            return self.getToken(vbaParser.CONST, 0)

        def DECLARE(self):
            return self.getToken(vbaParser.DECLARE, 0)

        def DEFBOOL(self):
            return self.getToken(vbaParser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(vbaParser.DEFBYTE, 0)

        def DEFCUR(self):
            return self.getToken(vbaParser.DEFCUR, 0)

        def DEFDATE(self):
            return self.getToken(vbaParser.DEFDATE, 0)

        def DEFDBL(self):
            return self.getToken(vbaParser.DEFDBL, 0)

        def DEFINT(self):
            return self.getToken(vbaParser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(vbaParser.DEFLNG, 0)

        def DEFLNGLNG(self):
            return self.getToken(vbaParser.DEFLNGLNG, 0)

        def DEFLNGPTR(self):
            return self.getToken(vbaParser.DEFLNGPTR, 0)

        def DEFOBJ(self):
            return self.getToken(vbaParser.DEFOBJ, 0)

        def DEFSNG(self):
            return self.getToken(vbaParser.DEFSNG, 0)

        def DEFSTR(self):
            return self.getToken(vbaParser.DEFSTR, 0)

        def DEFVAR(self):
            return self.getToken(vbaParser.DEFVAR, 0)

        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def ELSEIF(self):
            return self.getToken(vbaParser.ELSEIF, 0)

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def ENDIF(self):
            return self.getToken(vbaParser.ENDIF, 0)

        def ENUM(self):
            return self.getToken(vbaParser.ENUM, 0)

        def ERASE(self):
            return self.getToken(vbaParser.ERASE, 0)

        def EVENT(self):
            return self.getToken(vbaParser.EVENT, 0)

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def FRIEND(self):
            return self.getToken(vbaParser.FRIEND, 0)

        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def IMPLEMENTS(self):
            return self.getToken(vbaParser.IMPLEMENTS, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def LOOP(self):
            return self.getToken(vbaParser.LOOP, 0)

        def LSET(self):
            return self.getToken(vbaParser.LSET, 0)

        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def OPEN(self):
            return self.getToken(vbaParser.OPEN, 0)

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def PRINT(self):
            return self.getToken(vbaParser.PRINT, 0)

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def PUT(self):
            return self.getToken(vbaParser.PUT, 0)

        def RAISEEVENT(self):
            return self.getToken(vbaParser.RAISEEVENT, 0)

        def REDIM(self):
            return self.getToken(vbaParser.REDIM, 0)

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def RETURN(self):
            return self.getToken(vbaParser.RETURN, 0)

        def RSET(self):
            return self.getToken(vbaParser.RSET, 0)

        def SEEK(self):
            return self.getToken(vbaParser.SEEK, 0)

        def SELECT(self):
            return self.getToken(vbaParser.SELECT, 0)

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def STOP(self):
            return self.getToken(vbaParser.STOP, 0)

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def TYPE(self):
            return self.getToken(vbaParser.TYPE, 0)

        def UNLOCK(self):
            return self.getToken(vbaParser.UNLOCK, 0)

        def WEND(self):
            return self.getToken(vbaParser.WEND, 0)

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def WITH(self):
            return self.getToken(vbaParser.WITH, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_statementKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementKeyword" ):
                listener.enterStatementKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementKeyword" ):
                listener.exitStatementKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementKeyword" ):
                return visitor.visitStatementKeyword(self)
            else:
                return visitor.visitChildren(self)




    def statementKeyword(self):

        localctx = vbaParser.StatementKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_statementKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3837
            _la = self._input.LA(1)
            if not(((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & 1940066206650728451) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & -6025569457770850849) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & 193654783995848823) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REM(self):
            return self.getToken(vbaParser.REM, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_remKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemKeyword" ):
                listener.enterRemKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemKeyword" ):
                listener.exitRemKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemKeyword" ):
                return visitor.visitRemKeyword(self)
            else:
                return visitor.visitChildren(self)




    def remKeyword(self):

        localctx = vbaParser.RemKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_remKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3839
            self.match(vbaParser.REM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MarkerKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(vbaParser.ANY, 0)

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def EACH(self):
            return self.getToken(vbaParser.EACH, 0)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def IN(self):
            return self.getToken(vbaParser.IN, 0)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def UNTIL(self):
            return self.getToken(vbaParser.UNTIL, 0)

        def WITHEVENTS(self):
            return self.getToken(vbaParser.WITHEVENTS, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def OPTIONAL(self):
            return self.getToken(vbaParser.OPTIONAL, 0)

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def PRESERVE(self):
            return self.getToken(vbaParser.PRESERVE, 0)

        def SPC(self):
            return self.getToken(vbaParser.SPC, 0)

        def TAB(self):
            return self.getToken(vbaParser.TAB, 0)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_markerKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMarkerKeyword" ):
                listener.enterMarkerKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMarkerKeyword" ):
                listener.exitMarkerKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMarkerKeyword" ):
                return visitor.visitMarkerKeyword(self)
            else:
                return visitor.visitChildren(self)




    def markerKeyword(self):

        localctx = vbaParser.MarkerKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_markerKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3841
            _la = self._input.LA(1)
            if not(((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & 6917529027641091601) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & -9223368600344068095) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & 211106232566593) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDRESSOF(self):
            return self.getToken(vbaParser.ADDRESSOF, 0)

        def AND(self):
            return self.getToken(vbaParser.AND, 0)

        def EQV(self):
            return self.getToken(vbaParser.EQV, 0)

        def IMP(self):
            return self.getToken(vbaParser.IMP, 0)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def MOD(self):
            return self.getToken(vbaParser.MOD, 0)

        def NOT(self):
            return self.getToken(vbaParser.NOT, 0)

        def OR(self):
            return self.getToken(vbaParser.OR, 0)

        def TYPEOF(self):
            return self.getToken(vbaParser.TYPEOF, 0)

        def XOR(self):
            return self.getToken(vbaParser.XOR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_operatorIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorIdentifier" ):
                listener.enterOperatorIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorIdentifier" ):
                listener.exitOperatorIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperatorIdentifier" ):
                return visitor.visitOperatorIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def operatorIdentifier(self):

        localctx = vbaParser.OperatorIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_operatorIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3843
            _la = self._input.LA(1)
            if not(_la==3 or _la==5 or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 144994799534080001) != 0) or _la==170 or _la==206):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(vbaParser.ABS, 0)

        def CBOOL(self):
            return self.getToken(vbaParser.CBOOL, 0)

        def CBYTE(self):
            return self.getToken(vbaParser.CBYTE, 0)

        def CCUR(self):
            return self.getToken(vbaParser.CCUR, 0)

        def CDATE(self):
            return self.getToken(vbaParser.CDATE, 0)

        def CDBL(self):
            return self.getToken(vbaParser.CDBL, 0)

        def CDEC(self):
            return self.getToken(vbaParser.CDEC, 0)

        def CINT(self):
            return self.getToken(vbaParser.CINT, 0)

        def CLNG(self):
            return self.getToken(vbaParser.CLNG, 0)

        def CLNGLNG(self):
            return self.getToken(vbaParser.CLNGLNG, 0)

        def CLNGPTR(self):
            return self.getToken(vbaParser.CLNGPTR, 0)

        def CSNG(self):
            return self.getToken(vbaParser.CSNG, 0)

        def CSTR(self):
            return self.getToken(vbaParser.CSTR, 0)

        def CVAR(self):
            return self.getToken(vbaParser.CVAR, 0)

        def CVERR(self):
            return self.getToken(vbaParser.CVERR, 0)

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def DEBUG(self):
            return self.getToken(vbaParser.DEBUG, 0)

        def DOEVENTS(self):
            return self.getToken(vbaParser.DOEVENTS, 0)

        def FIX(self):
            return self.getToken(vbaParser.FIX, 0)

        def INT(self):
            return self.getToken(vbaParser.INT, 0)

        def LEN(self):
            return self.getToken(vbaParser.LEN, 0)

        def LENB(self):
            return self.getToken(vbaParser.LENB, 0)

        def ME(self):
            return self.getToken(vbaParser.ME, 0)

        def PSET(self):
            return self.getToken(vbaParser.PSET, 0)

        def SCALE(self):
            return self.getToken(vbaParser.SCALE, 0)

        def SGN(self):
            return self.getToken(vbaParser.SGN, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_reservedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedName" ):
                listener.enterReservedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedName" ):
                listener.exitReservedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedName" ):
                return visitor.visitReservedName(self)
            else:
                return visitor.visitChildren(self)




    def reservedName(self):

        localctx = vbaParser.ReservedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_reservedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3845
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 122166652698626) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 563158259400705) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & 16916481) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialFormContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(vbaParser.ARRAY, 0)

        def CIRCLE(self):
            return self.getToken(vbaParser.CIRCLE, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def INPUTB(self):
            return self.getToken(vbaParser.INPUTB, 0)

        def LBOUND(self):
            return self.getToken(vbaParser.LBOUND, 0)

        def SCALE(self):
            return self.getToken(vbaParser.SCALE, 0)

        def UBOUND(self):
            return self.getToken(vbaParser.UBOUND, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_specialForm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialForm" ):
                listener.enterSpecialForm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialForm" ):
                listener.exitSpecialForm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialForm" ):
                return visitor.visitSpecialForm(self)
            else:
                return visitor.visitChildren(self)




    def specialForm(self):

        localctx = vbaParser.SpecialFormContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_specialForm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3847
            _la = self._input.LA(1)
            if not(_la==9 or _la==30 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 144115188075855939) != 0) or _la==171):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedTypeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(vbaParser.BOOLEAN, 0)

        def BYTE(self):
            return self.getToken(vbaParser.BYTE, 0)

        def CURRENCY(self):
            return self.getToken(vbaParser.CURRENCY, 0)

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def DOUBLE(self):
            return self.getToken(vbaParser.DOUBLE, 0)

        def INTEGER(self):
            return self.getToken(vbaParser.INTEGER, 0)

        def LONG(self):
            return self.getToken(vbaParser.LONG, 0)

        def LONGLONG(self):
            return self.getToken(vbaParser.LONGLONG, 0)

        def LONGPTR(self):
            return self.getToken(vbaParser.LONGPTR, 0)

        def SINGLE(self):
            return self.getToken(vbaParser.SINGLE, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def VARIANT(self):
            return self.getToken(vbaParser.VARIANT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_reservedTypeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedTypeIdentifier" ):
                listener.enterReservedTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedTypeIdentifier" ):
                listener.exitReservedTypeIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedTypeIdentifier" ):
                return visitor.visitReservedTypeIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def reservedTypeIdentifier(self):

        localctx = vbaParser.ReservedTypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_reservedTypeIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3849
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 52776558280704) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 61576946122753) != 0) or ((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & 2199023255585) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeableReservedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_typeableReservedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeableReservedName" ):
                listener.enterTypeableReservedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeableReservedName" ):
                listener.exitTypeableReservedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeableReservedName" ):
                return visitor.visitTypeableReservedName(self)
            else:
                return visitor.visitChildren(self)




    def typeableReservedName(self):

        localctx = vbaParser.TypeableReservedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_typeableReservedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3851
            _la = self._input.LA(1)
            if not(_la==45 or _la==162):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanLiteralIdentifier(self):
            return self.getTypedRuleContext(vbaParser.BooleanLiteralIdentifierContext,0)


        def objectLiteralIdentifier(self):
            return self.getTypedRuleContext(vbaParser.ObjectLiteralIdentifierContext,0)


        def variantLiteralIdentifier(self):
            return self.getTypedRuleContext(vbaParser.VariantLiteralIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_literalIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralIdentifier" ):
                listener.enterLiteralIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralIdentifier" ):
                listener.exitLiteralIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralIdentifier" ):
                return visitor.visitLiteralIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def literalIdentifier(self):

        localctx = vbaParser.LiteralIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_literalIdentifier)
        try:
            self.state = 3856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80, 168]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3853
                self.booleanLiteralIdentifier()
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3854
                self.objectLiteralIdentifier()
                pass
            elif token in [70, 125]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3855
                self.variantLiteralIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(vbaParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(vbaParser.FALSE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_booleanLiteralIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteralIdentifier" ):
                listener.enterBooleanLiteralIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteralIdentifier" ):
                listener.exitBooleanLiteralIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteralIdentifier" ):
                return visitor.visitBooleanLiteralIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteralIdentifier(self):

        localctx = vbaParser.BooleanLiteralIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_booleanLiteralIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3858
            _la = self._input.LA(1)
            if not(_la==80 or _la==168):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectLiteralIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTHING(self):
            return self.getToken(vbaParser.NOTHING, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_objectLiteralIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteralIdentifier" ):
                listener.enterObjectLiteralIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteralIdentifier" ):
                listener.exitObjectLiteralIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectLiteralIdentifier" ):
                return visitor.visitObjectLiteralIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def objectLiteralIdentifier(self):

        localctx = vbaParser.ObjectLiteralIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_objectLiteralIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3860
            self.match(vbaParser.NOTHING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariantLiteralIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EMPTY_X(self):
            return self.getToken(vbaParser.EMPTY_X, 0)

        def NULL_(self):
            return self.getToken(vbaParser.NULL_, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_variantLiteralIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariantLiteralIdentifier" ):
                listener.enterVariantLiteralIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariantLiteralIdentifier" ):
                listener.exitVariantLiteralIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariantLiteralIdentifier" ):
                return visitor.visitVariantLiteralIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def variantLiteralIdentifier(self):

        localctx = vbaParser.VariantLiteralIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_variantLiteralIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3862
            _la = self._input.LA(1)
            if not(_la==70 or _la==125):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedForImplementationUseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def LINEINPUT(self):
            return self.getToken(vbaParser.LINEINPUT, 0)

        def VB_BASE(self):
            return self.getToken(vbaParser.VB_BASE, 0)

        def VB_CONTROL(self):
            return self.getToken(vbaParser.VB_CONTROL, 0)

        def VB_CREATABLE(self):
            return self.getToken(vbaParser.VB_CREATABLE, 0)

        def VB_CUSTOMIZABLE(self):
            return self.getToken(vbaParser.VB_CUSTOMIZABLE, 0)

        def VB_DESCRIPTION(self):
            return self.getToken(vbaParser.VB_DESCRIPTION, 0)

        def VB_EXPOSED(self):
            return self.getToken(vbaParser.VB_EXPOSED, 0)

        def VB_EXT_KEY(self):
            return self.getToken(vbaParser.VB_EXT_KEY, 0)

        def VB_GLOBALNAMESPACE(self):
            return self.getToken(vbaParser.VB_GLOBALNAMESPACE, 0)

        def VB_HELPID(self):
            return self.getToken(vbaParser.VB_HELPID, 0)

        def VB_INVOKE_FUNC(self):
            return self.getToken(vbaParser.VB_INVOKE_FUNC, 0)

        def VB_INVOKE_PROPERTY(self):
            return self.getToken(vbaParser.VB_INVOKE_PROPERTY, 0)

        def VB_INVOKE_PROPERTYPUT(self):
            return self.getToken(vbaParser.VB_INVOKE_PROPERTYPUT, 0)

        def VB_INVOKE_PROPERTYPUTREF(self):
            return self.getToken(vbaParser.VB_INVOKE_PROPERTYPUTREF, 0)

        def VB_MEMBERFLAGS(self):
            return self.getToken(vbaParser.VB_MEMBERFLAGS, 0)

        def VB_NAME(self):
            return self.getToken(vbaParser.VB_NAME, 0)

        def VB_PREDECLAREDID(self):
            return self.getToken(vbaParser.VB_PREDECLAREDID, 0)

        def VB_PROCDATA(self):
            return self.getToken(vbaParser.VB_PROCDATA, 0)

        def VB_TEMPLATEDERIVED(self):
            return self.getToken(vbaParser.VB_TEMPLATEDERIVED, 0)

        def VB_USERMEMID(self):
            return self.getToken(vbaParser.VB_USERMEMID, 0)

        def VB_VARDESCRIPTION(self):
            return self.getToken(vbaParser.VB_VARDESCRIPTION, 0)

        def VB_VARHELPID(self):
            return self.getToken(vbaParser.VB_VARHELPID, 0)

        def VB_VARMEMBERFLAGS(self):
            return self.getToken(vbaParser.VB_VARMEMBERFLAGS, 0)

        def VB_VARPROCDATA(self):
            return self.getToken(vbaParser.VB_VARPROCDATA, 0)

        def VB_VARUSERMEMID(self):
            return self.getToken(vbaParser.VB_VARUSERMEMID, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_reservedForImplementationUse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedForImplementationUse" ):
                listener.enterReservedForImplementationUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedForImplementationUse" ):
                listener.exitReservedForImplementationUse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedForImplementationUse" ):
                return visitor.visitReservedForImplementationUse(self)
            else:
                return visitor.visitChildren(self)




    def reservedForImplementationUse(self):

        localctx = vbaParser.ReservedForImplementationUseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_reservedForImplementationUse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3864
            _la = self._input.LA(1)
            if not(_la==7 or _la==107 or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 16777215) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FutureReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CDECL(self):
            return self.getToken(vbaParser.CDECL, 0)

        def DECIMAL(self):
            return self.getToken(vbaParser.DECIMAL, 0)

        def DEFDEC(self):
            return self.getToken(vbaParser.DEFDEC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_futureReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFutureReserved" ):
                listener.enterFutureReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFutureReserved" ):
                listener.exitFutureReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFutureReserved" ):
                return visitor.visitFutureReserved(self)
            else:
                return visitor.visitChildren(self)




    def futureReserved(self):

        localctx = vbaParser.FutureReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_futureReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3866
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 18295873553301504) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeignNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SQUARE_BRACKET(self):
            return self.getToken(vbaParser.L_SQUARE_BRACKET, 0)

        def foreignIdentifier(self):
            return self.getTypedRuleContext(vbaParser.ForeignIdentifierContext,0)


        def R_SQUARE_BRACKET(self):
            return self.getToken(vbaParser.R_SQUARE_BRACKET, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_foreignName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeignName" ):
                listener.enterForeignName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeignName" ):
                listener.exitForeignName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeignName" ):
                return visitor.visitForeignName(self)
            else:
                return visitor.visitChildren(self)




    def foreignName(self):

        localctx = vbaParser.ForeignNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_foreignName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3868
            self.match(vbaParser.L_SQUARE_BRACKET)
            self.state = 3869
            self.foreignIdentifier()
            self.state = 3870
            self.match(vbaParser.R_SQUARE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeignIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(vbaParser.NEWLINE, 0)

        def LINE_CONTINUATION(self):
            return self.getToken(vbaParser.LINE_CONTINUATION, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_foreignIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeignIdentifier" ):
                listener.enterForeignIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeignIdentifier" ):
                listener.exitForeignIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeignIdentifier" ):
                return visitor.visitForeignIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def foreignIdentifier(self):

        localctx = vbaParser.ForeignIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_foreignIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3872
            _la = self._input.LA(1)
            if _la <= 0 or _la==258 or _la==259:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedTypeIdentifier(self):
            return self.getTypedRuleContext(vbaParser.ReservedTypeIdentifierContext,0)


        def L_SQUARE_BRACKET(self):
            return self.getToken(vbaParser.L_SQUARE_BRACKET, 0)

        def R_SQUARE_BRACKET(self):
            return self.getToken(vbaParser.R_SQUARE_BRACKET, 0)

        def OBJECT(self):
            return self.getToken(vbaParser.OBJECT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_builtinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltinType" ):
                listener.enterBuiltinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltinType" ):
                listener.exitBuiltinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuiltinType" ):
                return visitor.visitBuiltinType(self)
            else:
                return visitor.visitChildren(self)




    def builtinType(self):

        localctx = vbaParser.BuiltinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_builtinType)
        try:
            self.state = 3883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,566,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3874
                self.reservedTypeIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3875
                self.match(vbaParser.L_SQUARE_BRACKET)
                self.state = 3876
                self.reservedTypeIdentifier()
                self.state = 3877
                self.match(vbaParser.R_SQUARE_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3879
                self.match(vbaParser.OBJECT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3880
                self.match(vbaParser.L_SQUARE_BRACKET)
                self.state = 3881
                self.match(vbaParser.OBJECT)
                self.state = 3882
                self.match(vbaParser.R_SQUARE_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def typeSuffix(self):
            return self.getTypedRuleContext(vbaParser.TypeSuffixContext,0)


        def typeableReservedName(self):
            return self.getTypedRuleContext(vbaParser.TypeableReservedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedName" ):
                listener.enterTypedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedName" ):
                listener.exitTypedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedName" ):
                return visitor.visitTypedName(self)
            else:
                return visitor.visitChildren(self)




    def typedName(self):

        localctx = vbaParser.TypedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_typedName)
        try:
            self.state = 3891
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 8, 11, 12, 13, 27, 28, 31, 32, 33, 38, 76, 87, 99, 104, 106, 115, 116, 117, 118, 120, 126, 132, 137, 142, 144, 147, 160, 165, 199, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 267]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3885
                self.ambiguousIdentifier()
                self.state = 3886
                self.typeSuffix()
                pass
            elif token in [45, 162]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3888
                self.typeableReservedName()
                self.state = 3889
                self.typeSuffix()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(vbaParser.AMPERSAND, 0)

        def PERCENT(self):
            return self.getToken(vbaParser.PERCENT, 0)

        def HASH(self):
            return self.getToken(vbaParser.HASH, 0)

        def EXCLAM(self):
            return self.getToken(vbaParser.EXCLAM, 0)

        def ASPERAND(self):
            return self.getToken(vbaParser.ASPERAND, 0)

        def Dollar(self):
            return self.getToken(vbaParser.Dollar, 0)

        def POW(self):
            return self.getToken(vbaParser.POW, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_typeSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSuffix" ):
                listener.enterTypeSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSuffix" ):
                listener.exitTypeSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSuffix" ):
                return visitor.visitTypeSuffix(self)
            else:
                return visitor.visitChildren(self)




    def typeSuffix(self):

        localctx = vbaParser.TypeSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_typeSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3893
            _la = self._input.LA(1)
            if not(((((_la - 224)) & ~0x3f) == 0 and ((1 << (_la - 224)) & 4457635) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(vbaParser.ACCESS, 0)

        def ALIAS(self):
            return self.getToken(vbaParser.ALIAS, 0)

        def APPACTIVATE(self):
            return self.getToken(vbaParser.APPACTIVATE, 0)

        def APPEND(self):
            return self.getToken(vbaParser.APPEND, 0)

        def BASE(self):
            return self.getToken(vbaParser.BASE, 0)

        def BEEP(self):
            return self.getToken(vbaParser.BEEP, 0)

        def BEGIN(self):
            return self.getToken(vbaParser.BEGIN, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def CLASS(self):
            return self.getToken(vbaParser.CLASS, 0)

        def CHDIR(self):
            return self.getToken(vbaParser.CHDIR, 0)

        def CHDRIVE(self):
            return self.getToken(vbaParser.CHDRIVE, 0)

        def CLASS_INITIALIZE(self):
            return self.getToken(vbaParser.CLASS_INITIALIZE, 0)

        def CLASS_TERMINATE(self):
            return self.getToken(vbaParser.CLASS_TERMINATE, 0)

        def COLLECTION(self):
            return self.getToken(vbaParser.COLLECTION, 0)

        def COMPARE(self):
            return self.getToken(vbaParser.COMPARE, 0)

        def DATABASE(self):
            return self.getToken(vbaParser.DATABASE, 0)

        def DELETESETTING(self):
            return self.getToken(vbaParser.DELETESETTING, 0)

        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def FILECOPY(self):
            return self.getToken(vbaParser.FILECOPY, 0)

        def GO(self):
            return self.getToken(vbaParser.GO, 0)

        def KILL(self):
            return self.getToken(vbaParser.KILL, 0)

        def LOAD(self):
            return self.getToken(vbaParser.LOAD, 0)

        def LIB(self):
            return self.getToken(vbaParser.LIB, 0)

        def LINE(self):
            return self.getToken(vbaParser.LINE, 0)

        def MID(self):
            return self.getToken(vbaParser.MID, 0)

        def MIDB(self):
            return self.getToken(vbaParser.MIDB, 0)

        def MID_D(self):
            return self.getToken(vbaParser.MID_D, 0)

        def MIDB_D(self):
            return self.getToken(vbaParser.MIDB_D, 0)

        def MKDIR(self):
            return self.getToken(vbaParser.MKDIR, 0)

        def MODULE(self):
            return self.getToken(vbaParser.MODULE, 0)

        def NAME(self):
            return self.getToken(vbaParser.NAME, 0)

        def OBJECT(self):
            return self.getToken(vbaParser.OBJECT, 0)

        def OUTPUT(self):
            return self.getToken(vbaParser.OUTPUT, 0)

        def PROPERTY(self):
            return self.getToken(vbaParser.PROPERTY, 0)

        def RANDOM(self):
            return self.getToken(vbaParser.RANDOM, 0)

        def RANDOMIZE(self):
            return self.getToken(vbaParser.RANDOMIZE, 0)

        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def RESET(self):
            return self.getToken(vbaParser.RESET, 0)

        def RMDIR(self):
            return self.getToken(vbaParser.RMDIR, 0)

        def SAVEPICTURE(self):
            return self.getToken(vbaParser.SAVEPICTURE, 0)

        def SAVESETTING(self):
            return self.getToken(vbaParser.SAVESETTING, 0)

        def SENDKEYS(self):
            return self.getToken(vbaParser.SENDKEYS, 0)

        def SETATTR(self):
            return self.getToken(vbaParser.SETATTR, 0)

        def STEP(self):
            return self.getToken(vbaParser.STEP, 0)

        def TEXT(self):
            return self.getToken(vbaParser.TEXT, 0)

        def TIME(self):
            return self.getToken(vbaParser.TIME, 0)

        def UNLOAD(self):
            return self.getToken(vbaParser.UNLOAD, 0)

        def VERSION(self):
            return self.getToken(vbaParser.VERSION, 0)

        def WIDTH(self):
            return self.getToken(vbaParser.WIDTH, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_ambiguousKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousKeyword" ):
                listener.enterAmbiguousKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousKeyword" ):
                listener.exitAmbiguousKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmbiguousKeyword" ):
                return visitor.visitAmbiguousKeyword(self)
            else:
                return visitor.visitChildren(self)




    def ambiguousKeyword(self):

        localctx = vbaParser.AmbiguousKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_ambiguousKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3895
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 290312960276) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 2379052343032285185) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 1297036692691353637) != 0) or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & 131071) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[280] = self.expression_sempred
        self._predicates[281] = self.lExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def lExpression_sempred(self, localctx:LExpressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         




