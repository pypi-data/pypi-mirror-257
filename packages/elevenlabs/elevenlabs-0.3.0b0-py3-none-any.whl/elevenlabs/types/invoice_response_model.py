# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .invoice_response_model_currency import InvoiceResponseModelCurrency
from .subscription_status import SubscriptionStatus

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class InvoiceResponseModel(pydantic.BaseModel):
    tier: typing.Optional[str]
    character_count: typing.Optional[int]
    character_limit: typing.Optional[int]
    can_extend_character_limit: typing.Optional[bool]
    allowed_to_extend_character_limit: typing.Optional[bool]
    next_character_count_reset_unix: typing.Optional[int]
    voice_limit: typing.Optional[int]
    max_voice_add_edits: typing.Optional[int]
    voice_add_edit_counter: typing.Optional[int]
    professional_voice_limit: typing.Optional[int]
    can_extend_voice_limit: typing.Optional[bool]
    can_use_instant_voice_cloning: typing.Optional[bool]
    can_use_professional_voice_cloning: typing.Optional[bool]
    status: typing.Optional[SubscriptionStatus]
    amount_due_cents: int
    next_payment_attempt_unix: int
    currency: typing.Optional[InvoiceResponseModelCurrency]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
