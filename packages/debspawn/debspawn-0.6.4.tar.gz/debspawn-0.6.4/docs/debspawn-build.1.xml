<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [

  <!ENTITY date        "<date>18 August, 2018</date>">

  <!ENTITY pagename    "debspawn-build">
  <!ENTITY command     "debspawn build">
]>

<refentry>
	<refentryinfo>
	<title>&command;</title>
	<copyright>
		<year>2018-2022</year>
		<holder>Matthias Klumpp</holder>
	</copyright>
	<productname>Debspawn</productname>
	&date;
	</refentryinfo>

	<refmeta>
		<refentrytitle>&pagename;</refentrytitle>
		<manvolnum>1</manvolnum>
	</refmeta>
	<refnamediv>
		<refname>&pagename;</refname>
		<refpurpose>Build Debian packages in a container</refpurpose>
	</refnamediv>

       <refsynopsisdiv>
	       <cmdsynopsis>
		       <command>&command;</command>
		       @BUILD_FLAGS_SYNOPSIS@
		       <arg choice="req">SUITE</arg>
		       <arg>DIR|DSC_FILE</arg>
		</cmdsynopsis>
	</refsynopsisdiv>

	<refsect1>
		<title>Description</title>
		<para>
			Build a Debian package from a directory or source package <filename>*.dsc</filename> file.
			<command>debspawn</command> will create a new container for the respective build using the base image specified,
			build the package and return build artifacts in the default output directory <filename>/var/lib/debspawn/results/</filename> unless
			a different location was specified via the <option>--results-dir</option> flag.
		</para>
		<para>
			Downloaded packages that are build dependencies are cached and will be reused on subsequent builds if possible.
		</para>
		<para>
			You can inject packages into the build environment that are not available in the preconfigured APT repositories by
			placing them in <filename>/var/lib/debspawn/injected-pkgs/${container-name}</filename>, or in
			<filename>/var/lib/debspawn/injected-pkgs/</filename> to make a package available in all environments.
			Internally, <command>debspawn</command> will build a transient package repository with the respective packages and
			add it as a package source for APT.
		</para>
		<para>
			If you want to debug the package build process, you can pass the <option>--interact</option> flag to <command>debspawn</command>. This
			will open an interactive root shell in the build environment post-build, no matter whether the build failed or succeeded.
			After investigating the issue / building the package manually, the shell can be exited and the user is asked whether <command>debspawn</command>
			should copy back the changes made in the packages' <filename>debian/</filename> directory to the host to make them permanent.
			Please keep in mind that while interactive mode is enabled, no build log can be created.
		</para>
	</refsect1>

	<refsect1>
		<title>Examples</title>
		<para>
			You can build a package from its source directory, or just by passing a plain <filename>.dsc</filename> file to <command>&command;</command>.
			If the result should be automatically signed, the <option>--sign</option> flag needs to be passed too:
		</para>
		<screen>
			<prompt>$</prompt> <command>cd</command> ~/packages/hello
			<prompt>$</prompt> <command>&command;</command> sid --sign

			<prompt>$</prompt> <command>&command;</command> --arch=i386 cosmic ./hello_2.10-1.dsc
		</screen>
		<para>
			You can also build packages using <command>git-buildpackage</command> and <command>debspawn</command>. In this case the <option>--lintian</option>
			flag is also used to perform a Lintian static analysis check in the container after build:
		</para>
		<screen>
			<prompt>$</prompt> <command>gbp buildpackage</command> --git-builder='debspawn b sid --lintian --sign'
		</screen>
		<para>
			To debug a build issue interactively, the <option>--interact</option> flag can be used:
		</para>
		<screen>
			<prompt>$</prompt> <command>&command;</command> sid --interact
		</screen>
	</refsect1>

	<refsect1>
		<title>Options</title>

		<variablelist>
			@BUILD_FLAGS_ENTRIES@
		</variablelist>
	</refsect1>

	<refsect1>
		<title>Differences to sbuild</title>
		<para>
			On Debian, <command>sbuild</command> is the primary tool used for package building, which uses different technology.
			So naturally, the question is whether the sbuild build environments and the <command>debspawn</command> build environments
			are be identical or at least compatible.
		</para>
		<para>
			Due to the different technology used, there may be subtle differences between <command>sbuild</command> chroots and
			<command>debspawn</command> containers. The differences should not have any impact on package builds, and any such occurrence is
			highly likely a bug in the package's build process.
			If you think it is not, please file a bug against Debspawn. We try to be as close to sbuild's default environment as possible, but
			unfortunately can not make any guarantees.
		</para>
		<para>
			One way the build environment of <command>debspawn</command> differs from Debian's default <command>sbuild</command> setup intentionally is
			in its consistent use of unicode. By default, <command>debspawn</command> will ensure that unicode is always available and enabled.
			If you do not want this behavior, you can pass the <option>--no-unicode</option> flag to <command>&command;</command> to disable unicode in
			the tool itself and in the build environment.
		</para>
	</refsect1>

	<refsect1>
		<title>See Also</title>
		<para>debspawn-update(1), debspawn-create(1), dpkg-buildpackage(1).</para>
	</refsect1>
<refsect1>
<title>AUTHOR</title>
<para>
	This manual page was written by Matthias Klumpp <email>mak@debian.org</email>.
</para>
</refsect1>
</refentry>
