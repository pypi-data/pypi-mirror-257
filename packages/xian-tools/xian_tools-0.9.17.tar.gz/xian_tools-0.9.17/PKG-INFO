Metadata-Version: 2.1
Name: xian-tools
Version: 0.9.17
Summary: Core utils to interact with Xian network
Author: endogen
Requires-Python: >=3.9,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: pynacl (>=1.5.0,<2.0.0)
Requires-Dist: requests (>=2.31.0,<3.0.0)
Description-Content-Type: text/markdown

### How to install

```python
pip install xian-tools
```

# Wallet

### Create new wallet
```python
from xian_tools.wallet import Wallet

# Create wallet from scratch
wallet = Wallet()
```

### Create wallet from existing private key
```python
from xian_tools.wallet import Wallet

# Create wallet from existing private key
privkey = 'ed30796abc4ab47a97bfb37359f50a9c362c7b304a4b4ad1b3f5369ecb6f7fd8'
wallet = Wallet(privkey)
```

### Get private key and public key
```python
from xian_tools.wallet import Wallet

wallet = Wallet()

# Public key
address = wallet.public_key
print(f'address: {address}')

# Private key
privkey = wallet.private_key
print(f'private key: {privkey}')
```

### Sign message with private key
```python
from xian_tools.wallet import Wallet

wallet = Wallet()

# Sign message with private key
message = 'I will sign this message'
signed = wallet.sign_msg(message)
print(f'Signed message: {signed}')
```

# Xian

### Submit token contract
```python
from xian_tools.wallet import Wallet
from xian_tools.xian import Xian

wallet = Wallet('ed30796abc4ab47a97bfb37359f50a9c362c7b304a4b4ad1b3f5369ecb6f7fd8')
xian = Xian('http://89.58.55.192:26657', wallet)

# Contract code
code = '''
token_name = Variable() # Optional

@construct
def seed():
    # Create a token with the information from fixtures/tokenInfo
    token_name.set("Test Token")

@export
def set_token_name(new_name: str):
    # Set the token name
    token_name.set(new_name)
'''

# Deploy contract on network
success, tx_hash = xian.deploy_contract('con_new_token', code)
print(f'success: {success}')
print(f'tx_hash: {tx_hash}')
```

### Approve contract and retrieve approved amount
```python
from xian_tools.wallet import Wallet
from xian_tools.xian import Xian

wallet = Wallet('ed30796abc4ab47a97bfb37359f50a9c362c7b304a4b4ad1b3f5369ecb6f7fd8')
xian = Xian('http://89.58.55.192:26657', wallet)

# Get approved amount (can only be 0 at this point)
approved = xian.get_approved_amount('con_new_token')
print(f'approved: {approved}')

# Approve the default amount
success, tx_hash = xian.approve('con_new_token')
print(f'success: {success}')
print(f'tx_hash: {tx_hash}')

# Get the approved amount again (should not be 0 anymore)
approved = xian.get_approved_amount('con_new_token')
print(approved)

# Get token balance (Will be 0 but just to showcase)
print(xian.get_balance(contract='con_new_token'))
```

# Transactions

### High level usage
```python
from xian_tools.wallet import Wallet
from xian_tools.xian import Xian

node_url = 'http://89.163.130.217:26657'
privkey = 'ed30796abc4ab47a97bfb37359f50a9c362c7b304a4b4ad1b3f5369ecb6f7fd8'

wallet = Wallet(seed=privkey)
xian = Xian(node_url, wallet)

success, data = xian.send_tx(
    contract='currency',
    function='transfer',
    kwargs={
        'to': 'burned',
        'amount': 1000,
    }
)

tx_hash = data['result']['hash']

print(f'tx successful: {success}')
print(f'tx hash: {tx_hash}')

if success:
    tx = xian.get_tx(tx_hash)
    print(f'transaction: {tx}')
```

### Low level usage
```python
from xian_tools.wallet import Wallet
from xian_tools.xian import Xian
from xian_tools.transactions import get_nonce, create_tx, broadcast_tx
from xian_tools.utils import cid

node_url = "http://89.163.130.217:26657"

wallet = Wallet(seed='ed30796abc4ab47a97bfb37359f50a9c362c7b304a4b4ad1b3f5369ecb6f7fd8')

next_nonce = get_nonce(node_url, wallet.public_key)
print(f'next nonce: {next_nonce}')

xian = Xian(node_url, wallet)
print(f'balance: {xian.get_balance()}')

tx = create_tx(
    contract="currency",
    function="transfer",
    kwargs={
        "to": "burned",
        "amount": 100,
    },
    nonce=next_nonce,
    stamps=100,
    chain_id=cid(),
    private_key=wallet.private_key
)
print(f'tx: {tx}')

success, data = broadcast_tx(node_url, tx)
print(f'broadcast - success: {success}')
print(f'broadcast - data: {data}')

print(f'next nonce: {get_nonce(node_url, wallet.public_key)}')
print(f'balance: {xian.get_balance()}')

tx_hash = data["result"]["hash"]
print(f'tx hash: {tx_hash}')

decoded_tx = xian.get_tx(tx_hash)
print(f'decoded tx: {decoded_tx}')
```
